<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>springboot2</title>
    <link href="/2022/03/07/springboot2/"/>
    <url>/2022/03/07/springboot2/</url>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>SpringBoot快速入门</li><li>SpringBoot基础配置</li><li>基于SpringBoot整合SSMP</li></ul><h2 id="快速入门和基础配置"><a href="#快速入门和基础配置" class="headerlink" title="快速入门和基础配置"></a>快速入门和基础配置</h2><h3 id="几种搭建SpringBoot的方式"><a href="#几种搭建SpringBoot的方式" class="headerlink" title="几种搭建SpringBoot的方式"></a>几种搭建SpringBoot的方式</h3><ul><li>idea中根据向导进行联网快速制作</li><li>SpringBoot官网制作</li><li>选择start来源为自定义URL <a href="http://start.aliyun.com或https//start.aliyun.com">http://start.aliyun.com或https://start.aliyun.com</a></li><li>手动创建一个maven工程，改造成sprinboot（1.pom 2.引导类)</li></ul><h3 id="在Idea中隐藏指定文件-文件夹"><a href="#在Idea中隐藏指定文件-文件夹" class="headerlink" title="在Idea中隐藏指定文件/文件夹"></a>在Idea中隐藏指定文件/文件夹</h3><p>【Files】-&gt;【Settings】-&gt;【Editor】-&gt;【File Types】-&gt;【Ignored Files and Folders】</p><h3 id="springboot的pom文件"><a href="#springboot的pom文件" class="headerlink" title="springboot的pom文件"></a>springboot的pom文件</h3><ul><li>继承spring-boot-starter-parent(SpringBoot统一管理版本减少依赖冲突的)</li><li>实际开发中如果需要用什么技术，先去找有没有这个技术对应的starter (starter可以实现快速配置的效果)<ul><li>如果有对应的starter，直接写starter，而且无需指定版本，版本由parent提供</li><li>如果没有对应的starter，手写坐标即可</li></ul></li></ul><h3 id="springboot中tomcat服务器运行原因"><a href="#springboot中tomcat服务器运行原因" class="headerlink" title="springboot中tomcat服务器运行原因"></a>springboot中tomcat服务器运行原因</h3><p>其实是以对象的形式在Spring容器中运行的(主要是在tomcat-embed-core里)</p><h3 id="更换内嵌Tomcat"><a href="#更换内嵌Tomcat" class="headerlink" title="更换内嵌Tomcat"></a>更换内嵌Tomcat</h3><p>排除掉spring-boot-starter-tomcat 新增一个spring-boot-starter-jetty</p><h3 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h3><p>默认是application.properties</p><ul><li>properties格式</li><li>yml格式</li><li>yaml格式</li></ul><p>优先级<br>application.properties  &gt;  application.yml  &gt;  application.yaml<br>相同的按优先级覆盖，不同的都保留</p><h3 id="自动提示功能消失解决方案"><a href="#自动提示功能消失解决方案" class="headerlink" title="自动提示功能消失解决方案"></a>自动提示功能消失解决方案</h3><ul><li>Setting → Project Structure → Facets</li><li>选中对应项目/工程</li><li>Customize Spring Boot</li><li>选择配置文件</li></ul><h3 id="yml数据读取"><a href="#yml数据读取" class="headerlink" title="yml数据读取"></a>yml数据读取</h3><ul><li>@Value 读取单个数据</li><li>@Autowired 自动装配数据到Environment对象中</li><li>@ConfigurationProperties 常用的做法是封装到对象，只加载部分数据</li></ul><h2 id="整合SSMP"><a href="#整合SSMP" class="headerlink" title="整合SSMP"></a>整合SSMP</h2><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><h3 id="spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包"><a href="#spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包" class="headerlink" title="spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包"></a>spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包</h3><p>为什么可以独立运行呢？</p><ul><li>读取MANIFEST.MF 里的Main-Class jar运行的入口</li><li>org.springframework.boot.loader.JarLauncher运行时会找到Start-Class属性com.itheima.SSMPApplication</li><li>运行启动类启动SpringBoot程序</li><li>依赖的jar包放在lib里</li></ul><h3 id="程序运行时端口占用问题"><a href="#程序运行时端口占用问题" class="headerlink" title="程序运行时端口占用问题"></a>程序运行时端口占用问题</h3><ul><li>查找所有端口使用情况 netstat -ano</li><li>查找指定端口 netstat -ano | findstr “端口号”</li><li>查找PID对应的进程 tasklist | findstr “进程PID号”</li><li>根据进程号杀死进程 taskkill /f /pid “进程PID号”</li><li>根据进程名称杀死进程 taskkill /f /t /im “”  (/f 强制， /t 关联子进程， /im 进程名称)<h3 id="临时属性配置"><a href="#临时属性配置" class="headerlink" title="临时属性配置"></a>临时属性配置</h3></li><li>java –jar springboot.jar –-server.port=80 –logging.level.root=debug</li><li>Program arguments对应的位置就是添加临时属性的</li><li>本质上都是传递到main函数的args数组中</li><li>由于临时属性优先级比较高，超过配置文件，企业开发中通常关闭临时属性入口</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>SpringApplication.<span class="hljs-built_in">run</span>(SSMPApplication.class);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4种配置文件"><a href="#4种配置文件" class="headerlink" title="4种配置文件"></a>4种配置文件</h3><ul><li>jar所在目录的config文件里的application.yml 优先级最高 运维经理整体调控</li><li>jar所在目录的application.yml 运维人员</li><li>classpath: config/application.yml 项目经理</li><li>classpath: application.yml 开发</li></ul><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><ul><li>通过临时参数配置配置文件名称 –spring.config.name=e.properties,b.properties</li><li>通过临时参数配置配置文件路径 –spring.config.location=classpath:/e.yml,classpath:/b.yml</li><li>微服务使用的配置中心管理</li></ul><h3 id="多环境开发推荐使用多文件版本"><a href="#多环境开发推荐使用多文件版本" class="headerlink" title="多环境开发推荐使用多文件版本"></a>多环境开发推荐使用多文件版本</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span><br><span class="hljs-attr">active:</span> <span class="hljs-string">pro</span><span class="hljs-comment"># 启动pro</span><br></code></pre></td></tr></table></figure><p><em><strong>application-pro.yaml</strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p><em><strong>application-dev.yaml</strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><h3 id="多环境开发使用group属性设置配置文件分组，便于线上维护管理"><a href="#多环境开发使用group属性设置配置文件分组，便于线上维护管理" class="headerlink" title="多环境开发使用group属性设置配置文件分组，便于线上维护管理"></a>多环境开发使用group属性设置配置文件分组，便于线上维护管理</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>        <span class="hljs-attr">group:</span><br>        <span class="hljs-attr">&quot;dev&quot;:</span> <span class="hljs-string">devDB,devRedis,devMVC</span><br>      <span class="hljs-attr">&quot;pro&quot;:</span> <span class="hljs-string">proDB,proRedis,proMVC</span><br>      <span class="hljs-attr">&quot;test&quot;:</span> <span class="hljs-string">testDB,testRedis,testMVC</span><br></code></pre></td></tr></table></figure><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><span class="hljs-comment">&lt;!--默认启动环境--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>SpringBoot中读取maven设置值</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">@profile.active@</span><br></code></pre></td></tr></table></figure><p>上面的@属性名@就是读取maven中配置的属性值的语法格式。</p><h4 id="idea里的一个bug"><a href="#idea里的一个bug" class="headerlink" title="idea里的一个bug"></a>idea里的一个bug</h4><p>在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</p><h1 id="开发实用篇"><a href="#开发实用篇" class="headerlink" title="开发实用篇"></a>开发实用篇</h1><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><h3 id="idea自动热部署实现-idea设置当idea工具失去焦点5秒后进行热部署"><a href="#idea自动热部署实现-idea设置当idea工具失去焦点5秒后进行热部署" class="headerlink" title="idea自动热部署实现(idea设置当idea工具失去焦点5秒后进行热部署)"></a>idea自动热部署实现(idea设置当idea工具失去焦点5秒后进行热部署)</h3><ul><li><strong>步骤1</strong> 导入开发者工具对应的坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>步骤2</strong> setting-&gt;build-&gt;Compiler-&gt;勾选【Build project automatically】</li></ul><h3 id="设置不参与热部署的文件或文件夹"><a href="#设置不参与热部署的文件或文件夹" class="headerlink" title="设置不参与热部署的文件或文件夹"></a>设置不参与热部署的文件或文件夹</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-attr">exclude:</span> <span class="hljs-string">static/**,public/**,config/application.yml</span><br></code></pre></td></tr></table></figure><h3 id="关闭热部署（生产环境不需要热部署功能，资源浪费）"><a href="#关闭热部署（生产环境不需要热部署功能，资源浪费）" class="headerlink" title="关闭热部署（生产环境不需要热部署功能，资源浪费）"></a>关闭热部署（生产环境不需要热部署功能，资源浪费）</h3><ul><li>yaml配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>更高优先级配置<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@SpringBootApplication<br>public <span class="hljs-keyword">class</span> SSMPApplication &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;spring.devtools.restart.enabled&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpringApplication</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SSMPApplication</span>.</span></span><span class="hljs-keyword">class</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><ul><li>使用@ConfigurationProperties可以为使用@Bean声明的第三方bean绑定属性 (可是在方法上使用)</li><li>当使用@EnableConfigurationProperties声明进行属性绑定的bean后，无需使用@Component注解再次进行bean声明（统一管理属性绑定的bean）</li></ul><h3 id="松散绑定-yaml配置文件属性格式松散"><a href="#松散绑定-yaml配置文件属性格式松散" class="headerlink" title="松散绑定(yaml配置文件属性格式松散)"></a>松散绑定(yaml配置文件属性格式松散)</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">servers:</span><br>  <span class="hljs-attr">ipAddress:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>       <span class="hljs-comment"># 驼峰模式</span><br>  <span class="hljs-attr">ip_address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>      <span class="hljs-comment"># 下划线模式</span><br>  <span class="hljs-attr">ip-address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>      <span class="hljs-comment"># 烤肉串模式</span><br>  <span class="hljs-attr">IP_ADDRESS:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>      <span class="hljs-comment"># 常量模式</span><br></code></pre></td></tr></table></figure><p>推荐使用中划线格式也就是烤肉串模式</p><p>@Value注解不支持松散绑定规则</p><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.validation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>validation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span><br><span class="hljs-comment">//开启对当前bean的属性注入校验</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerConfig</span> </span>&#123;<br>    <span class="hljs-comment">//设置具体的规则</span><br>    <span class="hljs-meta">@Max(value = 8888,message = &quot;最大值不能超过8888&quot;)</span><br>    <span class="hljs-meta">@Min(value = 202,message = &quot;最小值不能低于202&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>导入JSR303和校验框架坐标</li><li>@Validated启动校验功能</li><li>@Max(value=222,message=”最大值不能超过8888”) 设置校验格式</li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>yaml文件中对于数字的定义支持进制（<strong>支持二进制，八进制，十六进制</strong>）书写格式，如需使用字符串请使用引号明确标注</li><li>双引号不会对串中转义字符进行转义 单引号会转义</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="数据层解决方案"><a href="#数据层解决方案" class="headerlink" title="数据层解决方案"></a>数据层解决方案</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>数据层解决方案=数据源+持久化+数据库三种技术（如Druid+MyBatisPlus+Mysql）</p><h4 id="数据源技术"><a href="#数据源技术" class="headerlink" title="数据源技术"></a>数据源技术</h4><ul><li>Druid数据源<ul><li>引入starter坐标<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>yaml配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">druid:</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span><br>            <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>            <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>            <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure></li></ul></li><li>Hikari springboot默认使用的<br>  如果使用默认的配置删除druid就行<br>  否则配置如下  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="持久化技术"><a href="#持久化技术" class="headerlink" title="持久化技术"></a>持久化技术</h4><ul><li>SpringBoot内置JdbcTemplate持久化解决方案</li><li>使用JdbcTemplate需要导入spring-boot-starter-jdbc的坐标</li><li>Spring JdbcTemplate的使用<ul><li>查找<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>void test<span class="hljs-constructor">JdbcTemplate(@Autowired JdbcTemplate <span class="hljs-params">jdbcTemplate</span>)</span>&#123;<br>    <br>    String sql = <span class="hljs-string">&quot;select * from tbl_book&quot;</span>;<br>    RowMapper&lt;Book&gt; rm = <span class="hljs-keyword">new</span> RowMapper&lt;Book&gt;<span class="hljs-literal">()</span> &#123;<br>        @Override<br>        public Book map<span class="hljs-constructor">Row(ResultSet <span class="hljs-params">rs</span>, <span class="hljs-params">int</span> <span class="hljs-params">rowNum</span>)</span> throws SQLException &#123;<br>            Book temp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Book()</span>;<br>            temp.set<span class="hljs-constructor">Id(<span class="hljs-params">rs</span>.<span class="hljs-params">getInt</span>(<span class="hljs-string">&quot;id&quot;</span>)</span>);<br>            temp.set<span class="hljs-constructor">Name(<span class="hljs-params">rs</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;name&quot;</span>)</span>);<br>            temp.set<span class="hljs-constructor">Type(<span class="hljs-params">rs</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;type&quot;</span>)</span>);<br>            temp.set<span class="hljs-constructor">Description(<span class="hljs-params">rs</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;description&quot;</span>)</span>);<br>            return temp;<br>        &#125;<br>    &#125;;<br>    List&lt;Book&gt; <span class="hljs-built_in">list</span> = jdbcTemplate.query(sql, rm);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>增删改<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><br><span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">testJdbcTemplateSave</span>(<span class="hljs-params"><span class="hljs-meta">@Autowired</span> JdbcTemplate jdbcTemplate</span>)</span>&#123;<br><span class="hljs-built_in">String</span> sql = <span class="hljs-string">&quot;insert into tbl_book values(3,&#x27;springboot1&#x27;,&#x27;springboot2&#x27;,&#x27;springboot3&#x27;)&quot;</span>;<br>jdbcTemplate.update(sql);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h4><p>springboot提供了3款内置的数据库，分别是</p><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul><ol><li>H2内嵌式数据库启动方式，添加坐标，添加配置</li><li>H2数据库线上运行时请务必关闭<br>pom依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.h2database<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>如果需要访问h2控制台需要引入web<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>yaml 开启访问</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">h2:</span><br>    <span class="hljs-attr">console:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/h2</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:h2:~/test</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">sa</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h3 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h3><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><ul><li>导入springboot整合redis的starter坐标spring-boot-starter-data-redis</li><li>进行基础配置,可以不配,默认host: localhost port: 6379</li><li>使用springboot整合redis的专用客户端接口RedisTemplate操作 opsForValue opsForHash</li><li>可以修改redis客户端 client-type: jedis  springboot2默认是lettuce(jedis非线程安全，lettuce基于netty与服务器连接线程安全)</li></ul><h4 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h4><ul><li>导入springboot整合mogodb的starter坐标spring-boot-starter-data-mongodb</li><li>yaml设置数据库  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  data:</span><br><span class="hljs-symbol">    mongodb:</span><br><span class="hljs-symbol">      uri:</span> mongodb:<span class="hljs-comment">//localhost/itheima</span><br></code></pre></td></tr></table></figure></li><li>使用springboot整合mongodb的专用客户端接口MongoTemplate操作</li></ul><h4 id="ElasticSearch全文搜索"><a href="#ElasticSearch全文搜索" class="headerlink" title="ElasticSearch全文搜索"></a>ElasticSearch全文搜索</h4><ol><li>倒排索引 （数据得到id,再用id查数据） <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">- 例如<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>的数据中名称这一项的值是“中华人民共和国”，那么分词结束后，就会出现“中华”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>，“人民”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>，“共和国”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span><br><br>- 例如<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span>的数据中名称这一项的值是“人民代表大会“，那么分词结束后，就会出现“人民”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span>，“代表”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span>，“大会”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span><br><br>- 此时就会出现如下对应结果，按照上述形式可以对所有文档进行分词。需要注意分词的过程不是仅对一个字段进行，而是对每一个参与查询的字段都执行，最终结果汇总到一个表格中<br></code></pre></td></tr></table></figure><table><thead><tr><th>分词结果关键字</th><th>对应id</th></tr></thead><tbody><tr><td>中华</td><td>1</td></tr><tr><td>人民</td><td>1,2</td></tr><tr><td>共和国</td><td>1</td></tr><tr><td>代表</td><td>2</td></tr><tr><td>大会</td><td>2</td></tr></tbody></table></li><li>创建文档 </li><li>使用文档</li></ol><p><strong>Es支持rest操作,用postman可以操作,Ik 分词器设置索引规则</strong></p><p><strong>rest操作</strong></p><ol><li>添加 post<ul><li>_doc  设置随机id</li><li>_doc/1 设置指定id</li><li>_create/1 设置指定id</li></ul></li><li>查询 get<ul><li>_doc/1 查询指定id</li><li>_search 查所有</li><li>_search?q=name:springboot  条件查</li></ul></li><li>修改put 或者post <ul><li>put方法  _doc/1 body里添加修改的json对象  全覆盖</li><li>post方法 _update/1  “doc”:{}  只修改doc里的部分内容</li></ul></li></ol><p><strong>ES sprinboot没有整合高版本的，需要硬编码</strong></p><ol><li>导入springboot整合ES的High Level Client坐标elasticsearch-rest-high-level-client</li><li>手工管理客户端对象，包括初始化和关闭操作<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>&#123;<br>    client = <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(HttpHost.create(<span class="hljs-string">&quot;http://localhost:9200&quot;</span>)));<br>&#125;<br><br><span class="hljs-meta">@AfterEach</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    client.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用High Level Client根据操作的种类不同，选择不同的Request对象完成对应操作<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Test</span><br>    void testCreateIndex() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">CreateIndexRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">CreateIndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>);<br>        <span class="hljs-type">String</span> source <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;    <span class="hljs-subst">\&quot;</span>mappings<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;        <span class="hljs-subst">\&quot;</span>properties<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>id<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>keyword<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>text<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>analyzer<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ik_max_word<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>copy_to<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>all<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>description<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>text<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>analyzer<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ik_max_word<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>copy_to<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>all<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>keyword<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>all<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>text<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>analyzer<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ik_max_word<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;        &#125;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;    &#125;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        request.source(source, <span class="hljs-type">XContentType</span>.<span class="hljs-type">JSON</span>);<br>        client.indices().create(request, <span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testCreateDoc() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">Book</span> book <span class="hljs-operator">=</span> bookDao.selectById(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">IndexRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">IndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>).id(book.getId().toString());<br>        <span class="hljs-type">String</span> json <span class="hljs-operator">=</span> <span class="hljs-type">JSON</span>.toJSONString(book);<br>        request.source(json,<span class="hljs-type">XContentType</span>.<span class="hljs-type">JSON</span>).opType(<span class="hljs-type">DocWriteRequest</span>.<span class="hljs-type">OpType</span>.<span class="hljs-type">CREATE</span>);<br>        client.index(request,<span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testCreateDocs() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">List</span>&lt;<span class="hljs-type">Book</span>&gt; books <span class="hljs-operator">=</span> bookDao.selectList(null);<br>        <span class="hljs-type">BulkRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">BulkRequest</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">Book</span> book:books)&#123;<br>            <span class="hljs-type">IndexRequest</span> indexRequest <span class="hljs-operator">=</span> new <span class="hljs-type">IndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>).id(book.getId().toString());<br>            indexRequest.source(<span class="hljs-type">JSON</span>.toJSONString(book),<span class="hljs-type">XContentType</span>.<span class="hljs-type">JSON</span>).opType(<span class="hljs-type">DocWriteRequest</span>.<span class="hljs-type">OpType</span>.<span class="hljs-type">CREATE</span>);<br>            request.add(indexRequest);<br>        &#125;<br>        client.bulk(request,<span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testGet() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">GetRequest</span> getRequest <span class="hljs-operator">=</span> new <span class="hljs-type">GetRequest</span>(<span class="hljs-string">&quot;books&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-type">GetResponse</span> getResponse <span class="hljs-operator">=</span> client.get(getRequest, <span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>        <span class="hljs-type">System</span>.out.println(getResponse.getSourceAsString());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testGetBy() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">SearchRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">SearchRequest</span>(<span class="hljs-string">&quot;books&quot;</span>);<br>        <span class="hljs-type">SearchSourceBuilder</span> builder <span class="hljs-operator">=</span> new <span class="hljs-type">SearchSourceBuilder</span>();<br>        builder.query(<span class="hljs-type">QueryBuilders</span>.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;spring&quot;</span>));<br>        request.source(builder);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">SearchHit</span> hit : client.search(request, <span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>).getHits()) &#123;<br>            <span class="hljs-type">System</span>.out.println(hit.getSourceAsString());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="springboot-内置缓存"><a href="#springboot-内置缓存" class="headerlink" title="springboot 内置缓存"></a>springboot 内置缓存</h4><ul><li>spring-boot-starter-cache</li><li>@EnableCaching</li><li>设置操作的数据是否使用缓存@Cacheable(value=”cacheSpace”,key=”#id”) ，@CachePut 只放不取 ，@CacheEvict是用来标注在需要清除缓存元素的方法或类上的<h4 id="ehcache"><a href="#ehcache" class="headerlink" title="ehcache"></a>ehcache</h4></li><li>导入坐标  ehcache</li><li>yaml <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  cache:</span><br><span class="hljs-symbol">      type:</span> ehcache<br><span class="hljs-symbol">      ehcache:</span><br><span class="hljs-symbol">          config:</span> ehcache.xml<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\ehcache&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;smsCode&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h4><ul><li><p>导坐标 spring-boot-starter-data-redis</p></li><li><p>加配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">use-key-prefix:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">key-prefix:</span> <span class="hljs-string">sms_</span><br>      <span class="hljs-attr">cache-null-values:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">time-to-live:</span> <span class="hljs-string">10s</span><br></code></pre></td></tr></table></figure><h4 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h4><p>由于memcached未被springboot收录为缓存解决方案需要硬编码</p></li><li><p>导入坐标xmemcached（性能指标各方面最好的客户端）</p></li><li><p>配置memcached</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Configuration<br>public <span class="hljs-keyword">class</span> XMemcachedConfig &#123;<br>    @Autowired<br>    <span class="hljs-keyword">private</span> XMemcachedProperties props;<br>    @Bean<br>    public MemcachedClient get<span class="hljs-constructor">MemcachedClient()</span> throws IOException &#123;<br>        MemcachedClientBuilder memcachedClientBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XMemcachedClientBuilder(<span class="hljs-params">props</span>.<span class="hljs-params">getServers</span>()</span>);<br>        memcachedClientBuilder.set<span class="hljs-constructor">ConnectionPoolSize(<span class="hljs-params">props</span>.<span class="hljs-params">getPoolSize</span>()</span>);<br>        memcachedClientBuilder.set<span class="hljs-constructor">OpTimeout(<span class="hljs-params">props</span>.<span class="hljs-params">getOpTimeout</span>()</span>);<br>        MemcachedClient memcachedClient = memcachedClientBuilder.build<span class="hljs-literal">()</span>;<br>        return memcachedClient;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">memcached:</span><br>  <span class="hljs-attr">servers:</span> <span class="hljs-string">localhost:11211</span><br>  <span class="hljs-attr">poolSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">opTimeout:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@ConfigurationProperties</span>(prefix = <span class="hljs-string">&quot;memcached&quot;</span>)<br><span class="hljs-variable">@Data</span><br>public class XMemcachedProperties &#123;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">servers</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">poolSize</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">long</span> <span class="hljs-selector-tag">opTimeout</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注入MemcachedClient对象set get操作即可</p><h4 id="jetcache"><a href="#jetcache" class="headerlink" title="jetcache"></a>jetcache</h4></li><li><p>本地缓存（Local）</p><ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li><p>远程缓存（Remote）</p><ul><li>Redis</li><li>Tair<h5 id="纯远程方案"><a href="#纯远程方案" class="headerlink" title="纯远程方案"></a>纯远程方案</h5></li></ul></li><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alicp.jetcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jetcache:</span><br>  <span class="hljs-attr">remote:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">sms:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure></li></ul><p><em><strong>其中poolConfig是必配项，否则会报错</strong></em></p><ul><li>开启缓存@EnableCreateCacheAnnotation</li><li>创建缓存对象，put写缓存，get读缓存。<br>@CreateCache(name=”jetCache_”,expire = 10,timeUnit = TimeUnit.SECONDS)<br>private Cache&lt;String ,String&gt; jetCache;</li></ul><h5 id="纯本地方案"><a href="#纯本地方案" class="headerlink" title="纯本地方案"></a>纯本地方案</h5><p>和远程的区别</p><ul><li>yaml配置<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">jetcache:</span><br><span class="hljs-symbol">  local:</span><br><span class="hljs-symbol">    default:</span><br><span class="hljs-symbol">      type:</span> linkedhashmap<br><span class="hljs-symbol">      keyConvertor:</span> fastjson<br></code></pre></td></tr></table></figure></li><li>@CreateCache(name=”jetCache_”,expire = 1000,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.LOCAL) 指定为本地<h5 id="本地-远程方案"><a href="#本地-远程方案" class="headerlink" title="本地+远程方案"></a>本地+远程方案</h5>和远程的区别</li><li>yaml配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jetcache:</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">linkedhashmap</span><br>      <span class="hljs-attr">keyConvertor:</span> <span class="hljs-string">fastjson</span><br>  <span class="hljs-attr">remote:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">sms:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure></li><li>@CreateCache(name=”jetCache_”,expire = 1000,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.BOTH)</li><li>cacheType如果不进行配置，默认值是REMOTE</li></ul><h5 id="方法缓存"><a href="#方法缓存" class="headerlink" title="方法缓存"></a>方法缓存</h5><p>jetcache提供了方法缓存方案，只不过名称变更了而已。在对应的操作接口上方使用注解@Cached即可<br>需要保障进出redis的Object类型的数据必须实现序列化接口</p><ul><li>//jetcache启用缓存的主开关<br>@EnableCreateCacheAnnotation<br>//开启方法注解缓存<br>@EnableMethodCache(basePackages = “com.itheima”)</li><li>@Cached(name=”book_”,key=”#id”,expire = 3600,cacheType = CacheType.REMOTE)</li></ul><h5 id="远程方案的数据同步"><a href="#远程方案的数据同步" class="headerlink" title="远程方案的数据同步"></a>远程方案的数据同步</h5><p><strong>更新缓存</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">CacheUpdate(<span class="hljs-params">name</span>=<span class="hljs-string">&quot;book_&quot;</span>,<span class="hljs-params">key</span>=<span class="hljs-string">&quot;#book.id&quot;</span>,<span class="hljs-params">value</span>=<span class="hljs-string">&quot;#book&quot;</span>)</span><br>public boolean update(Book book) &#123;<br>    return bookDao.update<span class="hljs-constructor">ById(<span class="hljs-params">book</span>)</span> &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除缓存</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">@CacheInvalidate<span class="hljs-built_in">(name</span>=<span class="hljs-string">&quot;book_&quot;</span><span class="hljs-built_in">,key</span> = <span class="hljs-string">&quot;#id&quot;</span>)<br>public<span class="hljs-built_in"> boolean</span> <span class="hljs-keyword">delete</span>(Integer<span class="hljs-built_in"> id</span>) &#123;<br>    <span class="hljs-keyword">return</span> bookDao.deleteById<span class="hljs-built_in">(id</span>) &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定时刷新缓存</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Cached</span>(name=<span class="hljs-string">&quot;book_&quot;</span>,key=<span class="hljs-string">&quot;#id&quot;</span>,expire = <span class="hljs-number">3600</span>,cacheType = CacheType.REMOTE)<br><span class="hljs-variable">@CacheRefresh</span>(refresh = <span class="hljs-number">5</span>)<br>public Book getById(Integer id) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">bookDao</span><span class="hljs-selector-class">.selectById</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="j2cache"><a href="#j2cache" class="headerlink" title="j2cache"></a>j2cache</h4><ul><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.j2cache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>j2cache-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.4-release<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.j2cache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.0-release<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>j2cache的starter中默认包含了redis坐标，官方推荐使用redis作为二级缓存，因此此处无需导入redis坐标<br></code></pre></td></tr></table></figure></li><li><p>j2cache.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 1级缓存</span><br><span class="hljs-attr">j2cache.L1.provider_class</span> = ehcache<br><span class="hljs-attr">ehcache.configXml</span> = ehcache.xml<br><br><span class="hljs-comment"># 2级缓存</span><br><span class="hljs-attr">j2cache.L2.provider_class</span> = net.oschina.j2cache.cache.support.redis.SpringRedisProvider<br><span class="hljs-attr">j2cache.L2.config_section</span> = redis<br><span class="hljs-attr">redis.hosts</span> = localhost:<span class="hljs-number">6379</span><br><br><span class="hljs-comment"># 1级缓存中的数据如何到达二级缓存</span><br><span class="hljs-attr">j2cache.broadcast</span> = net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy<br></code></pre></td></tr></table></figure></li><li><p>使用缓存CacheChannel set get 方法</p></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><ul><li>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于<strong>发送</strong>电子邮件的传输协议</li><li>POP3（Post Office Protocol - Version 3）：用于<strong>接收</strong>电子邮件的标准协议</li><li>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</li></ul><p>简单说就是SMPT是发邮件的标准，POP3是收邮件的标准，IMAP是对POP3的升级。</p><h4 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h4><ul><li>导入spring-boot-starter-mail</li><li>配置邮箱登录信息<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  mail:</span><br><span class="hljs-symbol">    host:</span> smtp<span class="hljs-number">.126</span>.com<br><span class="hljs-symbol">    username:</span> test@<span class="hljs-number">126.</span>com<br><span class="hljs-symbol">    password:</span> test<br></code></pre></td></tr></table></figure></li><li>使用JavaMailSender 发送邮件<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SimpleMailMessage message = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleMailMessage()</span>;<br>        message.set<span class="hljs-constructor">From(<span class="hljs-params">from</span>+<span class="hljs-string">&quot;(小甜甜)&quot;</span>)</span>;<span class="hljs-comment">//发送人</span><br>        message.set<span class="hljs-constructor">To(<span class="hljs-params">to</span>)</span>;<span class="hljs-comment">//接收人</span><br>        message.set<span class="hljs-constructor">Subject(<span class="hljs-params">subject</span>)</span>;<span class="hljs-comment">//标题</span><br>        message.set<span class="hljs-constructor">Text(<span class="hljs-params">context</span>)</span>;<span class="hljs-comment">//正文</span><br>        javaMailSender.send(message);<br></code></pre></td></tr></table></figure><h4 id="发送多组件邮件（附件、复杂正文）"><a href="#发送多组件邮件（附件、复杂正文）" class="headerlink" title="发送多组件邮件（附件、复杂正文）"></a>发送多组件邮件（附件、复杂正文）</h4>使用MimeMessage可以发送特殊的邮件<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">MimeMessage message = javaMailSender.create<span class="hljs-constructor">MimeMessage()</span>;<br>MimeMessageHelper helper = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimeMessageHelper(<span class="hljs-params">message</span>,<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">//此处设置支持附件</span><br>helper.set<span class="hljs-constructor">From(<span class="hljs-params">to</span>+<span class="hljs-string">&quot;(小甜甜)&quot;</span>)</span>;<br>helper.set<span class="hljs-constructor">To(<span class="hljs-params">from</span>)</span>;<br>helper.set<span class="hljs-constructor">Subject(<span class="hljs-params">subject</span>)</span>;<br>helper.set<span class="hljs-constructor">Text(<span class="hljs-params">context</span>,<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">//此处设置正文支持html解析</span><br> <span class="hljs-comment">//添加附件</span><br> File f1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-string">&quot;springboot_23_mail-0.0.1-SNAPSHOT.jar&quot;</span>)</span>;<br> File f2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-string">&quot;resources\\logo.png&quot;</span>)</span>;<br><br> helper.add<span class="hljs-constructor">Attachment(<span class="hljs-params">f1</span>.<span class="hljs-params">getName</span>()</span>,f1);<br> helper.add<span class="hljs-constructor">Attachment(<span class="hljs-string">&quot;最靠谱的培训结构.png&quot;</span>,<span class="hljs-params">f2</span>)</span>;<br>javaMailSender.send(message);<br></code></pre></td></tr></table></figure></li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><h4 id="SpringBoot整合ActiveMQ-严格满足JMS规范"><a href="#SpringBoot整合ActiveMQ-严格满足JMS规范" class="headerlink" title="SpringBoot整合ActiveMQ(严格满足JMS规范)"></a>SpringBoot整合ActiveMQ(严格满足JMS规范)</h4><p>目前仅在一些线上运行的产品中出现，新产品开发较少采用。</p><ul><li>导入spring-boot-starter-activemq</li><li>配置地址 <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  activemq:</span><br>    broker-url: tcp:<span class="hljs-comment">//localhost:61616</span><br></code></pre></td></tr></table></figure></li><li>使用JmsMessagingTemplate操作ActiveMQ<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceActivemqImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JmsMessagingTemplate messagingTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列，id：&quot;</span>+id);<br>        messagingTemplate.convertAndSend(<span class="hljs-string">&quot;order.queue.id&quot;</span>,id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">doMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> id = messagingTemplate.receiveAndConvert(<span class="hljs-string">&quot;order.queue.id&quot;</span>,<span class="hljs-built_in">String</span>.class);<br>        System.out.println(<span class="hljs-string">&quot;已完成短信发送业务，id：&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用监听器，当队列有消息时，立即消费<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageListener</span> </span>&#123;<br>    <span class="hljs-meta">@JmsListener(destination = <span class="hljs-meta-string">&quot;order.queue.id&quot;</span>)</span><br>    <span class="hljs-meta">@SendTo(<span class="hljs-meta-string">&quot;order.other.queue.id&quot;</span>)</span><span class="hljs-comment">//SendTo消费完成转发给下一个消息处理器</span><br>    <span class="hljs-keyword">public</span> String receive(String id)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;已完成短信发送业务，id：&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;new:&quot;</span>+id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>切换消息模型由点对点模型到发布订阅模型，修改jms配置即可<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">activemq:</span><br>    <span class="hljs-attr">broker-url:</span> <span class="hljs-string">tcp://localhost:61616</span><br>  <span class="hljs-attr">jms:</span><br>    <span class="hljs-attr">pub-sub-domain:</span> <span class="hljs-literal">true</span>    <span class="hljs-string">pub-sub-domain默认值为false，即点对点模型</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h4><p>RabbitMQ是MQ产品中的目前较为流行的产品之一，它遵从AMQP协议</p><h5 id="整合-direct模型"><a href="#整合-direct模型" class="headerlink" title="整合(direct模型)"></a>整合(direct模型)</h5><ul><li><p>导入spring-boot-starter-amqp</p></li><li><p>配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br></code></pre></td></tr></table></figure></li><li><p>初始化RabbitMQ相关对象</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitConfigDirect</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">directQueue</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;direct_queue&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">directQueue2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;direct_queue2&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-function"><span class="hljs-title">directExchange</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DirectExchange(<span class="hljs-string">&quot;directExchange&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingDirect</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class="hljs-string">&quot;direct&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingDirect2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class="hljs-string">&quot;direct2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>使用AmqpTemplate操作RabbitMQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceRabbitmqDirectImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AmqpTemplate amqpTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列（rabbitmq direct），id：&quot;</span>+id);<br>        amqpTemplate.convertAndSend(<span class="hljs-string">&quot;directExchange&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>,id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>监听器监听消息，消费消息</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageListener</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">&quot;direct_queue&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">receive</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;已完成短信发送业务(rabbitmq direct)，id：&quot;</span>+id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="整合-topic模型"><a href="#整合-topic模型" class="headerlink" title="整合(topic模型)"></a>整合(topic模型)</h5><ul><li>初始化RabbitMQ相关对象</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitConfigTopic</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">topicQueue</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;topic_queue&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">topicQueue2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;topic_queue2&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-function"><span class="hljs-title">topicExchange</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(<span class="hljs-string">&quot;topicExchange&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingTopic</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="hljs-string">&quot;topic.*.id&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingTopic2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="hljs-string">&quot;topic.orders.*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>匹配键</strong></th><th>topic.*.*</th><th><strong>topic.#</strong></th></tr></thead><tbody><tr><td>topic.order.id</td><td>true</td><td>true</td></tr><tr><td>order.topic.id</td><td>false</td><td>false</td></tr><tr><td>topic.sm.order.id</td><td>false</td><td>true</td></tr><tr><td>topic.sm.id</td><td>false</td><td>true</td></tr><tr><td>topic.id.order</td><td>true</td><td>true</td></tr><tr><td>topic.id</td><td>false</td><td>true</td></tr><tr><td>topic.order</td><td>false</td><td>true</td></tr></tbody></table><h4 id="SpringBoot整合RocketMQ"><a href="#SpringBoot整合RocketMQ" class="headerlink" title="SpringBoot整合RocketMQ"></a>SpringBoot整合RocketMQ</h4><p>阿里研发捐赠给Apache基金会，它遵从AMQP协议。</p><h5 id="整合（异步消息）"><a href="#整合（异步消息）" class="headerlink" title="整合（异步消息）"></a>整合（异步消息）</h5><ul><li>导入rocketmq-spring-boot-starter springboot不维护</li><li>配置yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rocketmq:</span><br>  <span class="hljs-attr">name-server:</span> <span class="hljs-string">localhost:9876</span><br>  <span class="hljs-attr">producer:</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">group_rocketmq</span><br></code></pre></td></tr></table></figure><ul><li>使用RocketMQTemplate操作RocketMQ</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceRocketmqImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RocketMQTemplate rocketMQTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列（rocketmq），id：&quot;</span>+id);<br>        SendCallback callback = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">SendCallback</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onSuccess</span>(<span class="hljs-params">SendResult sendResult</span>)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onException</span>(<span class="hljs-params">Throwable e</span>)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送失败！！！！！&quot;</span>);<br>            &#125;<br>        &#125;;<br>        rocketMQTemplate.asyncSend(<span class="hljs-string">&quot;order_id&quot;</span>,id,callback);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>@RocketMQMessageListener监听消息  实现RocketMQListener接口 ，需要设置消息队列和组<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@RocketMQMessageListener</span>(topic = <span class="hljs-string">&quot;order_id&quot;</span>,consumerGroup = <span class="hljs-string">&quot;group_rocketmq&quot;</span>)<br>public class MessageListener implements RocketMQListener&lt;String&gt; &#123;<br>    <span class="hljs-variable">@Override</span><br>    public void onMessage(String id) &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;已完成短信发送业务(rocketmq)，id：&quot;</span>+id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="SpringBoot整合Kafka"><a href="#SpringBoot整合Kafka" class="headerlink" title="SpringBoot整合Kafka"></a>SpringBoot整合Kafka</h4><ul><li>导入spring-kafka</li><li>配置Kafka的服务器地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">localhost:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">order</span><br></code></pre></td></tr></table></figure><ul><li>使用KafkaTemplate操作Kafka<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceKafkaImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列（kafka），id：&quot;</span>+id);<br>        kafkaTemplate.send(<span class="hljs-string">&quot;itheima2022&quot;</span>,id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>设置监听器@KafkaListener 配上队列名称，获取数据从ConsumerRecord对象中获取即可。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageListener</span> </span>&#123;<br>    <span class="hljs-meta">@KafkaListener</span>(topics = <span class="hljs-string">&quot;itheima2022&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onMessage</span>(<span class="hljs-params">ConsumerRecord&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; record</span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;已完成短信发送业务(kafka)，id：&quot;</span>+record.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><strong>服务端开发</strong></p><ul><li>导入坐标<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>yaml 可以配置一个client访问的端口</li><li>引导类上加@EnableAdminServer</li></ul><p><strong>客户端开发</strong></p><ul><li>导入坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>允许服务器使用HTTP访问的配置</li></ul><p>整体上来说，对于端点的配置有两组信息，一组是endpoints开头的，对所有端点进行配置，一组是endpoint开头的，对具体端点进行配置。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  boot:</span><br><span class="hljs-symbol">    admin:</span><br><span class="hljs-symbol">      client:</span><br><span class="hljs-symbol">        url:</span> http:<span class="hljs-comment">//localhost:8080</span><br><span class="hljs-symbol">management:</span><br><span class="hljs-symbol">  endpoint:</span><br><span class="hljs-symbol">    health:</span><br>      show-details: always<br><span class="hljs-symbol">  endpoints:</span><br><span class="hljs-symbol">    web:</span><br><span class="hljs-symbol">      exposure:</span><br><span class="hljs-symbol">        include:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><h3 id="自定义监控指标"><a href="#自定义监控指标" class="headerlink" title="自定义监控指标"></a>自定义监控指标</h3><p><strong>INFO端点</strong></p><p>info端点描述了当前应用的基本信息，可以通过两种形式快速配置info端点的信息</p><ul><li><p>配置形式</p><p>在yml文件中通过设置info节点的信息就可以快速配置端点信息</p></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">info:</span><br><span class="hljs-symbol">  appName:</span> @project.artifactId@<br><span class="hljs-symbol">  version:</span> @project.version@<br><span class="hljs-symbol">  company:</span> 传智教育<br><span class="hljs-symbol">  author:</span> itheima<br></code></pre></td></tr></table></figure><ul><li><p>编程形式</p><p>通过配置的形式只能添加固定的数据，如果需要动态数据还可以通过配置bean的方式为info端点添加信息，此信息与配置信息共存</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfoConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InfoContributor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contribute</span><span class="hljs-params">(Info.Builder builder)</span> </span>&#123;<br>        builder.withDetail(<span class="hljs-string">&quot;runTime&quot;</span>,System.currentTimeMillis());<span class="hljs-comment">//添加单个信息</span><br>        Map infoMap = <span class="hljs-keyword">new</span> HashMap();<br>        infoMap.put(<span class="hljs-string">&quot;buildTime&quot;</span>,<span class="hljs-string">&quot;2006&quot;</span>);<br>        builder.withDetails(infoMap);<span class="hljs-comment">//添加一组信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Health端点</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Component</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HealthConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHealthIndicator</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doHealthCheck(<span class="hljs-type">Health</span>.<span class="hljs-type">Builder</span> builder) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        boolean condition = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            builder.status(<span class="hljs-type">Status</span>.<span class="hljs-type">UP</span>);<span class="hljs-comment">//设置运行状态为启动状态</span><br>            builder.withDetail(<span class="hljs-string">&quot;runTime&quot;</span>, <span class="hljs-type">System</span>.currentTimeMillis());<br>            <span class="hljs-type">Map</span> infoMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>            infoMap.put(<span class="hljs-string">&quot;buildTime&quot;</span>, <span class="hljs-string">&quot;2006&quot;</span>);<br>            builder.withDetails(infoMap);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            builder.status(<span class="hljs-type">Status</span>.<span class="hljs-type">OUT_OF_SERVICE</span>);<span class="hljs-comment">//设置运行状态为不在服务状态</span><br>            builder.withDetail(<span class="hljs-string">&quot;上线了吗？&quot;</span>,<span class="hljs-string">&quot;你做梦&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当任意一个组件状态不为UP时，整体应用对外服务状态为非UP状态。</p><p><strong>Metrics端点</strong></p><p>metrics端点描述了性能指标，除了系统自带的监控性能指标，还可以自定义性能指标。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Service</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl&lt;BookDao</span>, <span class="hljs-title">Book&gt;</span> <span class="hljs-title">implements</span> <span class="hljs-title">IBookService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> bookDao;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Counter</span> counter;<br><br>    public <span class="hljs-type">BookServiceImpl</span>(<span class="hljs-type">MeterRegistry</span> meterRegistry)&#123;<br>        counter = meterRegistry.counter(<span class="hljs-string">&quot;用户付费操作次数：&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    public boolean delete(<span class="hljs-type">Integer</span> id) &#123;<br>        <span class="hljs-comment">//每次执行删除业务等同于执行了付费业务</span><br>        counter.increment();<br>        <span class="hljs-keyword">return</span> bookDao.deleteById(id) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义端点</strong><br>可以根据业务需要自定义端点，方便业务监控</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint</span>(id=<span class="hljs-string">&quot;pay&quot;</span>,enableByDefault = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayEndpoint</span> </span>&#123;<br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">getPay</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">Map</span> payMap = <span class="hljs-keyword">new</span> HashMap();<br>        payMap.put(<span class="hljs-string">&quot;level 1&quot;</span>,<span class="hljs-string">&quot;300&quot;</span>);<br>        payMap.put(<span class="hljs-string">&quot;level 2&quot;</span>,<span class="hljs-string">&quot;291&quot;</span>);<br>        payMap.put(<span class="hljs-string">&quot;level 3&quot;</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>        <span class="hljs-keyword">return</span> payMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nettyAccept</title>
    <link href="/2022/01/24/nettyAccept/"/>
    <url>/2022/01/24/nettyAccept/</url>
    
    <content type="html"><![CDATA[<h1 id="netty-启动接受新连接"><a href="#netty-启动接受新连接" class="headerlink" title="netty 启动接受新连接"></a>netty 启动接受新连接</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>selector.select()阻塞直到有事件发生</li><li>遍历处理selectedKeys</li><li>判断事件类型是否是accept</li><li>创建SocketChannel,设置为非阻塞</li><li>将SocketChannel注册到selector上</li><li>关注read事件</li></ul><p>##每一步对应的代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp">判断事件类型是否是accept<br>NioEventLoop 里<span class="hljs-function">processSelectedKey</span><br><span class="hljs-function"><span class="hljs-title">if</span> (<span class="hljs-params">(readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT</span>)) !</span>= <span class="hljs-number">0</span> || readyOps == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">unsafe</span>.read();<br> &#125;<br><span class="hljs-keyword">unsafe</span>类型 AbstractNioMessageChannel<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">创建SocketChannel,设置为非阻塞<br>NioMessageUnsafe read() <br>NioServerSocketChannel doReadMessages<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doReadMessages</span><span class="hljs-params">(List&lt;Object&gt; buf)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>     SocketChannel ch = SocketUtils.accept(javaChannel());<br><br>     <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">if</span> (ch != <span class="hljs-keyword">null</span>) &#123;<br>             buf.add(<span class="hljs-keyword">new</span> NioSocketChannel(<span class="hljs-keyword">this</span>, ch));<br>             <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>         &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>         logger.warn(<span class="hljs-string">&quot;Failed to create a new channel from an accepted socket.&quot;</span>, t);<br><br>         <span class="hljs-keyword">try</span> &#123;<br>             ch.close();<br>         &#125; <span class="hljs-keyword">catch</span> (Throwable t2) &#123;<br>             logger.warn(<span class="hljs-string">&quot;Failed to close a socket.&quot;</span>, t2);<br>         &#125;<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">将SocketChannel注册到selector上<br>pipeline.fire<span class="hljs-constructor">ChannelRead(<span class="hljs-params">readBuf</span>.<span class="hljs-params">get</span>(<span class="hljs-params">i</span>)</span>);<br>NioServerSocketChannel的pipeline流水线操作，实际处理是由ServerBootstrapAcceptor 的channelRead<br>        public void channel<span class="hljs-constructor">Read(ChannelHandlerContext <span class="hljs-params">ctx</span>, Object <span class="hljs-params">msg</span>)</span> &#123;<br>            final Channel child = (Channel) msg;<br><br>            child.pipeline<span class="hljs-literal">()</span>.add<span class="hljs-constructor">Last(<span class="hljs-params">childHandler</span>)</span>;<br><br>            set<span class="hljs-constructor">ChannelOptions(<span class="hljs-params">child</span>, <span class="hljs-params">childOptions</span>, <span class="hljs-params">logger</span>)</span>;<br><br>            <span class="hljs-keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>                child.attr((AttributeKey&lt;Object&gt;) e.get<span class="hljs-constructor">Key()</span>).set(e.get<span class="hljs-constructor">Value()</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                childGroup.register(child).add<span class="hljs-constructor">Listener(<span class="hljs-params">new</span> ChannelFutureListener()</span> &#123;<br>                    @Override<br>                    public void operation<span class="hljs-constructor">Complete(ChannelFuture <span class="hljs-params">future</span>)</span> throws Exception &#123;<br>                        <span class="hljs-keyword">if</span> (!future.is<span class="hljs-constructor">Success()</span>) &#123;<br>                            force<span class="hljs-constructor">Close(<span class="hljs-params">child</span>, <span class="hljs-params">future</span>.<span class="hljs-params">cause</span>()</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>            &#125; catch (Throwable t) &#123;<br>                force<span class="hljs-constructor">Close(<span class="hljs-params">child</span>, <span class="hljs-params">t</span>)</span>;<br>            &#125;<br>        &#125;<br>        <br><br>        register方法里线程切换<br>            <span class="hljs-keyword">if</span> (eventLoop.<span class="hljs-keyword">in</span><span class="hljs-constructor">EventLoop()</span>) &#123;<br>                register0(promise);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    eventLoop.execute(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Runnable()</span> &#123;<br>                        @Override<br>                        public void run<span class="hljs-literal">()</span> &#123;<br>                            register0(promise);<br>                        &#125;<br>                    &#125;);<br>                &#125; catch (Throwable t) &#123;<br>                    logger.warn(<br>                            <span class="hljs-string">&quot;Force-closing a channel whose registration task was not accepted by an event loop: &#123;&#125;&quot;</span>,<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractChannel</span>.</span></span>this, t);<br>                    close<span class="hljs-constructor">Forcibly()</span>;<br>                    closeFuture.set<span class="hljs-constructor">Closed()</span>;<br>                    safe<span class="hljs-constructor">SetFailure(<span class="hljs-params">promise</span>, <span class="hljs-params">t</span>)</span>;<br>                &#125;<br>            &#125;<br><br>            register0里<span class="hljs-keyword">do</span><span class="hljs-constructor">Register()</span>; 完成NioSocketChannel注册到seletor上，无关注事件<br>            pipeline.invoke<span class="hljs-constructor">HandlerAddedIfNeeded()</span>; 构建NioSocketChannel的pipeline<br>            将hangler添加到pipeline<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">关注read事件  层层调用最后 在AbstractNioChannel类<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> doBeginRead() throws Exception &#123;<br>        <span class="hljs-comment">// Channel.read() or ChannelHandlerContext.read() was called</span><br>        <span class="hljs-keyword">final</span> SelectionKey selectionKey = <span class="hljs-keyword">this</span>.selectionKey;<br>        <span class="hljs-keyword">if</span> (!selectionKey.isValid()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        readPending = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> <span class="hljs-built_in">int</span>erestOps = selectionKey.<span class="hljs-built_in">int</span>erestOps();<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>erestOps &amp; readInterestOp) == <span class="hljs-number">0</span>) &#123;<br>            selectionKey.<span class="hljs-built_in">int</span>erestOps(<span class="hljs-built_in">int</span>erestOps | readInterestOp);<br>        &#125;<br>    &#125;<br><br>    其中readInterestOp 是在构建NioSocketChannel时设置的OP_READ<br>    <span class="hljs-keyword">protected</span> AbstractNioByteChannel(Channel parent, SelectableChannel ch) &#123;<br>            <span class="hljs-keyword">super</span>(parent, ch, SelectionKey.OP_READ);<br>    &#125;   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nettyBoot</title>
    <link href="/2022/01/11/nettyBoot/"/>
    <url>/2022/01/11/nettyBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="netty-启动流程"><a href="#netty-启动流程" class="headerlink" title="netty 启动流程"></a>netty 启动流程</h1><p>对比分析一下 </p><h2 id="nio启动步骤"><a href="#nio启动步骤" class="headerlink" title="nio启动步骤"></a>nio启动步骤</h2><ul><li>Selector selector = Selector.open();</li><li>ServerSocketChannel ssc = ServerSocketChannel.open();</li><li>SelectionKey selectionKey = ssc.register(selector,0,nettySsc);</li><li>ssc.bind(new InetSocketAddress(8080,backlog));</li><li>selectionKey.interestOps(SelectionKey.OP_ACCEPT);</li></ul><h2 id="netty启动步骤"><a href="#netty启动步骤" class="headerlink" title="netty启动步骤"></a>netty启动步骤</h2><ul><li>init<ul><li>创建niossc main</li><li>添加初始化handler main<ul><li>初始化hander被调用 (向niossc 添加acceptorHandler)nio-thread</li></ul></li></ul></li><li>register<ul><li>原生ssc注册到seletor 未关注事件 nio-thread</li><li>执行niossc初始化handler nio-thread</li></ul></li><li>bind<ul><li>原生ssc绑定端口 nio-thread</li><li>fire niossc active事件（设置了关注事件)</li></ul></li></ul><h3 id="细节分析"><a href="#细节分析" class="headerlink" title="细节分析"></a>细节分析</h3><p> 1.初始化handler什么时候被调用?<br> <figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">AbstractChannel类中register0方法里<br>pipeline.invokeHandlerAddedIfNeeded()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><br> niossc初始化handler只会执行一次，执行完自动删除<br> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">执行一次<br>DefaultChannelPipeline类中方法<br>final void invoke<span class="hljs-constructor">HandlerAddedIfNeeded()</span> &#123;<br>        <span class="hljs-keyword">assert</span> channel.event<span class="hljs-constructor">Loop()</span>.<span class="hljs-keyword">in</span><span class="hljs-constructor">EventLoop()</span>;<br>        <span class="hljs-keyword">if</span> (firstRegistration) &#123;<br>            firstRegistration = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// We are now registered to the EventLoop. It&#x27;s time to call the callbacks for the ChannelHandlers,</span><br>            <span class="hljs-comment">// that were added before the registration was done.</span><br>            call<span class="hljs-constructor">HandlerAddedForAllHandlers()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">自动删除<br>ChannelInitializer类中方法<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handlerAdded</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (ctx.channel().isRegistered()) &#123;<br>            initChannel(ctx);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (initMap.putIfAbsent(ctx, Boolean.TRUE) == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Guard against re-entrance.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                initChannel((C) ctx.channel());<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable cause) &#123;<br>                <span class="hljs-comment">// Explicitly call exceptionCaught(...) as we removed the handler before calling initChannel(...).</span><br>                <span class="hljs-comment">// We do so to prevent multiple calls to initChannel(...).</span><br>                exceptionCaught(ctx, cause);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                remove(ctx);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>ServerBootStrap 中init 里的<br>p.addLast(<span class="hljs-keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Channel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-keyword">final</span> ChannelPipeline pipeline = ch.pipeline();<br>                ChannelHandler <span class="hljs-keyword">handler</span> = config.<span class="hljs-keyword">handler</span>();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">handler</span> != <span class="hljs-keyword">null</span>) &#123;<br>                    pipeline.addLast(<span class="hljs-keyword">handler</span>);<br>                &#125;<br><br>                ch.eventLoop().execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                        pipeline.addLast(<span class="hljs-keyword">new</span> ServerBootstrapAcceptor(<br>                                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;);<br><br>ServerSocketChannel的pipeline里的<span class="hljs-keyword">handler</span><br>Head-&gt;ServerBootstrapAcceptor-&gt;Tail<br></code></pre></td></tr></table></figure><p>2 创建NioServerSocketChannel</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">通过反射调用NioServerSocketChannel构造方法<br>public T <span class="hljs-keyword">new</span><span class="hljs-constructor">Channel()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        return clazz.get<span class="hljs-constructor">Constructor()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>    &#125; catch (Throwable t) &#123;<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ChannelException(<span class="hljs-string">&quot;Unable to create Channel from class &quot;</span> + <span class="hljs-params">clazz</span>, <span class="hljs-params">t</span>)</span>;<br>    &#125;<br>&#125;<br>最终和Nio创建 ServerSocketChannel ssc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServerSocketChannel</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-literal">()</span>;<br>调用的同一个类SelectorProviderImpl里的方法<br>public ServerSocketChannel <span class="hljs-keyword">open</span><span class="hljs-constructor">ServerSocketChannel()</span> throws IOException &#123;<br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerSocketChannelImpl(<span class="hljs-params">this</span>)</span>;<br>&#125;<br><br>为channel构建一个包含head 和 tail 的 pipeline<br>protected <span class="hljs-constructor">AbstractChannel(Channel <span class="hljs-params">parent</span>)</span> &#123;<br>        this.parent = parent;<br>        id = <span class="hljs-keyword">new</span><span class="hljs-constructor">Id()</span>;<br>        unsafe = <span class="hljs-keyword">new</span><span class="hljs-constructor">Unsafe()</span>;<br>        pipeline = <span class="hljs-keyword">new</span><span class="hljs-constructor">ChannelPipeline()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.bind什么时候调用？</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">异步调用，<br>  final ChannelFuture regFuture = init<span class="hljs-constructor">AndRegister()</span>;<br>  regFuture.add<span class="hljs-constructor">Listener(<span class="hljs-params">new</span> ChannelFutureListener()</span> &#123;<br>                @Override<br>                public void operation<span class="hljs-constructor">Complete(ChannelFuture <span class="hljs-params">future</span>)</span> throws Exception &#123;<br>                    Throwable cause = future.cause<span class="hljs-literal">()</span>;<br>                    <span class="hljs-keyword">if</span> (cause != null) &#123;<br>                        promise.set<span class="hljs-constructor">Failure(<span class="hljs-params">cause</span>)</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        promise.registered<span class="hljs-literal">()</span>;<br>                        <span class="hljs-keyword">do</span><span class="hljs-constructor">Bind0(<span class="hljs-params">regFuture</span>, <span class="hljs-params">channel</span>, <span class="hljs-params">localAddress</span>, <span class="hljs-params">promise</span>)</span>;<br>                    &#125;<br>                &#125;<br>            &#125;);<br>  abstractChannel类里的register0方法<br>  safe<span class="hljs-constructor">SetSuccess(<span class="hljs-params">promise</span>)</span>;<br></code></pre></td></tr></table></figure><p>4.哪里设置了OP_ACCEPT事件</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">AbstractNioChannel类<br> @Override<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> doBeginRead() throws Exception &#123;<br>        <span class="hljs-comment">// Channel.read() or ChannelHandlerContext.read() was called</span><br>        <span class="hljs-keyword">final</span> SelectionKey selectionKey = <span class="hljs-keyword">this</span>.selectionKey;<br>        <span class="hljs-keyword">if</span> (!selectionKey.isValid()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        readPending = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> <span class="hljs-built_in">int</span>erestOps = selectionKey.<span class="hljs-built_in">int</span>erestOps();<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>erestOps &amp; readInterestOp) == <span class="hljs-number">0</span>) &#123;<br>            selectionKey.<span class="hljs-built_in">int</span>erestOps(<span class="hljs-built_in">int</span>erestOps | readInterestOp);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NIO</title>
    <link href="/2021/12/13/nio/"/>
    <url>/2021/12/13/nio/</url>
    
    <content type="html"><![CDATA[<h2 id="NIO简介"><a href="#NIO简介" class="headerlink" title="NIO简介"></a>NIO简介</h2><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>Channel 双向数据通道，可以向通道中读写</p><ul><li>FileChannel  -&gt; 文件传输</li><li>DatagramChannel -&gt; UDP</li><li>ServerSocketChannel -&gt;TCP 只用于服务器</li><li>SocketChannel -&gt;TCP   服务器客户端都用到</li></ul><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer 数据暂存缓冲区<br>怎么知道是读模式还是写模式呢?<br>无论哪种模式position=limit 进行读写会异常，所有读之前必须flip() ,读完再写入必须clear()</p><ul><li>Capacity </li><li>Position </li><li>Limit </li><li>Mark </li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>Flip() limit=position position=0<br>Clear() limit=capacity position=0<br>Compact() position = 剩余未读的数据 limit=capacity 未读字节从0开始，原来位置上的数据保持不动</p><ul><li>1 2 3 4</li><li>1 2 已读 </li><li>3 4 3 4 position=2  从第二个3开始写</li></ul><h4 id="读方法-rewind-mark-and-reset"><a href="#读方法-rewind-mark-and-reset" class="headerlink" title="读方法 rewind()     mark() and reset()"></a>读方法 rewind()     mark() and reset()</h4><p>Rewind()  position=0<br>Mark() mark =position标记当前位置<br>Reset() position=mark 从mark开始读</p><h4 id="字符串和ByteBuffer转换-三种方式"><a href="#字符串和ByteBuffer转换-三种方式" class="headerlink" title="字符串和ByteBuffer转换 三种方式"></a>字符串和ByteBuffer转换 三种方式</h4><ul><li>直接放入byte数组   </li><li>StandardCharsets.encode()   -&gt;自动调用flip()切换到读模式</li><li>ByteBuffer.Wrap()                -&gt;自动调用flip()切换到读模式<div class="code-wrapper"><pre><code class="hljs">  ByteBuffer byteBuffer1 = ByteBuffer.allocate(16);  byte[] bytes = &quot;hello&quot;.getBytes();  byteBuffer1.put(bytes);  byteBuffer1.flip();  System.out.println(new String(byteBuffer1.array(), byteBuffer1.position(), byteBuffer1.limit(), &quot;utf-8&quot;));  ByteBuffer byteBuffer2 = StandardCharsets.UTF_8.encode(&quot;hello&quot;);  System.out.println(StandardCharsets.UTF_8.decode(byteBuffer2).toString());  ByteBuffer byteBuffer3 = ByteBuffer.wrap(&quot;hello&quot;.getBytes());  System.out.println(StandardCharsets.UTF_8.decode(byteBuffer3).toString());</code></pre></div></li></ul><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><h4 id="单线程模式"><a href="#单线程模式" class="headerlink" title="单线程模式"></a>单线程模式</h4><ul><li>阻塞模式下阻塞方法之间相互影响，不能正常处理多个连接</li><li>非阻塞模式下cpu占用高空轮询</li></ul><h4 id="多线程版本的通讯"><a href="#多线程版本的通讯" class="headerlink" title="多线程版本的通讯"></a>多线程版本的通讯</h4><p>每个socket有单独的线程提供服务</p><ul><li>内存占用高，一个线程默认占用1m内存</li><li>线程上下文切换(线程不为你服务时需要暂存信息，到你了恢复信息)</li><li>只适用于连接数据较少的情况</li></ul><h4 id="线程池版本"><a href="#线程池版本" class="headerlink" title="线程池版本"></a>线程池版本</h4><ul><li>阻塞模式下，一个线程仅仅只是处理一个连接</li><li>仅仅适合短连接场景</li></ul><h4 id="Selector-版本-多路复用模式"><a href="#Selector-版本-多路复用模式" class="headerlink" title="Selector 版本(多路复用模式)"></a>Selector 版本(多路复用模式)</h4><p>Selector 配合一个线程管理多个channel 过去channel上的事件，这些channel工作在非阻塞模式下，不会一直占用<br>线程</p><p>Accept -服务端有连接请求时触发<br>Connect - 客户端连接建立后触发的<br>Read -可读<br>Write-可写</p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>零拷贝指的是数据无需拷贝到 JVM 内存（用户缓冲区如byte[] ByteBuffer）中，同时具有以下三个优点</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算</li><li>零拷贝适合小文件传输</li></ul><p>1.Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 Java 程序的用户态切换至内核态，去调用操作系统（Kernel）的读能力，将数据读入内核缓冲区。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 CPU</p><p>2.从内核态切换回用户态，将数据从内核缓冲区读入用户缓冲区（即 byte[] buf），这期间 CPU 会参与拷贝，无法利用 DMA</p><p>3.调用 write 方法，这时将数据从用户缓冲区（byte[] buf）写入 socket 缓冲区，CPU 会参与拷贝</p><p>4.接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从用户态切换至内核态，调用操作系统的写能力，使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 CPU</p><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><p>用户态与内核态的切换发生了 3 次，这个操作比较重量级<br>数据拷贝了共 4 次</p><h4 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h4><p>通过 DirectByteBuf<br>减少了一次数据拷贝，用户态与内核态的切换次数没有减少<br>进一步优化1<br>以下两种方式都是零拷贝，即无需将数据拷贝到用户缓冲区中（JVM内存中）</p><p>底层采用了 linux 2.1 后提供的 sendFile 方法，Java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据</p><p>Java 调用 transferTo 方法后，要从 Java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不会使用 CPU</p><p>数据从内核缓冲区传输到 socket 缓冲区，CPU 会参与拷贝</p><p>最后使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 CPU</p><p>这种方法下只发生了1次用户态与内核态的切换<br>数据拷贝了 3 次</p><h4 id="进一步优化2"><a href="#进一步优化2" class="headerlink" title="进一步优化2"></a>进一步优化2</h4><p>linux 2.4 对上述方法再次进行了优化</p><p>Java 调用 transferTo 方法后，要从 Java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不会使用 CPU</p><p>只会将一些 offset 和 length 信息拷入 socket 缓冲区，几乎无消耗</p><p>使用 DMA 将 内核缓冲区的数据写入网卡，不会使用 CPU</p><p>整个过程仅只发生了1次用户态与内核态的切换，数据拷贝了 2 次</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建教程</title>
    <link href="/2021/10/28/hexo/"/>
    <url>/2021/10/28/hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是搭建博客的框架</p><ol><li><p>安装Git</p></li><li><p>安装nodejs</p></li><li><p>安装hexo</p><p> 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹hexo(随意命名)，在这个文件夹下直接shift+右键打开powershell</p><p> 输入命令</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli<br>hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span>hexo s <br></code></pre></td></tr></table></figure><p> hexo s 也就是hexo server 代表打开了本地服务在浏览器输入localhost:4000就可以看到你生成的博客了  </p> <img src="/2021/10/28/hexo/zkx.png" class="">  </li><li><p>GitHub创建个人仓库</p><p> 例如用户名是zhangsan 仓库名就是 zhangsan.github.io</p></li><li><p>部署到github  </p><ul><li><p>生成token后续使用(使用用户名密码方式已经被官方删除了，现在只能使用token)<br>  a. 找到自己的repo<br>  b. 找到Settings<br>  c. 找到Developer settings<br>  d. 找到Personal access tokens  新建生成</p></li><li><p>打开hexo目录下的_config.yml<br>deploy:<br>  type: git    注意每个冒号后面都有空格<br>  repo: https: <a href="mailto:&#x74;&#111;&#107;&#x65;&#x6e;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#x74;&#111;&#107;&#x65;&#x6e;&#x40;&#103;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a>/用户名/用户名.github.io.git<br>  branch: master  </p></li><li><p>安装部署工具 hexo-deploy-git    </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>可以写文章了,新建一篇文章 helloworld</p><div class="code-wrapper"><pre><code class="hljs">  hexo new helloworld  </code></pre></div></li></ul><p> 默认会在_posts下生成helloworld.md，然后就可以编辑自己的文章了</p><ul><li><p>写好可以先本地查看  </p><div class="code-wrapper"><pre><code class="hljs">  hexo clean  hexo s</code></pre></div></li><li><p>没啥问题就推送到github</p><div class="code-wrapper"><pre><code class="hljs">  hexo clean  hexo g -d  //g generate缩写生产静态文章 d deploy 缩写 部署到github</code></pre></div></li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>diary</title>
    <link href="/2021/10/27/diary/"/>
    <url>/2021/10/27/diary/</url>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-GitHub-Pages"><a href="#Welcome-to-GitHub-Pages" class="headerlink" title="Welcome to GitHub Pages"></a>Welcome to GitHub Pages</h2><p>You can use the <a href="https://github.com/kexiazhou/kexiazhou.github.io/edit/main/README.md">editor on GitHub</a> to maintain and preview the content for your website in Markdown files.</p><p>Whenever you commit to this repository, GitHub Pages will run <a href="https://jekyllrb.com/">Jekyll</a> to rebuild the pages in your site, from the content in your Markdown files.</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for</p><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">Syntax highlighted code block<br><br><span class="hljs-section"># Header 1</span><br><span class="hljs-section">## Header 2</span><br><span class="hljs-section">### Header 3</span><br><br><span class="hljs-bullet">-</span> Bulleted<br><span class="hljs-bullet">-</span> List<br><br><span class="hljs-bullet">1.</span> Numbered<br><span class="hljs-bullet">2.</span> List<br><br><span class="hljs-strong">**Bold**</span> and <span class="hljs-emphasis">_Italic_</span> and <span class="hljs-code">`Code`</span> text<br><br>[<span class="hljs-string">Link</span>](<span class="hljs-link">url</span>) and ![<span class="hljs-string">Image</span>](<span class="hljs-link">src</span>)<br></code></pre></td></tr></table></figure><p>1.sssss<br>2.ggggg<br>3.hhhhh<br>-rrrrrr<br>-yyyyyy<br>-uuuuuu<br>For more details see <a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown</a>.</p><h3 id="Jekyll-Themes"><a href="#Jekyll-Themes" class="headerlink" title="Jekyll Themes"></a>Jekyll Themes</h3><p>Your Pages site will use the layout and styles from the Jekyll theme you have selected in your <a href="https://github.com/kexiazhou/kexiazhou.github.io/settings/pages">repository settings</a>. The name of this theme is saved in the Jekyll <code>_config.yml</code> configuration file.</p><h3 id="Support-or-Contact"><a href="#Support-or-Contact" class="headerlink" title="Support or Contact"></a>Support or Contact</h3><p>Having trouble with Pages? Check out our <a href="https://docs.github.com/categories/github-pages-basics/">documentation</a> or <a href="https://support.github.com/contact">contact support</a> and we’ll help you sort it out.<br>创建脚注格式类似这样 [^RUNOOB]。</p><p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>netty</title>
    <link href="/2021/10/27/netty/"/>
    <url>/2021/10/27/netty/</url>
    
    <content type="html"><![CDATA[<h2 id="netty简介"><a href="#netty简介" class="headerlink" title="netty简介"></a>netty简介</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/27/hello-world/"/>
    <url>/2021/10/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
