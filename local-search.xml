<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>elk</title>
    <link href="/2022/06/23/elk/"/>
    <url>/2022/06/23/elk/</url>
    
    <content type="html"><![CDATA[<h1 id="1-ELK简介"><a href="#1-ELK简介" class="headerlink" title="1. ELK简介"></a>1. ELK简介</h1><p>Elasticsearch、Logstash、Kibana 三个开源软件的组成。<br>是用于数据抽取（Logstash）、搜索分析（Elasticsearch）、数据展现（Kibana）的一整套解决方案。</p><h2 id="组件介绍"><a href="#组件介绍" class="headerlink" title="组件介绍"></a>组件介绍</h2><p><strong>Elasticsearch</strong></p><p>Elasticsearch 是使用java开发，基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。</p><p><strong>Logstash</strong></p><p>Logstash 基于java开发，是一个数据抽取转化工具。一般工作方式为c/s架构，client端安装在需要收集信息的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch或其他组件上去。</p><p><strong>Kibana</strong></p><p>Kibana 基于nodejs，也是一个开源和免费的可视化工具。Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以汇总、分析和搜索重要数据日志。</p><h4 id="Elasticsearch的使用场景"><a href="#Elasticsearch的使用场景" class="headerlink" title="Elasticsearch的使用场景"></a>Elasticsearch的使用场景</h4><p>国外：</p><ul><li><p>维基百科</p></li><li><p>Stack Overflow</p></li><li><p>GitHub（开源代码管理），搜索上千亿行代码。</p></li><li><p>电商网站，检索商品</p></li><li><p>日志数据分析，logstash采集日志，ES进行复杂的数据分析（ELK技术，elasticsearch+logstash+kibana）</p></li><li><p>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅《java编程思想》的监控，如果价格低于27块钱，就通知我，我就去买。</p></li><li><p>BI系统，商业智能（Business Intelligence）。大型连锁超市，分析全国网点传回的数据，分析各个商品在什么季节的销售量最好、利润最高。成本管理，店面租金、员工工资、负债等信息进行分析。从而部署下一个阶段的战略目标。</p></li></ul><p>国内：</p><ul><li><p>百度搜索，第一次查询，使用es。</p></li><li><p>OA、ERP系统站内搜索。</p></li></ul><h3 id="elasticsearch的核心概念"><a href="#elasticsearch的核心概念" class="headerlink" title="elasticsearch的核心概念"></a>elasticsearch的核心概念</h3><h4 id="近实时"><a href="#近实时" class="headerlink" title="近实时"></a>近实时</h4><p>两方面：</p><ul><li><p>写入数据时，过1秒才会被搜索到，因为内部在分词、录入索引。</p></li><li><p>es搜索时：搜索和分析数据需要秒级出结果。</p></li></ul><h4 id="Cluster：集群"><a href="#Cluster：集群" class="headerlink" title="Cluster：集群"></a>Cluster：集群</h4><p>包含一个或多个启动着es实例的机器群。通常一台机器起一个es实例。同一网络下，集名一样的多个es实例自动组成集群，自动均衡分片等行为。<br>一台集器也可以有多个节点<br>elasticsearch.yml 里可以配置名称cluster.name: my-application</p><h4 id="Node：节点"><a href="#Node：节点" class="headerlink" title="Node：节点"></a>Node：节点</h4><p>每个es实例称为一个节点。节点名自动分配，也可以手动配置。<br>elasticsearch.yml 里配置node.name: node-1</p><h4 id="Index：索引"><a href="#Index：索引" class="headerlink" title="Index：索引"></a>Index：索引</h4><p>包含一堆有相似结构的文档数据。</p><p>索引创建规则：</p><ul><li><p>仅限小写字母</p></li><li><p>不能包含\、/、 *、?、”、&lt;、&gt;、|、#以及空格符等特殊符号</p></li><li><p>从7.0版本开始不再包含冒号</p></li><li><p>不能以-、_或+开头</p></li><li><p>不能超过255个字节（注意它是字节，因此多字节字符将计入255个限制）</p></li></ul><h4 id="Document：文档"><a href="#Document：文档" class="headerlink" title="Document：文档"></a>Document：文档</h4><p>es中的最小数据单元。一个document就像数据库中的一条记录。通常以json格式显示。多个document存储于一个索引（Index）中。</p><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;book_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-attr">&quot;book_name&quot;</span>: <span class="hljs-string">&quot;java编程思想&quot;</span>,<br>  <span class="hljs-attr">&quot;book_desc&quot;</span>: <span class="hljs-string">&quot;从入门到放弃，哈哈哈哈哈哈哈哈哈哈哈&quot;</span>,<br>  <span class="hljs-attr">&quot;category_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-attr">&quot;category_name&quot;</span>: <span class="hljs-string">&quot;java 入门 放弃&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Field-字段"><a href="#Field-字段" class="headerlink" title="Field:字段"></a>Field:字段</h4><p>就像数据库中的列（Columns），定义每个document应该有的字段。</p><h4 id="Type：类型"><a href="#Type：类型" class="headerlink" title="Type：类型"></a>Type：类型</h4><p>后续版本不再有了</p><h4 id="shard：分片"><a href="#shard：分片" class="headerlink" title="shard：分片"></a>shard：分片</h4><p>index数据过大时，将index里面的数据，分为多个shard，分布式的存储在各个服务器上面。可以支持海量数据和高并发，提升性能和吞吐量，充分利用多台机器的cpu。</p><h4 id="replica：副本"><a href="#replica：副本" class="headerlink" title="replica：副本"></a>replica：副本</h4><p>在分布式环境下，任何一台机器都会随时宕机，如果宕机，index的一个分片没有，导致此index不能搜索。所以，为了保证数据的安全，我们会将每个index的分片经行备份，存储在另外的机器上。保证少数机器宕机es集群仍可以搜索。</p><p>能正常提供查询和插入的分片我们叫做主分片（primary shard），其余的我们就管他们叫做备份的分片（replica shard）。</p><p>es6默认新建索引时，5分片，2副本，也就是一主一备，共10个分片。所以，es集群最小规模为两台。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cluster.name:</span> <br><span class="hljs-string">配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</span><br><span class="hljs-attr">node.name:</span><br><span class="hljs-string">节点名，通常一台物理服务器就是一个节点，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</span><br><span class="hljs-string">一个或多个节点组成一个cluster集群，集群是一个逻辑的概念，节点是物理概念，后边章节会详细介绍。</span><br><span class="hljs-attr">path.conf:</span> <br><span class="hljs-string">设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/</span> <span class="hljs-string">elasticsearch</span><br><span class="hljs-attr">path.data:</span><br><span class="hljs-string">设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开。</span><br><span class="hljs-attr">path.logs:</span><br><span class="hljs-string">设置日志文件的存储路径，默认是es根目录下的logs文件夹</span><br><span class="hljs-attr">path.plugins:</span> <br><span class="hljs-string">设置插件的存放路径，默认是es根目录下的plugins文件夹</span><br><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">true</span><br><span class="hljs-string">设置为true可以锁住ES使用的内存，避免内存与swap分区交换数据。</span><br><span class="hljs-attr">network.host:</span> <br><span class="hljs-string">设置绑定主机的ip地址，设置为0.0.0.0表示绑定任何ip，允许外网访问，生产环境建议设置为具体的ip。</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-string">设置对外服务的http端口，默认为9200。</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span>  <span class="hljs-string">集群结点之间通信端口</span><br><span class="hljs-attr">node.master:</span> <br><span class="hljs-string">指定该节点是否有资格被选举成为master结点，默认是true，如果原来的master宕机会重新选举新的master。</span><br><span class="hljs-attr">node.data:</span> <br><span class="hljs-string">指定该节点是否存储索引数据，默认为true。</span><br><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;host1:port&quot;</span>, <span class="hljs-string">&quot;host2:port&quot;</span>, <span class="hljs-string">&quot;...&quot;</span>]<br><span class="hljs-string">设置集群中master节点的初始列表。</span><br><span class="hljs-attr">discovery.zen.ping.timeout:</span> <span class="hljs-string">3s</span><br><span class="hljs-string">设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些。</span><br><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span><br><span class="hljs-string">主结点数量的最少值</span> <span class="hljs-string">,此值的公式为：(master_eligible_nodes</span> <span class="hljs-string">/</span> <span class="hljs-number">2</span><span class="hljs-string">)</span> <span class="hljs-string">+</span> <span class="hljs-number">1</span> <span class="hljs-string">，比如：有3个符合要求的主结点，那么这里要设置为2。</span><br><span class="hljs-attr">node.max_local_storage_nodes:</span> <br><span class="hljs-string">单机允许的最大存储结点数，通常单机启动一个结点建议设置为1，开发环境如果单机启动多个节点可设置大于1。</span><br></code></pre></td></tr></table></figure><p><strong>jvm.options</strong></p><p>设置最小及最大的JVM堆内存大小：</p><p>在jvm.options中设置 -Xms和-Xmx：</p><p>1） 两个值设置为相等</p><p>2） 将Xmx 设置为不超过物理内存的一半。</p><h1 id="2-es快速入门"><a href="#2-es快速入门" class="headerlink" title="2. es快速入门"></a>2. es快速入门</h1><h2 id="2-1-文档（document）的数据格式"><a href="#2-1-文档（document）的数据格式" class="headerlink" title="2.1 文档（document）的数据格式"></a>2.1 文档（document）的数据格式</h2><p>数据库中要设计所谓的一对多，多对一的两张表，外键等。查询出来时，还要关联，mybatis写映射文件，很繁琐。</p><p>而在es中，一个学生存成文档如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;id&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    <span class="hljs-attr">&quot;last_name&quot;</span>: <span class="hljs-string">&quot;zhang&quot;</span>,<br>    <span class="hljs-attr">&quot;classInfo&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;className&quot;</span>: <span class="hljs-string">&quot;三年二班&quot;</span>,     <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-简单的集群管理"><a href="#2-2-简单的集群管理" class="headerlink" title="2.2 简单的集群管理"></a>2.2 简单的集群管理</h2><h3 id="快速检查集群的健康状况"><a href="#快速检查集群的健康状况" class="headerlink" title="快速检查集群的健康状况"></a>快速检查集群的健康状况</h3><p>es提供了一套api，叫做cat api，可以查看es中各种各样的数据</p><p>GET /_cat/health?v</p><p>如何快速了解集群的健康状况？green、yellow、red？</p><p>green：每个索引的primary shard和replica shard都是active状态的</p><p>yellow：每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态</p><p>red：不是所有索引的primary shard都是active状态的，部分索引有数据丢失了</p><h3 id="快速查看集群中有哪些索引"><a href="#快速查看集群中有哪些索引" class="headerlink" title="快速查看集群中有哪些索引"></a>快速查看集群中有哪些索引</h3><p>GET /_cat/indices?v</p><h3 id="简单的索引操作"><a href="#简单的索引操作" class="headerlink" title="简单的索引操作"></a>简单的索引操作</h3><p>创建索引：PUT /demo_index?pretty</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;acknowledged&quot;</span> : <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;shards_acknowledged&quot;</span> : <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;index&quot;</span> : <span class="hljs-string">&quot;demo_index&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>删除索引：DELETE /demo_index?pretty</p><h2 id="2-3-商品的CRUD操作（document-CRUD操作）"><a href="#2-3-商品的CRUD操作（document-CRUD操作）" class="headerlink" title="2.3 商品的CRUD操作（document CRUD操作）"></a>2.3 商品的CRUD操作（document CRUD操作）</h2><h3 id="新建图书索引"><a href="#新建图书索引" class="headerlink" title="新建图书索引"></a>新建图书索引</h3><p>首先建立图书索引 book</p><p>语法：put /index</p><p>PUT /book</p><h3 id="新增图书-新增文档"><a href="#新增图书-新增文档" class="headerlink" title="新增图书 :新增文档"></a>新增图书 :新增文档</h3><p>语法：PUT /index/_doc/id</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,<br><span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span>,<br><span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,<br><span class="hljs-attr">&quot;price&quot;</span>:<span class="hljs-number">34.6</span>,<br><span class="hljs-attr">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br><span class="hljs-attr">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br><span class="hljs-attr">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;bootstrap&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程思想&quot;</span>,<br><span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,<br><span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,<br><span class="hljs-attr">&quot;price&quot;</span>:<span class="hljs-number">64.6</span>,<br><span class="hljs-attr">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br><span class="hljs-attr">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br><span class="hljs-attr">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,<br><span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,<br><span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,<br><span class="hljs-attr">&quot;price&quot;</span>:<span class="hljs-number">84.6</span>,<br><span class="hljs-attr">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-24 19:11:35&quot;</span>,<br><span class="hljs-attr">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br><span class="hljs-attr">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;spring&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>  <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;result&quot;</span> : <span class="hljs-string">&quot;created&quot;</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查询图书：检索文档"><a href="#查询图书：检索文档" class="headerlink" title="查询图书：检索文档"></a>查询图书：检索文档</h3><p>查看图书:GET /book/_doc/1  就可看到json形式的文档。方便程序解析。</p><h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><p>幂等操作，操作一次和多次结果一样，不会增加新的资源<br>局部更新，为什么不是幂等的，原因在于局部更新发送的是更新指令，多次操作结果可能不一样，比如对指定字段算数运算，每次操作结果会不一样</p><h3 id="修改图书：替换操作"><a href="#修改图书：替换操作" class="headerlink" title="修改图书：替换操作"></a>修改图书：替换操作</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/book/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发教程1&quot;</span>,<br>    <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span>,<br>    <span class="hljs-string">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,<br>    <span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-number">34.6</span>,<br>    <span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>    <span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>    <span class="hljs-string">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;bootstrap&quot;</span>, <span class="hljs-string">&quot;开发&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>替换操作是整体覆盖，要带上所有信息。</p><h3 id="修改图书：更新文档"><a href="#修改图书：更新文档" class="headerlink" title="修改图书：更新文档"></a>修改图书：更新文档</h3><p>语法：POST  /{index}/type /{id}/_update</p><p>或者POST  /{index}/_update/{id}</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/book/</span>_update<span class="hljs-regexp">/1/</span> <br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>   <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot; Bootstrap开发教程高级&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除图书：删除文档"><a href="#删除图书：删除文档" class="headerlink" title="删除图书：删除文档"></a>删除图书：删除文档</h3><p>语法：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/book/</span>_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="3-文档document入门"><a href="#3-文档document入门" class="headerlink" title="3. 文档document入门"></a>3. 文档document入门</h1><h2 id="3-1-默认自带字段解析"><a href="#3-1-默认自带字段解析" class="headerlink" title="3.1 默认自带字段解析"></a>3.1 默认自带字段解析</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>  <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>  <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;found&quot;</span> : <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;Bootstrap开发教程1&quot;</span>,<br>    <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span>,<br>    <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201002&quot;</span>,<br>    <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">34.6</span>,<br>    <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>    <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>    <span class="hljs-attr">&quot;tags&quot;</span> : [<br>      <span class="hljs-string">&quot;bootstrap&quot;</span>,<br>      <span class="hljs-string">&quot;开发&quot;</span><br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>_index</p><ul><li>含义：此文档属于哪个索引</li><li>定义规则：英文小写。尽量不要使用特殊字符。order user</li></ul></li><li><p>_type</p><ul><li>注意：以后的es9将彻底删除此字段，所以当前版本在不断弱化type</li></ul></li><li><p>_id 含义：文档的唯一标识</p><ul><li>put /index/_doc/id 手动生成</li><li>POST /index/_doc  自动生成 长度为20个字符，URL安全，base64编码，GUID，分布式生成不冲突</li></ul></li><li><p>_source 字段</p><ul><li>插入数据时的所有字段和值。在get获取数据时，在_source字段中原样返回。</li><li>定制返回字段 /book/_doc/1?_source_includes=name,price</li></ul></li></ul><h4 id="图解内部原理"><a href="#图解内部原理" class="headerlink" title="图解内部原理"></a>图解内部原理</h4><p>内部与全量替换是一样的，旧文档标记为删除，新建一个文档。</p><p>优点：</p><ul><li>大大减少网络传输次数和流量，提升性能</li><li>减少并发冲突发生的概率。</li></ul><h2 id="3-2-图解es的并发问题"><a href="#3-2-图解es的并发问题" class="headerlink" title="3.2  图解es的并发问题"></a>3.2  图解es的并发问题</h2><p>如同秒杀，多线程情况下，es同样会出现并发冲突问题。</p><h2 id="3-3-图解悲观锁与乐观锁机制"><a href="#3-3-图解悲观锁与乐观锁机制" class="headerlink" title="3.3 图解悲观锁与乐观锁机制"></a>3.3 图解悲观锁与乐观锁机制</h2><p>为控制并发问题，我们通常采用锁机制。分为悲观锁和乐观锁两种机制。</p><p>悲观锁：很悲观，所有情况都上锁。此时只有一个线程可以操作数据。具体例子为数据库中的行级锁、表级锁、读锁、写锁等。</p><p>特点：优点是方便，直接加锁，对程序透明。缺点是效率低。</p><p>乐观锁：很乐观，对数据本身不加锁。提交数据时，通过一种机制验证是否存在冲突，如es中通过版本号验证。</p><p>特点：优点是并发能力高。缺点是操作繁琐，在提交数据时，可能反复重试多次。</p><h2 id="3-4-图解es内部基于-version乐观锁控制"><a href="#3-4-图解es内部基于-version乐观锁控制" class="headerlink" title="3.4 图解es内部基于_version乐观锁控制"></a>3.4 图解es内部基于_version乐观锁控制</h2><h4 id="实验基于-version的版本控制"><a href="#实验基于-version的版本控制" class="headerlink" title="实验基于_version的版本控制"></a>实验基于_version的版本控制</h4><p>es对于文档的增删改都是基于版本号。</p><p>1新增多次文档：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;test&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回版本号递增</p><p>2删除此文档</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>  <span class="hljs-string">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>  <span class="hljs-string">&quot;_version&quot;</span> : <span class="hljs-number">6</span>,<br>  <span class="hljs-string">&quot;result&quot;</span> : <span class="hljs-string">&quot;deleted&quot;</span>,<br>  <span class="hljs-string">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;total&quot;</span> : <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;_seq_no&quot;</span> : <span class="hljs-number">7</span>,<br>  <span class="hljs-string">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>3再新增</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;test&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到版本号依然递增，验证延迟删除策略。</p><p>如果删除一条数据立马删除的话，所有分片和副本都要立马删除，对es集群压力太大。</p><h4 id="图解es内部并发控制"><a href="#图解es内部并发控制" class="headerlink" title="图解es内部并发控制"></a>图解es内部并发控制</h4><p>es内部主从同步时，是多线程异步。乐观锁机制。</p><h2 id="3-5-演示客户端程序基于-version并发操作流程"><a href="#3-5-演示客户端程序基于-version并发操作流程" class="headerlink" title="3.5 演示客户端程序基于_version并发操作流程"></a>3.5 演示客户端程序基于_version并发操作流程</h2><p>java python客户端更新的机制。</p><h4 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>  <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>  <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>  <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;result&quot;</span> : <span class="hljs-string">&quot;created&quot;</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">8</span>,<br>  <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端1修改。带版本号1。"><a href="#客户端1修改。带版本号1。" class="headerlink" title="客户端1修改。带版本号1。"></a>客户端1修改。带版本号1。</h4><p>首先获取数据的当前版本号</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>更新文档</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span>?version=<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast1&quot;</span><br>&#125;<br>PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span>?if_seq_no=<span class="hljs-number">21</span>&amp;if_primary_term=<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端2并发修改。带版本号1。"><a href="#客户端2并发修改。带版本号1。" class="headerlink" title="客户端2并发修改。带版本号1。"></a>客户端2并发修改。带版本号1。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span>?version=<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast2&quot;</span><br>&#125;<br>PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span>?if_seq_no=<span class="hljs-number">21</span>&amp;if_primary_term=<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>报错。</p><h4 id="客户端2重新查询。得到最新版本为2。seq-no-22"><a href="#客户端2重新查询。得到最新版本为2。seq-no-22" class="headerlink" title="客户端2重新查询。得到最新版本为2。seq_no=22"></a>客户端2重新查询。得到最新版本为2。seq_no=22</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="客户端2并发修改。带版本号2。"><a href="#客户端2并发修改。带版本号2。" class="headerlink" title="客户端2并发修改。带版本号2。"></a>客户端2并发修改。带版本号2。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">4</span>?version=<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast2&quot;</span><br>&#125;<br>es7<br>PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">5</span>?if_seq_no=<span class="hljs-number">22</span>&amp;if_primary_term=<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>修改成功。</p><h2 id="3-6-演示自己手动控制版本号-external-version"><a href="#3-6-演示自己手动控制版本号-external-version" class="headerlink" title="3.6  演示自己手动控制版本号 external version"></a>3.6  演示自己手动控制版本号 external version</h2><p>背景：已有数据是在数据库中，有自己手动维护的版本号的情况下，可以使用external version控制。hbase。</p><p>要求：修改时external version要大于当前文档的_version</p><p>对比：基于_version时，修改的文档version等于当前文档的版本号。</p><p>使用?version=1&amp;version_type=external</p><h4 id="新建文档-1"><a href="#新建文档-1" class="headerlink" title="新建文档"></a>新建文档</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">4</span><br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>更新文档：</p><h4 id="客户端1修改文档"><a href="#客户端1修改文档" class="headerlink" title="客户端1修改文档"></a>客户端1修改文档</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PUT <span class="hljs-string">/test_index/_doc/4</span>?<span class="hljs-keyword">version</span>=2&amp;<span class="hljs-keyword">version</span>_type=external<br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast1&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端2同时修改"><a href="#客户端2同时修改" class="headerlink" title="客户端2同时修改"></a>客户端2同时修改</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PUT <span class="hljs-string">/test_index/_doc/4</span>?<span class="hljs-keyword">version</span>=2&amp;<span class="hljs-keyword">version</span>_type=external<br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;error&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;root_cause&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span>,<br>        <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;[4]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;</span>,<br>        <span class="hljs-attr">&quot;index_uuid&quot;</span>: <span class="hljs-string">&quot;-rqYZ2EcSPqL6pu8Gi35jw&quot;</span>,<br>        <span class="hljs-attr">&quot;shard&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;test_index&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;version_conflict_engine_exception&quot;</span>,<br>    <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;[4]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;</span>,<br>    <span class="hljs-attr">&quot;index_uuid&quot;</span>: <span class="hljs-string">&quot;-rqYZ2EcSPqL6pu8Gi35jw&quot;</span>,<br>    <span class="hljs-attr">&quot;shard&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;test_index&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">409</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="客户端2重新查询数据"><a href="#客户端2重新查询数据" class="headerlink" title="客户端2重新查询数据"></a>客户端2重新查询数据</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="客户端2重新修改数据"><a href="#客户端2重新修改数据" class="headerlink" title="客户端2重新修改数据"></a>客户端2重新修改数据</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PUT <span class="hljs-string">/test_index/_doc/4</span>?<span class="hljs-keyword">version</span>=3&amp;<span class="hljs-keyword">version</span>_type=external<br>&#123;<br>  <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-更新时-retry-on-conflict-参数"><a href="#3-7-更新时-retry-on-conflict-参数" class="headerlink" title="3.7 更新时 retry_on_conflict 参数"></a>3.7 更新时 retry_on_conflict 参数</h2><h4 id="retry-on-conflict"><a href="#retry-on-conflict" class="headerlink" title="retry_on_conflict"></a>retry_on_conflict</h4><p>指定重试次数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/test_index/</span>_doc<span class="hljs-regexp">/5/</span>_update?retry_on_conflict=<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="与-version结合使用"><a href="#与-version结合使用" class="headerlink" title="与 _version结合使用"></a>与 _version结合使用</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/test_index/</span>_doc<span class="hljs-regexp">/5/</span>_update?retry_on_conflict=<span class="hljs-number">3</span>&amp;version=<span class="hljs-number">22</span>&amp;version_type=external<br>&#123;<br>  <span class="hljs-string">&quot;doc&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;itcast1&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-批量查询-mget"><a href="#3-8-批量查询-mget" class="headerlink" title="3.8  批量查询 mget"></a>3.8  批量查询 mget</h2><p>单条查询 GET  /test_index/_doc/1，如果查询多个id的文档一条一条查询，网络开销太大。</p><h4 id="mget-批量查询："><a href="#mget-批量查询：" class="headerlink" title="mget 批量查询："></a>mget 批量查询：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_mget<br>&#123;<br>   <span class="hljs-string">&quot;docs&quot;</span> : [<br>      &#123;<br>         <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>         <span class="hljs-string">&quot;_type&quot;</span> :  <span class="hljs-string">&quot;_doc&quot;</span>,<br>         <span class="hljs-string">&quot;_id&quot;</span> :    1<br>      &#125;,<br>      &#123;<br>         <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>         <span class="hljs-string">&quot;_type&quot;</span> :  <span class="hljs-string">&quot;_doc&quot;</span>,<br>         <span class="hljs-string">&quot;_id&quot;</span> :    7<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;docs&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>      <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>      <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>      <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">12</span>,<br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;found&quot;</span> : <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;test_field&quot;</span> : <span class="hljs-string">&quot;test12333123321321&quot;</span><br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>      <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>      <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>      <span class="hljs-attr">&quot;_version&quot;</span> : <span class="hljs-number">6</span>,<br>      <span class="hljs-attr">&quot;_seq_no&quot;</span> : <span class="hljs-number">18</span>,<br>      <span class="hljs-attr">&quot;_primary_term&quot;</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;found&quot;</span> : <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;test_field&quot;</span> : <span class="hljs-string">&quot;test3213&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>提示去掉type</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_mget<br>&#123;<br>   <span class="hljs-string">&quot;docs&quot;</span> : [<br>      &#123;<br>         <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>         <span class="hljs-string">&quot;_id&quot;</span> :    2<br>      &#125;,<br>      &#123;<br>         <span class="hljs-string">&quot;_index&quot;</span> : <span class="hljs-string">&quot;test_index&quot;</span>,<br>         <span class="hljs-string">&quot;_id&quot;</span> :    3<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同一索引下批量查询："><a href="#同一索引下批量查询：" class="headerlink" title="同一索引下批量查询："></a>同一索引下批量查询：</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /test_index/_mget<br>&#123;<br>   <span class="hljs-string">&quot;docs&quot;</span> : [<br>      &#123;<br>         <span class="hljs-string">&quot;_id&quot;</span> :    2<br>      &#125;,<br>      &#123;<br>         <span class="hljs-string">&quot;_id&quot;</span> :    3<br>      &#125;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第三种写法：搜索写法"><a href="#第三种写法：搜索写法" class="headerlink" title="第三种写法：搜索写法"></a>第三种写法：搜索写法</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">post <span class="hljs-regexp">/test_index/</span>_doc/_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;ids&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;values&quot;</span> : [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-9-批量增删改-bulk"><a href="#3-9-批量增删改-bulk" class="headerlink" title="3.9 批量增删改 bulk"></a>3.9 批量增删改 bulk</h2><p>Bulk 操作解释将文档的增删改查一些列操作，通过一次请求全都做完。减少网络传输次数。</p><p>语法：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST /<span class="hljs-class">_bulk</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;metadata&quot;</span>&#125;&#125;<br>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>如下操作，删除5，新增14，修改2。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">POST /_bulk<br>&#123; &quot;<span class="hljs-keyword">delete</span><span class="hljs-string">&quot;: &#123; &quot;</span>_index<span class="hljs-string">&quot;: &quot;</span>test_index<span class="hljs-string">&quot;,  &quot;</span>_id<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">5</span><span class="hljs-string">&quot; &#125;&#125; </span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">create</span><span class="hljs-string">&quot;: &#123; &quot;</span>_index<span class="hljs-string">&quot;: &quot;</span>test_index<span class="hljs-string">&quot;,  &quot;</span>_id<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">14</span><span class="hljs-string">&quot; &#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>test_field<span class="hljs-string">&quot;: &quot;</span>test14<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">update</span><span class="hljs-string">&quot;: &#123; &quot;</span>_index<span class="hljs-string">&quot;: &quot;</span>test_index<span class="hljs-string">&quot;,  &quot;</span>_id<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">2</span><span class="hljs-string">&quot;&#125; &#125;</span><br><span class="hljs-string">&#123; &quot;</span>doc<span class="hljs-string">&quot; : &#123;&quot;</span>test_field<span class="hljs-string">&quot; : &quot;</span>bulk test<span class="hljs-string">&quot;&#125; &#125;</span><br></code></pre></td></tr></table></figure><p>总结：</p><p>1功能：</p><ul><li> delete：删除一个文档，只要1个json串就可以了</li><li> create：相当于强制创建  PUT /index/type/id/_create</li><li> index：普通的put操作，可以是创建文档，也可以是全量替换文档</li><li> update：执行的是局部更新partial update操作</li></ul><p>2格式：每个json不能换行。相邻json必须换行。</p><p>3隔离：每个操作互不影响。操作失败的行会返回其失败信息。</p><p>4实际用法：bulk请求一次不要太大，否则一下积压到内存中，性能会下降。所以，一次请求几千个操作、大小在几M正好。</p><h1 id="4．-图解es内部机制"><a href="#4．-图解es内部机制" class="headerlink" title="4． 图解es内部机制"></a>4． 图解es内部机制</h1><h2 id="4-1．-图解es分布式基础"><a href="#4-1．-图解es分布式基础" class="headerlink" title="4.1． 图解es分布式基础"></a>4.1． 图解es分布式基础</h2><h3 id="4-1-1es对复杂分布式机制的透明隐藏特性"><a href="#4-1-1es对复杂分布式机制的透明隐藏特性" class="headerlink" title="4.1.1es对复杂分布式机制的透明隐藏特性"></a>4.1.1es对复杂分布式机制的透明隐藏特性</h3><ul><li>  分布式机制：分布式数据存储及共享。</li><li>  分片机制：数据存储到哪个分片，副本数据写入。</li><li>  集群发现机制：cluster discovery。新启动es实例，自动加入集群。</li><li>  shard负载均衡：大量数据写入及查询，es会将数据平均分配。</li><li>  shard副本：新增副本数，分片重分配。</li></ul><h3 id="4-1-2Elasticsearch的垂直扩容与水平扩容"><a href="#4-1-2Elasticsearch的垂直扩容与水平扩容" class="headerlink" title="4.1.2Elasticsearch的垂直扩容与水平扩容"></a>4.1.2Elasticsearch的垂直扩容与水平扩容</h3><p>垂直扩容：使用更加强大的服务器替代老服务器。但单机存储及运算能力有上线。且成本直线上升。如10t服务器1万。单个10T服务器可能20万。</p><p>水平扩容：采购更多服务器，加入集群。大数据。</p><h3 id="4-1-3增减或减少节点时的数据rebalance"><a href="#4-1-3增减或减少节点时的数据rebalance" class="headerlink" title="4.1.3增减或减少节点时的数据rebalance"></a>4.1.3增减或减少节点时的数据rebalance</h3><p>新增或减少es实例时，es集群会将数据重新分配。</p><h3 id="4-1-4master节点"><a href="#4-1-4master节点" class="headerlink" title="4.1.4master节点"></a>4.1.4master节点</h3><p>功能：</p><ul><li> 创建删除节点</li><li> 创建删除索引</li></ul><h3 id="4-1-5节点对等的分布式架构"><a href="#4-1-5节点对等的分布式架构" class="headerlink" title="4.1.5节点对等的分布式架构"></a>4.1.5节点对等的分布式架构</h3><ul><li>节点对等，每个节点都能接收所有的请求</li><li>自动请求路由</li><li>响应收集</li></ul><h2 id="4-2．-图解分片shard、副本replica机制"><a href="#4-2．-图解分片shard、副本replica机制" class="headerlink" title="4.2． 图解分片shard、副本replica机制"></a>4.2． 图解分片shard、副本replica机制</h2><h3 id="4-2-1shard-amp-replica机制"><a href="#4-2-1shard-amp-replica机制" class="headerlink" title="4.2.1shard&amp;replica机制"></a>4.2.1shard&amp;replica机制</h3><p>（1）每个index包含一个或多个shard</p><p>（2）每个shard都是一个最小工作单元，承载部分数据，lucene实例，完整的建立索引和处理请求的能力</p><p>（3）增减节点时，shard会自动在nodes中负载均衡</p><p>（4）primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard</p><p>（5）replica shard是primary shard的副本，负责容错，以及承担读请求负载</p><p>（6）primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改</p><p>（7）primary shard的默认数量是1，replica默认是1，默认共有2个shard，1个primary shard，1个replica shard</p><p>注意：es7以前primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard</p><p>（8）primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上</p><h2 id="4-3图解单node环境下创建index是什么样子的"><a href="#4-3图解单node环境下创建index是什么样子的" class="headerlink" title="4.3图解单node环境下创建index是什么样子的"></a>4.3图解单node环境下创建index是什么样子的</h2><p>（1）单node环境下，创建一个index，有3个primary shard，3个replica shard<br>（2）集群status是yellow<br>（3）这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的<br>（4）集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法承接任何请求</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">PUT /test_index1<br>&#123;<br>   <span class="hljs-string">&quot;settings&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;number_of_shards&quot;</span> : 3,<br>      <span class="hljs-string">&quot;number_of_replicas&quot;</span> : 1<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4图解2个node环境下replica-shard是如何分配的"><a href="#4-4图解2个node环境下replica-shard是如何分配的" class="headerlink" title="4.4图解2个node环境下replica shard是如何分配的"></a>4.4图解2个node环境下replica shard是如何分配的</h2><p>（1）replica shard分配：3个primary shard，3个replica shard，1 node<br>（2）primary —&gt; replica同步<br>（3）读请求：primary/replica</p><h2 id="4-5图解横向扩容"><a href="#4-5图解横向扩容" class="headerlink" title="4.5图解横向扩容"></a>4.5图解横向扩容</h2><ul><li>分片自动负载均衡，分片向空闲机器转移。</li><li>每个节点存储更少分片，系统资源给与每个分片的资源更多，整体集群性能提高。</li><li>扩容极限：节点数大于整体分片数，则必有空闲机器。</li><li> 超出扩容极限时，可以增加副本数，如设置副本数为2，总共3*3=9个分片。9台机器同时运行，存储和搜索性能更强。容错性更好。</li><li> 容错性：只要一个索引的所有主分片在，集群就就可以运行。</li></ul><h2 id="4-6-图解es容错机制-master选举，replica容错，数据恢复"><a href="#4-6-图解es容错机制-master选举，replica容错，数据恢复" class="headerlink" title="4.6 图解es容错机制 master选举，replica容错，数据恢复"></a>4.6 图解es容错机制 master选举，replica容错，数据恢复</h2><p>以3分片，2副本数，3节点为例介绍。</p><ul><li>master node宕机，自动master选举，集群为red</li><li>replica容错：新master将replica提升为primary shard，yellow</li><li> 重启宕机node，master copy replica到该node，使用原有的shard并同步宕机后的修改，green</li></ul><h1 id="5．-图解文档存储机制"><a href="#5．-图解文档存储机制" class="headerlink" title="5． 图解文档存储机制"></a>5． 图解文档存储机制</h1><h2 id="5-1．-数据路由"><a href="#5-1．-数据路由" class="headerlink" title="5.1． 数据路由"></a>5.1． 数据路由</h2><h3 id="5-1-1文档存储如何路由到相应分片"><a href="#5-1-1文档存储如何路由到相应分片" class="headerlink" title="5.1.1文档存储如何路由到相应分片"></a>5.1.1文档存储如何路由到相应分片</h3><p>一个文档，最终会落在主分片的一个分片上，到底应该在哪一个分片？这就是数据路由。</p><h3 id="5-1-2路由算法"><a href="#5-1-2路由算法" class="headerlink" title="5.1.2路由算法"></a>5.1.2路由算法</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">shard = hash<span class="hljs-comment">(routing)</span> <span class="hljs-meta">%</span> <span class="hljs-symbol">number_of_primary_shards</span><br></code></pre></td></tr></table></figure><p>哈希值对主分片数取模。</p><p>举例：</p><p>对一个文档经行crud时，都会带一个路由值 routing number。默认为文档_id（可能是手动指定，也可能是自动生成）。</p><p>存储1号文档，经过哈希计算，哈希值为2,此索引有3个主分片，那么计算2%3=2，就算出此文档在P2分片上。</p><p>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的</p><p>无论hash值是几，无论是什么数字，对number_of_primary_shards求余数，结果一定是在0~number_of_primary_shards-1之间这个范围内的。0,1,2。</p><h3 id="5-1-3手动指定-routing-number"><a href="#5-1-3手动指定-routing-number" class="headerlink" title="5.1.3手动指定 routing number"></a>5.1.3手动指定 routing number</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/test_index/</span>_doc/<span class="hljs-number">15</span>?routing=num<br>&#123;<br>  <span class="hljs-string">&quot;num&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;tags&quot;</span>: []<br>&#125;<br></code></pre></td></tr></table></figure><p>场景：在程序中，架构师可以手动指定已有数据的一个属性为路由值，好处是可以定制一类文档数据存储到一个分片中。缺点是设计不好，会造成数据倾斜。</p><p>所以，不同文档尽量放到不同的索引中。剩下的事情交给es集群自己处理。</p><h3 id="5-1-4主分片数量不可变"><a href="#5-1-4主分片数量不可变" class="headerlink" title="5.1.4主分片数量不可变"></a>5.1.4主分片数量不可变</h3><p>涉及到以往数据的查询搜索，所以一旦建立索引，主分片数不可变。<br>数据路由依赖主分片数，主分片数变动会造成数据的混乱</p><h2 id="5-2．-图解文档的增删改内部机制"><a href="#5-2．-图解文档的增删改内部机制" class="headerlink" title="5.2． 图解文档的增删改内部机制"></a>5.2． 图解文档的增删改内部机制</h2><p>增删改可以看做update,都是对数据的改动。一个改动请求发送到es集群，经历以下四个步骤：</p><p>（1）客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）</p><p>（2）coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）</p><p>（3）实际的node上的primary shard处理请求，然后将数据同步到replica node。</p><p>（4）coordinating node，如果发现primary node和所有replica node都搞定之后，就返回响应结果给客户端。</p><h2 id="5-3．图解文档的查询内部机制"><a href="#5-3．图解文档的查询内部机制" class="headerlink" title="5.3．图解文档的查询内部机制"></a>5.3．图解文档的查询内部机制</h2><p>1、客户端发送请求到任意一个node，成为coordinate node</p><p>2、coordinate node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，<br>让读请求负载均衡</p><p>3、接收请求的node返回document给coordinate node</p><p>4、coordinate node返回document给客户端</p><p>5、特殊情况：document如果还在建立索引过程中，可能只有primary shard有，任何一个replica shard都没有，如果轮询到一个replica<br>此时可能会导致无法读取到document，但是document完成索引建立之后，primary shard和replica shard就都有了。</p><h2 id="5-4．bulk-api奇特的json格式"><a href="#5-4．bulk-api奇特的json格式" class="headerlink" title="5.4．bulk api奇特的json格式"></a>5.4．bulk api奇特的json格式</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST /<span class="hljs-class">_bulk</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;meta&quot;</span>&#125;&#125;\<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;\<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&quot;action&quot;</span>: &#123;<span class="hljs-string">&quot;meta&quot;</span>&#125;&#125;\<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123;<span class="hljs-string">&quot;data&quot;</span>&#125;\n<br><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;action&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;create&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;field1&quot;</span>:<span class="hljs-string">&quot;java&quot;</span>,<br>            <span class="hljs-string">&quot;field1&quot;</span>:<span class="hljs-string">&quot;spring&quot;</span>,<br>        &#125;<br>    &#125;,<br>      &#123;<br>        <span class="hljs-string">&quot;action&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;method&quot;</span>:<span class="hljs-string">&quot;create&quot;</span><br>        &#125;,<br>        <span class="hljs-string">&quot;data&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">2</span>,<br>            <span class="hljs-string">&quot;field1&quot;</span>:<span class="hljs-string">&quot;java&quot;</span>,<br>            <span class="hljs-string">&quot;field1&quot;</span>:<span class="hljs-string">&quot;spring&quot;</span>,<br>        &#125;<br>    &#125;       <br>]<br><br></code></pre></td></tr></table></figure><p>1、bulk中的每个操作都可能要转发到不同的node的shard去执行</p><p>2、如果采用比较良好的json数组格式</p><p>允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p><p>（1）将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</p><p>（2）解析json数组里的每个json，对每个请求中的document进行路由</p><p>（3）为路由到同一个shard上的多个请求，创建一个请求数组。100请求中有10个是到P1.</p><p>（4）将这个请求数组序列化</p><p>（5）将序列化后的请求数组发送到对应的节点上去</p><p>3、耗费更多内存，更多的jvm gc开销</p><p>我们之前提到过bulk size最佳大小的那个问题，一般建议说在几千条那样，然后大小在10MB左右，所以说，可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p><p>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。</p><p>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多。</p><p>4、现在的奇特格式</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST /<span class="hljs-class">_bulk</span><br><span class="hljs-class"></span>&#123; <span class="hljs-string">&quot;delete&quot;</span>: &#123; <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;test_index&quot;</span>,  <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;5&quot;</span> &#125;&#125; \<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123; <span class="hljs-string">&quot;create&quot;</span>: &#123; <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;test_index&quot;</span>,  <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;14&quot;</span> &#125;&#125;\<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123; <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;test14&quot;</span> &#125;\<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123; <span class="hljs-string">&quot;update&quot;</span>: &#123; <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;test_index&quot;</span>,  <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>&#125; &#125;\<span class="hljs-class">n</span><br><span class="hljs-class"></span>&#123; <span class="hljs-string">&quot;doc&quot;</span> : &#123;<span class="hljs-string">&quot;test_field&quot;</span> : <span class="hljs-string">&quot;bulk test&quot;</span>&#125; &#125;\n<br></code></pre></td></tr></table></figure><p>（1）不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</p><p>（2）对每两个一组的json，读取meta，进行document路由</p><p>（3）直接将对应的json发送到node上去</p><p>5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能。</p><h1 id="6．-Mapping映射入门"><a href="#6．-Mapping映射入门" class="headerlink" title="6． Mapping映射入门"></a>6． Mapping映射入门</h1><h2 id="6-1．-什么是mapping映射"><a href="#6-1．-什么是mapping映射" class="headerlink" title="6.1． 什么是mapping映射"></a>6.1． 什么是mapping映射</h2><p>概念：自动或手动为index中的_doc建立的一种数据结构和相关配置，简称为mapping映射。</p><p>插入几条数据，让es自动为我们建立一个索引</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;post_date&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my first article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my first article in this website&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">11400</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;post_date&quot;</span>: <span class="hljs-string">&quot;2019-01-02&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my second article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my second article in this website&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">11400</span><br>&#125;<br> <br>PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;post_date&quot;</span>: <span class="hljs-string">&quot;2019-01-03&quot;</span>,<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my third article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my third article in this website&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">11400</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对比数据库建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> website(<br>     post_date <span class="hljs-type">date</span>,<br>     title <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),     <br>     content <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>),<br>     author_id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <br> );<br></code></pre></td></tr></table></figure><p>动态映射：dynamic mapping，自动为我们建立index，以及对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置。</p><p>重点：我们当然，后面会讲解，也可以手动在创建数据之前，先创建index，以及对应的mapping</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET  /website/_mapping/<br>&#123;<br>  <span class="hljs-string">&quot;website&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;author_id&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">long</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>content<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">          &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">          &quot;</span>fields<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">            &quot;</span>keyword<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">              &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>ignore_above<span class="hljs-string">&quot; : 256</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>post_date<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">          &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>title<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">          &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">          &quot;</span>fields<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">            &quot;</span>keyword<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">              &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>ignore_above<span class="hljs-string">&quot; : 256</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>尝试各种搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=2019        0条结果             <br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=2019-01-01           1条结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=post_date:2019-01-01     1条结果<br><span class="hljs-builtin-name">GET</span> /website/_search?<span class="hljs-attribute">q</span>=post_date:2019          0 条结果<br></code></pre></td></tr></table></figure><p>搜索结果为什么不一致，因为es自动建立mapping的时候，设置了不同的field不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样。</p><h2 id="6-2．-精确匹配与全文搜索的对比分析"><a href="#6-2．-精确匹配与全文搜索的对比分析" class="headerlink" title="6.2． 精确匹配与全文搜索的对比分析"></a>6.2． 精确匹配与全文搜索的对比分析</h2><h3 id="6-2-1-exact-value-精确匹配"><a href="#6-2-1-exact-value-精确匹配" class="headerlink" title="6.2.1 exact value 精确匹配"></a>6.2.1 exact value 精确匹配</h3><p>2019-01-01，exact value，搜索的时候，必须输入2019-01-01，才能搜索出来</p><p>如果你输入一个01，是搜索不出来的</p><p>select * from book where name= ‘java’</p><h3 id="6-2-2-full-text-全文检索"><a href="#6-2-2-full-text-全文检索" class="headerlink" title="6.2.2 full text 全文检索"></a>6.2.2 full text 全文检索</h3><p>搜“笔记电脑”，笔记本电脑词条会不会出现。</p><p>select * from book where name like ‘%java%’</p><p>（1）缩写 vs. 全称：cn vs. china</p><p>（2）格式转化：like liked likes</p><p>（3）大小写：Tom vs tom</p><p>（4）同义词：like vs love</p><p>2019-01-01，2019 01 01，搜索2019，或者01，都可以搜索出来</p><p>china，搜索cn，也可以将china搜索出来</p><p>likes，搜索like，也可以将likes搜索出来</p><p>Tom，搜索tom，也可以将Tom搜索出来</p><p>like，搜索love，同义词，也可以将like搜索出来</p><p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配。深入 NPL,自然语义处理。</p><h2 id="6-3．-全文检索下倒排索引核心原理快速揭秘"><a href="#6-3．-全文检索下倒排索引核心原理快速揭秘" class="headerlink" title="6.3． 全文检索下倒排索引核心原理快速揭秘"></a>6.3． 全文检索下倒排索引核心原理快速揭秘</h2><p>doc1：I really liked my small dogs, and I think my mom also liked them.</p><p>doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</p><h4 id="分词，初步的倒排索引的建立"><a href="#分词，初步的倒排索引的建立" class="headerlink" title="分词，初步的倒排索引的建立"></a>分词，初步的倒排索引的建立</h4><table><thead><tr><th>term</th><th><strong>doc1</strong></th><th><strong>doc2</strong></th></tr></thead><tbody><tr><td><strong>I</strong></td><td>*</td><td>*</td></tr><tr><td><strong>really</strong></td><td>*</td><td></td></tr><tr><td><strong>liked</strong></td><td>*</td><td>*</td></tr><tr><td><strong>my</strong></td><td>*</td><td>*</td></tr><tr><td><strong>small</strong></td><td>*</td><td></td></tr><tr><td><strong>dogs</strong></td><td>*</td><td></td></tr><tr><td><strong>and</strong></td><td>*</td><td></td></tr><tr><td><strong>think</strong></td><td>*</td><td></td></tr><tr><td><strong>mom</strong></td><td>*</td><td>*</td></tr><tr><td><strong>also</strong></td><td>*</td><td></td></tr><tr><td><strong>them</strong></td><td>*</td><td></td></tr><tr><td><strong>He</strong></td><td></td><td>*</td></tr><tr><td><strong>never</strong></td><td></td><td>*</td></tr><tr><td><strong>any</strong></td><td></td><td>*</td></tr><tr><td><strong>so</strong></td><td></td><td>*</td></tr><tr><td><strong>hope</strong></td><td></td><td>*</td></tr><tr><td><strong>that</strong></td><td></td><td>*</td></tr><tr><td><strong>will</strong></td><td></td><td>*</td></tr><tr><td><strong>not</strong></td><td></td><td>*</td></tr><tr><td><strong>expect</strong></td><td></td><td>*</td></tr><tr><td><strong>me</strong></td><td></td><td>*</td></tr><tr><td><strong>to</strong></td><td></td><td>*</td></tr><tr><td><strong>him</strong></td><td></td><td>*</td></tr></tbody></table><p>演示了一下倒排索引最简单的建立的一个过程</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>mother like little dog，不可能有任何结果</p><p>mother</p><p>like</p><p>little</p><p>dog</p><p>这不是我们想要的结果。同义词mom\mother在我们人类看来是一样。想进行标准化操作。</p><h4 id="重建倒排索引"><a href="#重建倒排索引" class="headerlink" title="重建倒排索引"></a>重建倒排索引</h4><p>normalization正规化，建立倒排索引的时候，会执行一个操作，也就是说对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率</p><p>时态的转换，单复数的转换，同义词的转换，大小写的转换</p><p>mom ―&gt; mother</p><p>liked ―&gt; like</p><p>small ―&gt; little</p><p>dogs ―&gt; dog</p><p>重新建立倒排索引，加入normalization，再次用mother liked little dog搜索，就可以搜索到了</p><table><thead><tr><th><strong>word</strong></th><th><strong>doc1</strong></th><th><strong>doc2</strong></th><th><strong>normalization</strong></th></tr></thead><tbody><tr><td><strong>I</strong></td><td>*</td><td>*</td><td></td></tr><tr><td><strong>really</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>like</strong></td><td>*</td><td>*</td><td>liked ―&gt; like</td></tr><tr><td><strong>my</strong></td><td>*</td><td>*</td><td></td></tr><tr><td><strong>little</strong></td><td>*</td><td></td><td>small ―&gt; little</td></tr><tr><td><strong>dog</strong></td><td>*</td><td></td><td>dogs ―&gt; dog</td></tr><tr><td><strong>and</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>think</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>mother</strong></td><td>*</td><td>*</td><td>mom ―&gt; mother</td></tr><tr><td><strong>also</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>them</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>He</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>never</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>any</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>so</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>hope</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>that</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>will</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>not</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>expect</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>me</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>to</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>him</strong></td><td></td><td>*</td><td></td></tr></tbody></table><h4 id="重新搜索"><a href="#重新搜索" class="headerlink" title="重新搜索"></a>重新搜索</h4><p>搜索：mother liked  little dog，</p><p>对搜索条件经行分词 normalization</p><p>mother</p><p>liked  -》like</p><p>little</p><p>dog</p><p>doc1和doc2都会搜索出来</p><h2 id="6-4-分词器-analyzer"><a href="#6-4-分词器-analyzer" class="headerlink" title="6.4. 分词器 analyzer"></a>6.4. 分词器 analyzer</h2><h3 id="6-4-1什么是分词器-analyzer"><a href="#6-4-1什么是分词器-analyzer" class="headerlink" title="6.4.1什么是分词器 analyzer"></a>6.4.1什么是分词器 analyzer</h3><p>作用：切分词语，normalization（提升recall召回率）</p><p>给你一段句子，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换）</p><p>recall，召回率：搜索的时候，增加能够搜索到的结果的数量</p><p>analyzer 组成部分：</p><p>1、character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<span>hello<span> –&gt; hello），&amp; –&gt; and（I&amp;you –&gt; I and you）</p><p>2、tokenizer：分词，hello you and me –&gt; hello, you, and, me</p><p>3、token filter：lowercase，stop word，synonymom，dogs –&gt; dog，liked –&gt; like，Tom –&gt; tom，a/the/an –&gt; 干掉，mother –&gt; mom，small –&gt; little</p><p>stop word 停用词： 了 的 呢。</p><p>一个分词器，很重要，将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引。</p><h3 id="6-4-2内置分词器的介绍"><a href="#6-4-2内置分词器的介绍" class="headerlink" title="6.4.2内置分词器的介绍"></a>6.4.2内置分词器的介绍</h3><p>例句：Set the shape to semi-transparent by calling set_trans(5)</p><p>standard analyzer标准分词器：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</p><p>simple analyzer简单分词器：set, the, shape, to, semi, transparent, by, calling, set, trans</p><p>whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</p><p>language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</p><p>官方文档：</p><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.4/analysis-analyzers.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.4/analysis-analyzers.html</a></p><h2 id="6-5-query-string根据字段分词策略"><a href="#6-5-query-string根据字段分词策略" class="headerlink" title="6.5. query string根据字段分词策略"></a>6.5. query string根据字段分词策略</h2><h3 id="6-5-1query-string分词"><a href="#6-5-1query-string分词" class="headerlink" title="6.5.1query string分词"></a>6.5.1query string分词</h3><p>query string必须以和index建立时相同的analyzer进行分词</p><p>query string对exact value和full text的区别对待</p><p>如： date：exact value 精确匹配</p><p>​         text: full text 全文检索</p><h3 id="6-5-2测试分词器"><a href="#6-5-2测试分词器" class="headerlink" title="6.5.2测试分词器"></a>6.5.2测试分词器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;Text to analyze 80&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;tokens&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">4</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">0</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;to&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">5</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">7</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">1</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;analyze&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">15</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">2</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;token&quot;</span> : <span class="hljs-string">&quot;80&quot;</span>,<br>      <span class="hljs-attr">&quot;start_offset&quot;</span> : <span class="hljs-number">16</span>,<br>      <span class="hljs-attr">&quot;end_offset&quot;</span> : <span class="hljs-number">18</span>,<br>      <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;&lt;NUM&gt;&quot;</span>,<br>      <span class="hljs-attr">&quot;position&quot;</span> : <span class="hljs-number">3</span><br>    &#125;<br>  ]<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>token 实际存储的term 关键字</p><p>position 在此词条在原文本中的位置</p><p>start_offset/end_offset字符在原始字符串中的位置</p><h2 id="6-6．-mapping回顾总结"><a href="#6-6．-mapping回顾总结" class="headerlink" title="6.6． mapping回顾总结"></a>6.6． mapping回顾总结</h2><p>（1）往es里面直接插入数据，es会自动建立索引，同时建立对应的mapping。(dynamic mapping)</p><p>（2）mapping中就自动定义了每个field的数据类型</p><p>（3）不同的数据类型（比如说text和date），可能有的是exact value，有的是full text</p><p>（4）exact value，在建立倒排索引的时候，分词的时候，是将整个值一起作为一个关键词建立到倒排索引中的；full text，会经历各种各样的处理，分词，normaliztion（时态转换，同义词转换，大小写转换），才会建立到倒排索引中。</p><p>（5）同时呢，exact value和full text类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索</p><p>（6）可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和tmapping，自己对各个field进行设置，包括数据类型，包括索引行为，包括分词器，等。</p><h2 id="6-7．-mapping的核心数据类型以及dynamic-mapping"><a href="#6-7．-mapping的核心数据类型以及dynamic-mapping" class="headerlink" title="6.7． mapping的核心数据类型以及dynamic mapping"></a>6.7． mapping的核心数据类型以及dynamic mapping</h2><h3 id="6-7-1-核心的数据类型"><a href="#6-7-1-核心的数据类型" class="headerlink" title="6.7.1 核心的数据类型"></a>6.7.1 核心的数据类型</h3><p>string :text and keyword</p><p>byte，short，integer，long,float，double</p><p>boolean</p><p>date</p><p>详见：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-types.html</a></p><p>下图是ES7.3核心的字段类型如下：</p><h3 id="6-7-2-dynamic-mapping-推测规则"><a href="#6-7-2-dynamic-mapping-推测规则" class="headerlink" title="6.7.2 dynamic mapping 推测规则"></a>6.7.2 dynamic mapping 推测规则</h3><p>true or false   –&gt; boolean</p><p>123     –&gt; long</p><p>123.45      –&gt; double</p><p>2019-01-01  –&gt; date</p><p>“hello world”   –&gt; text/keywod</p><h3 id="6-7-3-查看mapping"><a href="#6-7-3-查看mapping" class="headerlink" title="6.7.3 查看mapping"></a>6.7.3 查看mapping</h3><p>GET /index/_mapping/</p><h2 id="6-8-手动管理mapping"><a href="#6-8-手动管理mapping" class="headerlink" title="6.8 手动管理mapping"></a>6.8 手动管理mapping</h2><h3 id="6-4-1查询所有索引的映射"><a href="#6-4-1查询所有索引的映射" class="headerlink" title="6.4.1查询所有索引的映射"></a>6.4.1查询所有索引的映射</h3><p>GET /_mapping</p><h3 id="6-4-2-创建映射-！！"><a href="#6-4-2-创建映射-！！" class="headerlink" title="6.4.2 创建映射 ！！"></a>6.4.2 创建映射 ！！</h3><p>创建索引后，应该立即手动创建映射</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sqf">PUT book/<span class="hljs-variable">_mapping</span><br>&#123;<br><span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>                  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>            &#125;,<br>           <span class="hljs-string">&quot;description&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;english&quot;</span>,<br>              <span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;english&quot;</span><br>           &#125;,<br>           <span class="hljs-string">&quot;pic&quot;</span>:&#123;<br>             <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>             <span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-literal">false</span><br>           &#125;,<br>           <span class="hljs-string">&quot;studymodel&quot;</span>:&#123;<br>             <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>           &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Text-文本类型"><a href="#Text-文本类型" class="headerlink" title="Text 文本类型"></a>Text 文本类型</h4><p>1）analyzer</p><p>通过analyzer属性指定分词器。</p><p>上边指定了analyzer是指在索引和搜索都使用english，如果单独想定义搜索时使用的分词器则可以通过search_analyzer属性。</p><p>2）index</p><p>index属性指定是否索引。</p><p>默认为index=true，即要进行索引，只有进行索引才可以从索引库搜索到。</p><p>但是也有一些内容不需要索引，比如：商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置为false。</p><p>删除索引，重新创建映射，将pic的index设置为false，尝试根据pic去搜索，结果搜索不到数据。</p><p>3）store</p><p>是否在source之外存储，每个文档索引后会在 ES中保存一份原始文档，存放在”_source”中，一般情况下不需要设置store为true，因为在_source中已经有一份原始文档了。</p><p>测试</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sqf">PUT book/<span class="hljs-variable">_mapping</span><br>&#123;<br><span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>           <span class="hljs-string">&quot;name&quot;</span>: &#123;<br>                  <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>            &#125;,<br>           <span class="hljs-string">&quot;description&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>              <span class="hljs-string">&quot;analyzer&quot;</span>:<span class="hljs-string">&quot;english&quot;</span>,<br>              <span class="hljs-string">&quot;search_analyzer&quot;</span>:<span class="hljs-string">&quot;english&quot;</span><br>           &#125;,<br>           <span class="hljs-string">&quot;pic&quot;</span>:&#123;<br>             <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>             <span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-literal">false</span><br>           &#125;,<br>           <span class="hljs-string">&quot;studymodel&quot;</span>:&#123;<br>             <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span><br>           &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入文档：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/book/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,<br>  <span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,<br>  <span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;</span>,<br>  <span class="hljs-string">&quot;studymodel&quot;</span>:<span class="hljs-string">&quot;201002&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Get /book/_search?q=name:开发</p><p>Get  /book/_search?q=description:开发</p><p>Get /book/_search?q=pic:group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg</p><p>Get /book/_search?q=studymodel:201002</p><p>通过测试发现：name和description都支持全文检索，pic不可作为查询条件。</p><h4 id="keyword关键字字段"><a href="#keyword关键字字段" class="headerlink" title="keyword关键字字段"></a>keyword关键字字段</h4><p>目前已经取代了”index”: false。上边介绍的text文本字段在映射时要设置分词器，keyword字段为关键字字段，通常搜索keyword是按照整体搜索，所以创建keyword字段的索引时是不进行分词的，比如：邮政编码、手机号码、身份证等。keyword字段通常用于过虑、排序、聚合等。</p><h4 id="date日期类型"><a href="#date日期类型" class="headerlink" title="date日期类型"></a>date日期类型</h4><p>日期类型不用设置分词器。</p><p>通常日期类型的字段用于排序。</p><p>format</p><p>通过format设置日期格式</p><p>例子：</p><p>下边的设置允许date字段存储年月日时分秒、年月日及毫秒三种格式。</p><p>{</p><p>​    “properties”: {</p><p>​        “timestamp”: {</p><p>​          “type”:   “date”,</p><p>​          “format”: “yyyy-MM-dd HH:mm:ss||yyyy-MM-dd”</p><p>​        }</p><p>​      }</p><p>}</p><p>插入文档：</p><p>Post book/doc/3</p><p>{</p><p>“name”: “spring开发基础”,</p><p>“description”: “spring 在java领域非常流行，java程序员都在用。”,</p><p>“studymodel”: “201001”,</p><p>“pic”:”group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg”,</p><p>“timestamp”:”2018-07-04 18:28:58”</p><p>}</p><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><p>下边是ES支持的数值类型</p><p>1、尽量选择范围小的类型，提高搜索效率</p><p>2、对于浮点数尽量用比例因子，比如一个价格字段，单位为元，我们将比例因子设置为100这在ES中会按 分 存储，映射如下：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;scaled_float&quot;</span>,<br>        <span class="hljs-string">&quot;scaling_factor&quot;</span>: <span class="hljs-number">100</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>由于比例因子为100，如果我们输入的价格是23.45则ES中会将23.45乘以100存储在ES中。</p><p>如果输入的价格是23.456，ES会将23.456乘以100再取一个接近原始值的数，得出2346。</p><p>使用比例因子的好处是整型比浮点型更易压缩，节省磁盘空间。</p><p>如果比例因子不适合，则从下表选择范围小的去用：</p><p>更新已有映射，并插入文档：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT book<span class="hljs-regexp">/doc/</span><span class="hljs-number">3</span><br>&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,<br><span class="hljs-string">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,<br> <span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;</span>,<br> <span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2018-07-04 18:28:58&quot;</span>,<br> <span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-number">34.6</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4-3修改映射"><a href="#6-4-3修改映射" class="headerlink" title="6.4.3修改映射"></a>6.4.3修改映射</h3><p>只能创建index时手动建立mapping，或者新增field mapping，但是不能update field mapping。</p><p>因为已有数据按照映射早已分词存储好。如果修改，那这些存量数据怎么办。</p><p>新增一个字段mapping</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada">PUT /book/_mapping/<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;new_field&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;type&quot;</span> :    &quot;<span class="hljs-type">text</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">     &quot;</span>index<span class="hljs-string">&quot;:    &quot;</span><span class="hljs-literal">false</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>如果修改mapping,会报错</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">PUT /book/_mapping/<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;studymodel&quot;</span> : &#123;<br>     <span class="hljs-string">&quot;type&quot;</span> :    &quot;<span class="hljs-type">keyword</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;error&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;root_cause&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;illegal_argument_exception&quot;</span>,<br>        <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;mapper [studymodel] of different type, current_type [text], merged_type [keyword]&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;illegal_argument_exception&quot;</span>,<br>    <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;mapper [studymodel] of different type, current_type [text], merged_type [keyword]&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">400</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4-4删除映射"><a href="#6-4-4删除映射" class="headerlink" title="6.4.4删除映射"></a>6.4.4删除映射</h3><p>通过删除索引来删除映射。</p><h2 id="6-9-复杂数据类型"><a href="#6-9-复杂数据类型" class="headerlink" title="6.9 复杂数据类型"></a>6.9 复杂数据类型</h2><h3 id="6-9-1-multivalue-field"><a href="#6-9-1-multivalue-field" class="headerlink" title="6.9 .1 multivalue field"></a>6.9 .1 multivalue field</h3><p>{ “tags”: [ “tag1”, “tag2” ]}</p><p>建立索引时与string是一样的，数据类型不能混</p><h3 id="6-9-2-empty-field"><a href="#6-9-2-empty-field" class="headerlink" title="6.9 .2. empty field"></a>6.9 .2. empty field</h3><p>null，[]，[null]</p><h3 id="6-9-3-object-field"><a href="#6-9-3-object-field" class="headerlink" title="6.9 .3. object field"></a>6.9 .3. object field</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/company/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;china&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;guangdong&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;guangzhou&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>  <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">27</span>,<br>  <span class="hljs-string">&quot;join_date&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>address：object类型</p><p>查询映射</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /company/_mapping<br>&#123;<br>  <span class="hljs-string">&quot;company&quot;</span> : &#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span> : &#123;<br>      <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;address&quot;</span> : &#123;<br>          <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;city&quot;</span> : &#123;<br>              <span class="hljs-string">&quot;type&quot;</span> : &quot;<span class="hljs-type">text</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>fields<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>keyword<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                  &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                  &quot;</span>ignore_above<span class="hljs-string">&quot; : 256</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>country<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">              &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>fields<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>keyword<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                  &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                  &quot;</span>ignore_above<span class="hljs-string">&quot; : 256</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>province<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">              &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>fields<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>keyword<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                  &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;,</span><br><span class="hljs-string">                  &quot;</span>ignore_above<span class="hljs-string">&quot; : 256</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>age<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">          &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>long<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>join_date<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">          &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;,</span><br><span class="hljs-string">        &quot;</span>name<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">          &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;,</span><br><span class="hljs-string">          &quot;</span>fields<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">            &quot;</span>keyword<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">              &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>ignore_above<span class="hljs-string">&quot; : 256</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">          &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>object</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;country&quot;</span>: <span class="hljs-string">&quot;china&quot;</span>,<br>    <span class="hljs-attr">&quot;province&quot;</span>: <span class="hljs-string">&quot;guangdong&quot;</span>,<br>    <span class="hljs-attr">&quot;city&quot;</span>: <span class="hljs-string">&quot;guangzhou&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;jack&quot;</span>,<br>  <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">27</span>,<br>  <span class="hljs-attr">&quot;join_date&quot;</span>: <span class="hljs-string">&quot;2017-01-01&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>底层存储格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;name&quot;</span>:            [jack],<br>    <span class="hljs-attr">&quot;age&quot;</span>:          [<span class="hljs-number">27</span>],<br>    <span class="hljs-attr">&quot;join_date&quot;</span>:      [<span class="hljs-number">2017</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span>],<br>    <span class="hljs-attr">&quot;address.country&quot;</span>:         [china],<br>    <span class="hljs-attr">&quot;address.province&quot;</span>:   [guangdong],<br>    <span class="hljs-attr">&quot;address.city&quot;</span>:  [guangzhou]<br>&#125;<br></code></pre></td></tr></table></figure><p>对象数组：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;authors&quot;</span>: [<br>        &#123; <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">26</span>, <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Jack White&quot;</span>&#125;,<br>        &#123; <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">55</span>, <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Tom Jones&quot;</span>&#125;,<br>        &#123; <span class="hljs-attr">&quot;age&quot;</span>: <span class="hljs-number">39</span>, <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Kitty Smith&quot;</span>&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>存储格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;authors.age&quot;</span>:    [<span class="hljs-number">26</span>, <span class="hljs-number">55</span>, <span class="hljs-number">39</span>],<br>    <span class="hljs-attr">&quot;authors.name&quot;</span>:   [jack, white, tom, jones, kitty, smith]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7．-索引Index入门"><a href="#7．-索引Index入门" class="headerlink" title="7． 索引Index入门"></a>7． 索引Index入门</h1><h2 id="7-1．-索引管理"><a href="#7-1．-索引管理" class="headerlink" title="7.1． 索引管理"></a>7.1． 索引管理</h2><h3 id="7-1-1-为什么我们要手动创建索引"><a href="#7-1-1-为什么我们要手动创建索引" class="headerlink" title="7.1.1. 为什么我们要手动创建索引"></a>7.1.1. 为什么我们要手动创建索引</h3><p>直接put数据 PUT index/_doc/1,es会自动生成索引，并建立动态映射dynamic mapping。</p><p>在生产上，我们需要自己手动建立索引和映射，为了更好地管理索引。就像数据库的建表语句一样。</p><h3 id="7-1-2-索引管理"><a href="#7-1-2-索引管理" class="headerlink" title="7.1.2. 索引管理"></a>7.1.2. 索引管理</h3><h4 id="7-1-2-1-创建索引"><a href="#7-1-2-1-创建索引" class="headerlink" title="7.1.2.1 创建索引"></a>7.1.2.1 创建索引</h4><p>创建索引的语法</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">PUT <span class="hljs-string">/index</span><br>&#123;<br>    <span class="hljs-string">&quot;settings&quot;</span>: &#123; <span class="hljs-string">...</span> any settings <span class="hljs-string">...</span> &#125;,<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>       <span class="hljs-string">&quot;properties&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;field1&quot;</span> : &#123; <span class="hljs-string">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span> &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;aliases&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default_index&quot;</span>: &#123;&#125;<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs dts">PUT /<span class="hljs-class">my_index</span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: <span class="hljs-number">1</span><br>  &#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;field1&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;field2&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aliases&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;default_index&quot;</span>: &#123;&#125;<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>索引别名</strong></p><p>插入数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br><span class="hljs-string">&quot;field1&quot;</span>:<span class="hljs-string">&quot;java&quot;</span>,<br><span class="hljs-string">&quot;field2&quot;</span>:<span class="hljs-string">&quot;js&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>查询数据 都可以查到</p><p>GET /my_index/_doc/1</p><p>GET /default_index/_doc/1</p><h4 id="7-1-2-2查询索引"><a href="#7-1-2-2查询索引" class="headerlink" title="7.1.2.2查询索引"></a>7.1.2.2查询索引</h4><p>GET /my_index/_mapping</p><p>GET /my_index/_setting</p><h4 id="7-1-2-3修改索引"><a href="#7-1-2-3修改索引" class="headerlink" title="7.1.2.3修改索引"></a>7.1.2.3修改索引</h4><p>修改副本数</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console">PUT /my_index/_settings<br>&#123;<br>    &quot;index&quot; : &#123;<br>        &quot;number_of_replicas&quot; : 2<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-1-2-4删除索引"><a href="#7-1-2-4删除索引" class="headerlink" title="7.1.2.4删除索引"></a>7.1.2.4删除索引</h4><p>DELETE /my_index</p><p>DELETE /index_one,index_two</p><p>DELETE /index_*</p><p>DELETE /_all</p><p>为了安全起见，防止恶意删除索引，删除时必须指定索引名：</p><p>elasticsearch.yml</p><p>action.destructive_requires_name: true</p><h2 id="7-2．-定制分词器"><a href="#7-2．-定制分词器" class="headerlink" title="7.2． 定制分词器"></a>7.2． 定制分词器</h2><h3 id="7-2-1-默认的分词器"><a href="#7-2-1-默认的分词器" class="headerlink" title="7.2.1 默认的分词器"></a>7.2.1 默认的分词器</h3><p>standard</p><p>分词三个组件，character filter，tokenizer，token filter</p><p>standard tokenizer：以单词边界进行切分</p><p>standard token filter：什么都不做</p><p>lowercase token filter：将所有字母转换为小写</p><p>stop token filer（默认被禁用）：移除停用词，比如a the it等等</p><h3 id="7-2-2-修改分词器的设置"><a href="#7-2-2-修改分词器的设置" class="headerlink" title="7.2.2 修改分词器的设置"></a>7.2.2 修改分词器的设置</h3><p>启用english停用词token filter</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dts">PUT /<span class="hljs-class">my_index</span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;es_std&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>          <span class="hljs-string">&quot;stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试分词</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/my_index/</span>_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;a dog is in the house&quot;</span><br>&#125;<br><br>GET <span class="hljs-regexp">/my_index/</span>_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;es_std&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;a dog is in the house&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-3-定制化自己的分词器"><a href="#7-2-3-定制化自己的分词器" class="headerlink" title="7.2.3 定制化自己的分词器"></a>7.2.3 定制化自己的分词器</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">PUT</span> /my_index<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;analysis&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;char_filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;&amp;_to_and&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;mapping&quot;</span>,<br>          <span class="hljs-string">&quot;mappings&quot;</span>: [<span class="hljs-string">&quot;&amp;=&gt; and&quot;</span>]<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_stopwords&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;stop&quot;</span>,<br>          <span class="hljs-string">&quot;stopwords&quot;</span>: [<span class="hljs-string">&quot;the&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>]<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;my_analyzer&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br>          <span class="hljs-string">&quot;char_filter&quot;</span>: [<span class="hljs-string">&quot;html_strip&quot;</span>, <span class="hljs-string">&quot;&amp;_to_and&quot;</span>],<br>          <span class="hljs-string">&quot;tokenizer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>          <span class="hljs-string">&quot;filter&quot;</span>: [<span class="hljs-string">&quot;lowercase&quot;</span>, <span class="hljs-string">&quot;my_stopwords&quot;</span>]<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-type">GET</span> /my_index/_analyze<br>&#123;<br>  <span class="hljs-comment">&quot;analyzer&quot;</span>: <span class="hljs-comment">&quot;my_analyzer&quot;</span>,<br>  <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;tom&amp;jerry are a friend in the house, &lt;a&gt;, HAHA!!&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>设置字段使用自定义分词器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_mapping/<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;content&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;my_analyzer&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-3-type底层结构及弃用原因"><a href="#7-3-type底层结构及弃用原因" class="headerlink" title="7.3 type底层结构及弃用原因"></a>7.3 type底层结构及弃用原因</h2><h3 id="7-3-1type是什么"><a href="#7-3-1type是什么" class="headerlink" title="7.3.1type是什么"></a>7.3.1type是什么</h3><p>type，是一个index中用来区分类似的数据的，类似的数据，但是可能有不同的fields，而且有不同的属性来控制索引建立、分词器.<br>field的value，在底层的lucene中建立索引的时候，全部是opaque bytes类型，不区分类型的。<br>lucene是没有type的概念的，在document中，实际上将type作为一个document的field来存储，即_type，es通过_type来进行type的过滤和筛选。</p><h3 id="7-3-2es中不同type存储机制"><a href="#7-3-2es中不同type存储机制" class="headerlink" title="7.3.2es中不同type存储机制"></a>7.3.2es中不同type存储机制</h3><p>一个index中的多个type，实际上是放在一起存储的，因此一个index下，不能有多个type重名，而类型或者其他设置不同的，因为那样是无法处理的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;goods&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>         <span class="hljs-attr">&quot;electronic_goods&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>               <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>               &#125;,<br>               <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>               &#125;,<br>               <span class="hljs-attr">&quot;service_period&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>                   &#125;<br>                &#125;<br>         &#125;,<br>         <span class="hljs-attr">&quot;fresh_goods&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>               <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>               &#125;,<br>               <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>                  <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>               &#125;,<br>               <span class="hljs-attr">&quot;eat_period&quot;</span>: &#123;<br>              <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>               &#125;<br>                &#125;<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/goods/</span>electronic_goods/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;小米空调&quot;</span>,<br>  <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">1999.0</span>,<br>  <span class="hljs-string">&quot;service_period&quot;</span>: <span class="hljs-string">&quot;one year&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/goods/</span>fresh_goods/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;澳洲龙虾&quot;</span>,<br>  <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">199.0</span>,<br>  <span class="hljs-string">&quot;eat_period&quot;</span>: <span class="hljs-string">&quot;one week&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>es文档在底层的存储是这样子的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;goods&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;_type&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>          <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;false&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;<br>        <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>        &#125;<br>        <span class="hljs-string">&quot;service_period&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;eat_period&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span><br>        &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>底层数据存储格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;electronic_goods&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;小米空调&quot;</span>,<br>  <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">1999.0</span>,<br>  <span class="hljs-attr">&quot;service_period&quot;</span>: <span class="hljs-string">&quot;one year&quot;</span>,<br>  <span class="hljs-attr">&quot;eat_period&quot;</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;fresh_goods&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;澳洲龙虾&quot;</span>,<br>  <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">199.0</span>,<br>  <span class="hljs-attr">&quot;service_period&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">&quot;eat_period&quot;</span>: <span class="hljs-string">&quot;one week&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-3-type弃用"><a href="#7-3-3-type弃用" class="headerlink" title="7.3.3 type弃用"></a>7.3.3 type弃用</h3><p>同一索引下，不同type的数据存储其他type的field 大量空值，造成资源浪费。</p><p>所以，不同类型数据，要放到不同的索引中。</p><p>es9中，将会彻底删除type。</p><h2 id="7-4-定制dynamic-mapping"><a href="#7-4-定制dynamic-mapping" class="headerlink" title="7.4.定制dynamic mapping"></a>7.4.定制dynamic mapping</h2><h3 id="7-4-1定制dynamic策略"><a href="#7-4-1定制dynamic策略" class="headerlink" title="7.4.1定制dynamic策略"></a>7.4.1定制dynamic策略</h3><p>true：遇到陌生字段，就进行dynamic mapping</p><p>false：新检测到的字段将被忽略。这些字段将不会被索引，因此将无法搜索，但仍将出现在返回点击的源字段中。这些字段不会添加到映射中，必须显式添加新字段。</p><p>strict：遇到陌生字段，就报错</p><p>创建mapping</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">PUT /my_index<br>&#123;<br>    &quot;mappings&quot;: &#123;<br>      <span class="hljs-string">&quot;dynamic&quot;</span>: <span class="hljs-string">&quot;strict&quot;</span>,<br>       <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;title&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>        &#125;,<br>        &quot;<span class="hljs-selector-tag">address</span>&quot;: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;object&quot;</span>,<br>          <span class="hljs-string">&quot;dynamic&quot;</span>: <span class="hljs-string">&quot;true&quot;</span><br>        &#125;<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my article&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;guangdong&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;guangzhou&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;error&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;root_cause&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;strict_dynamic_mapping_exception&quot;</span>,<br>        <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;mapping set to strict, dynamic introduction of [content] within [_doc] is not allowed&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;strict_dynamic_mapping_exception&quot;</span>,<br>    <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;mapping set to strict, dynamic introduction of [content] within [_doc] is not allowed&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">400</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-2自定义-dynamic-mapping策略"><a href="#7-4-2自定义-dynamic-mapping策略" class="headerlink" title="7.4.2自定义 dynamic mapping策略"></a>7.4.2自定义 dynamic mapping策略</h3><p>es会根据传入的值，推断类型。</p><h4 id="date-detection-日期探测"><a href="#date-detection-日期探测" class="headerlink" title="date_detection 日期探测"></a>date_detection 日期探测</h4><p>默认会按照一定格式识别date，比如yyyy-MM-dd。但是如果某个field先过来一个2017-01-01的值，就会被自动dynamic mapping成date，后面如果再来一个”hello world”之类的值，就会报错。可以手动关闭某个type的date_detection，如果有需要，自己手动指定某个field为date类型。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs console">PUT /my_index<br>&#123;<br>    &quot;mappings&quot;: &#123;<br>      &quot;date_detection&quot;: false,<br>       &quot;properties&quot;: &#123;<br>        &quot;title&quot;: &#123;<br>          &quot;type&quot;: &quot;text&quot;<br>        &#125;,<br>        &quot;address&quot;: &#123;<br>          &quot;type&quot;: &quot;object&quot;,<br>          &quot;dynamic&quot;: &quot;true&quot;<br>        &#125;<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my article&quot;</span>,<br>  <span class="hljs-string">&quot;address&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;guangdong&quot;</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;guangzhou&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;post_date&quot;</span>:<span class="hljs-string">&quot;2019-09-10&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>查看映射</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/my_index/</span>_mapping<br></code></pre></td></tr></table></figure><h4 id="自定义日期格式"><a href="#自定义日期格式" class="headerlink" title="自定义日期格式"></a>自定义日期格式</h4><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console">PUT my_index<br>&#123;<br>  &quot;mappings&quot;: &#123;<br>    &quot;dynamic_date_formats&quot;: [&quot;MM/dd/yyyy&quot;]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs console">PUT my_index/_doc/1<br>&#123;<br>  &quot;create_date&quot;: &quot;09/25/2019&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="numeric-detection-数字探测"><a href="#numeric-detection-数字探测" class="headerlink" title="numeric_detection 数字探测"></a>numeric_detection 数字探测</h4><p>虽然json支持本机浮点和整数数据类型，但某些应用程序或语言有时可能将数字呈现为字符串。通常正确的解决方案是显式地映射这些字段，但是可以启用数字检测（默认情况下禁用）来自动完成这些操作。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs console">PUT my_index<br>&#123;<br>  &quot;mappings&quot;: &#123;<br>    &quot;numeric_detection&quot;: true<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT my_index<span class="hljs-regexp">/_doc/</span><span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;my_float&quot;</span>:   <span class="hljs-string">&quot;1.0&quot;</span>, <br>  <span class="hljs-string">&quot;my_integer&quot;</span>: <span class="hljs-string">&quot;1&quot;</span> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-3定制自己的dynamic-mapping-template"><a href="#7-4-3定制自己的dynamic-mapping-template" class="headerlink" title="7.4.3定制自己的dynamic mapping template"></a>7.4.3定制自己的dynamic mapping template</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts">PUT /<span class="hljs-class">my_index</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;dynamic_templates&quot;</span>: [<br>                &#123; <br>                  <span class="hljs-string">&quot;en&quot;</span>: &#123;<br>                      <span class="hljs-string">&quot;match&quot;</span>:              <span class="hljs-string">&quot;*_en&quot;</span>, <br>                      <span class="hljs-string">&quot;match_mapping_type&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<br>                      <span class="hljs-string">&quot;mapping&quot;</span>: &#123;<br>                          <span class="hljs-string">&quot;type&quot;</span>:           <span class="hljs-string">&quot;text&quot;</span>,<br>                          <span class="hljs-string">&quot;analyzer&quot;</span>:       <span class="hljs-string">&quot;english&quot;</span><br>                      &#125;<br>                &#125;                  <br>            &#125;<br>        ]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;this is my first article&quot;</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;title_en&quot;</span>: <span class="hljs-string">&quot;this is my first article&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> my_index/_search?<span class="hljs-attribute">q</span>=first<br><span class="hljs-builtin-name">GET</span> my_index/_search?<span class="hljs-attribute">q</span>=is<br></code></pre></td></tr></table></figure><p>title没有匹配到任何的dynamic模板，默认就是standard分词器，不会过滤停用词，is会进入倒排索引，用is来搜索是可以搜索到的</p><p>title_en匹配到了dynamic模板，就是english分词器，会过滤停用词，is这种停用词就会被过滤掉，用is来搜索就搜索不到了</p><h4 id="模板写法"><a href="#模板写法" class="headerlink" title="模板写法"></a>模板写法</h4><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs console">PUT my_index<br>&#123;<br>  &quot;mappings&quot;: &#123;<br>    &quot;dynamic_templates&quot;: [<br>      &#123;<br>        &quot;integers&quot;: &#123;<br>          &quot;match_mapping_type&quot;: &quot;long&quot;,<br>          &quot;mapping&quot;: &#123;<br>            &quot;type&quot;: &quot;integer&quot;<br>          &#125;<br>        &#125;<br>      &#125;,<br>      &#123;<br>        &quot;strings&quot;: &#123;<br>          &quot;match_mapping_type&quot;: &quot;string&quot;,<br>          &quot;mapping&quot;: &#123;<br>            &quot;type&quot;: &quot;text&quot;,<br>            &quot;fields&quot;: &#123;<br>              &quot;raw&quot;: &#123;<br>                &quot;type&quot;:  &quot;keyword&quot;,<br>                &quot;ignore_above&quot;: 256<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>模板参数</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs console">&quot;match&quot;:   &quot;long_*&quot;,<br>&quot;unmatch&quot;: &quot;*_text&quot;,<br>&quot;match_mapping_type&quot;: &quot;string&quot;,<br>&quot;path_match&quot;:   &quot;name.*&quot;,<br>&quot;path_unmatch&quot;: &quot;*.middle&quot;,<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;match_pattern&quot;</span>: <span class="hljs-string">&quot;regex&quot;</span>,<br><span class="hljs-string">&quot;match&quot;</span>: <span class="hljs-string">&quot;^profit_\d+$&quot;</span><br></code></pre></td></tr></table></figure><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>1结构化搜索</p><p>默认情况下，elasticsearch将字符串字段映射为带有子关键字字段的文本字段。但是，如果只对结构化内容进行索引，而对全文搜索不感兴趣，则可以仅将“字段”映射为“关键字”。请注意，这意味着为了搜索这些字段，必须搜索索引所用的完全相同的值。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console">&#123;<br>       &quot;strings_as_keywords&quot;: &#123;<br>         &quot;match_mapping_type&quot;: &quot;string&quot;,<br>         &quot;mapping&quot;: &#123;<br>           &quot;type&quot;: &quot;keyword&quot;<br>         &#125;<br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>2仅搜索</p><p>与前面的示例相反，如果您只关心字符串字段的全文搜索，并且不打算对字符串字段运行聚合、排序或精确搜索，您可以告诉弹性搜索将其仅映射为文本字段（这是5之前的默认行为）</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs console">&#123;<br>       &quot;strings_as_text&quot;: &#123;<br>         &quot;match_mapping_type&quot;: &quot;string&quot;,<br>         &quot;mapping&quot;: &#123;<br>           &quot;type&quot;: &quot;text&quot;<br>         &#125;<br>       &#125;<br>     &#125;<br></code></pre></td></tr></table></figure><p>3norms 不关心评分</p><p>norms是指标时间的评分因素。如果您不关心评分，例如，如果您从不按评分对文档进行排序，则可以在索引中禁用这些评分因子的存储并节省一些空间。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs console">&#123;<br>        &quot;strings_as_keywords&quot;: &#123;<br>          &quot;match_mapping_type&quot;: &quot;string&quot;,<br>          &quot;mapping&quot;: &#123;<br>            &quot;type&quot;: &quot;text&quot;,<br>            &quot;norms&quot;: false,<br>            &quot;fields&quot;: &#123;<br>              &quot;keyword&quot;: &#123;<br>                &quot;type&quot;: &quot;keyword&quot;,<br>                &quot;ignore_above&quot;: 256<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h2 id="7-5．-零停机重建索引"><a href="#7-5．-零停机重建索引" class="headerlink" title="7.5． 零停机重建索引"></a>7.5． 零停机重建索引</h2><h3 id="7-5-1零停机重建索引"><a href="#7-5-1零停机重建索引" class="headerlink" title="7.5.1零停机重建索引"></a>7.5.1零停机重建索引</h3><p>场景：</p><p>一个field的设置是不能被修改的，如果要修改一个Field，那么应该重新按照新的mapping，建立一个index，然后将数据批量查询出来，重新用bulk api写入index中。</p><p>批量查询的时候，建议采用scroll api，并且采用多线程并发的方式来reindex数据，每次scoll就查询指定日期的一段数据，交给一个线程即可。</p><p>(1)一开始，依靠dynamic mapping，插入数据，但是不小心有些数据是2019-09-10这种日期格式的，所以title这种field被自动映射为了date类型，实际上它应该是string类型的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;2019-09-10&quot;</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;2019-09-11&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（2）当后期向索引中加入string类型的title值的时候，就会报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my first article&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;error&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;root_cause&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;mapper_parsing_exception&quot;</span>,<br>        <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;failed to parse [title]&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;mapper_parsing_exception&quot;</span>,<br>    <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;failed to parse [title]&quot;</span>,<br>    <span class="hljs-attr">&quot;caused_by&quot;</span>: &#123;<br>      <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;illegal_argument_exception&quot;</span>,<br>      <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;Invalid format: \&quot;my first article\&quot;&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">400</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（3）如果此时想修改title的类型，是不可能的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_mapping<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;title&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>   &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;error&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;root_cause&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;illegal_argument_exception&quot;</span>,<br>        <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;mapper [title] of different type, current_type [date], merged_type [text]&quot;</span><br>      &#125;<br>    ],<br>    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;illegal_argument_exception&quot;</span>,<br>    <span class="hljs-attr">&quot;reason&quot;</span>: <span class="hljs-string">&quot;mapper [title] of different type, current_type [date], merged_type [text]&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-number">400</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（4）此时，唯一的办法，就是进行reindex，也就是说，重新建立一个索引，将旧索引的数据查询出来，再导入新索引。</p><p>（5）如果说旧索引的名字，是old_index，新索引的名字是new_index，终端java应用，已经在使用old_index在操作了，难道还要去停止java应用，修改使用的index为new_index，才重新启动java应用吗？这个过程中，就会导致java应用停机，可用性降低。</p><p>（6）所以说，给java应用一个别名，这个别名是指向旧索引的，java应用先用着，java应用先用prod_index alias来操作，此时实际指向的是旧的my_index</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index/</span>_alias/prod_index<br></code></pre></td></tr></table></figure><p>（7）新建一个index，调整其title的类型为string</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts">PUT /<span class="hljs-class">my_index_new</span><br><span class="hljs-class"></span>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><span class="hljs-string">&quot;title&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>        &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（8）使用scroll api将数据批量查询出来</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /my_index/_search?<span class="hljs-attribute">scroll</span>=1m<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>    &#125;,    <br>    <span class="hljs-string">&quot;size&quot;</span>:  1<br>&#125;<br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_scroll_id&quot;</span>: <span class="hljs-string">&quot;DnF1ZXJ5VGhlbkZldGNoBQAAAAAAADpAFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6QRY0b25zVFlWWlRqR3ZJajlfc3BXejJ3AAAAAAAAOkIWNG9uc1RZVlpUakd2SWo5X3NwV3oydwAAAAAAADpDFjRvbnNUWVZaVGpHdklqOV9zcFd6MncAAAAAAAA6RBY0b25zVFlWWlRqR3ZJajlfc3BXejJ3&quot;</span>,<br>  <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span>: [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_index&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;my_type&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>          <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;2019-01-02&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;sort&quot;</span>: [<br>          <span class="hljs-number">0</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（9）采用bulk api将scoll查出来的一批数据，批量写入新索引</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST /<span class="hljs-class">_bulk</span><br><span class="hljs-class"></span>&#123; <span class="hljs-string">&quot;index&quot;</span>:  &#123; <span class="hljs-string">&quot;_index&quot;</span>: <span class="hljs-string">&quot;my_index_new&quot;</span>, <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span> &#125;&#125;<br>&#123; <span class="hljs-string">&quot;title&quot;</span>:    <span class="hljs-string">&quot;2019-09-10&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>（10）反复循环8~9，查询一批又一批的数据出来，采取bulk api将每一批数据批量写入新索引</p><p>（11）将prod_index alias切换到my_index_new上去，java应用会直接通过index别名使用新的索引中的数据，java应用程序不需要停机，零提交，高可用</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST /<span class="hljs-class">_aliases</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-string">&quot;actions&quot;</span>: [<br>        &#123; <span class="hljs-string">&quot;remove&quot;</span>: &#123; <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;my_index&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>: <span class="hljs-string">&quot;prod_index&quot;</span> &#125;&#125;,<br>        &#123; <span class="hljs-string">&quot;add&quot;</span>:    &#123; <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;my_index_new&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>: <span class="hljs-string">&quot;prod_index&quot;</span> &#125;&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>（12）直接通过prod_index别名来查询，是否ok</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/prod_index/</span>_search<br></code></pre></td></tr></table></figure><h3 id="7-5-2-生产实践：基于alias对client透明切换index"><a href="#7-5-2-生产实践：基于alias对client透明切换index" class="headerlink" title="7.5.2 生产实践：基于alias对client透明切换index"></a>7.5.2 生产实践：基于alias对client透明切换index</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/my_index_v1/</span>_alias/my_index<br></code></pre></td></tr></table></figure><p>client对my_index进行操作</p><p>reindex操作，完成之后，切换v1到v2</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts">POST /<span class="hljs-class">_aliases</span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-string">&quot;actions&quot;</span>: [<br>        &#123; <span class="hljs-string">&quot;remove&quot;</span>: &#123; <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;my_index_v1&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>: <span class="hljs-string">&quot;my_index&quot;</span> &#125;&#125;,<br>        &#123; <span class="hljs-string">&quot;add&quot;</span>:    &#123; <span class="hljs-string">&quot;index&quot;</span>: <span class="hljs-string">&quot;my_index_v2&quot;</span>, <span class="hljs-string">&quot;alias&quot;</span>: <span class="hljs-string">&quot;my_index&quot;</span> &#125;&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="8．-中文分词器-IK分词器"><a href="#8．-中文分词器-IK分词器" class="headerlink" title="8． 中文分词器 IK分词器"></a>8． 中文分词器 IK分词器</h1><h2 id="8-1．-Ik分词器安装使用"><a href="#8-1．-Ik分词器安装使用" class="headerlink" title="8.1． Ik分词器安装使用"></a>8.1． Ik分词器安装使用</h2><h3 id="8-1-1-中文分词器"><a href="#8-1-1-中文分词器" class="headerlink" title="8.1.1 中文分词器"></a>8.1.1 中文分词器</h3><p>standard 分词器，仅适用于英文。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;中华人民共和国人民大会堂&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们想要的效果是什么：中华人民共和国，人民大会堂</p><p>IK分词器就是目前最流行的es中文分词器</p><h3 id="8-1-2-安装"><a href="#8-1-2-安装" class="headerlink" title="8.1.2 安装"></a>8.1.2 安装</h3><p>官网：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>根据es版本下载相应版本包。</p><p>解压到 es/plugins/ik中。</p><p>重启es</p><h3 id="8-1-3-ik分词器基础知识"><a href="#8-1-3-ik分词器基础知识" class="headerlink" title="8.1.3 ik分词器基础知识"></a>8.1.3 ik分词器基础知识</h3><p>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国，中华人民，中华，华人，人民共和国，人民大会堂，人民大会，大会堂”，会穷尽各种可能的组合；</p><p>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国人民大会堂”拆分为“中华人民共和国，人民大会堂”。</p><h3 id="8-1-4-ik分词器的使用"><a href="#8-1-4-ik分词器的使用" class="headerlink" title="8.1.4 ik分词器的使用"></a>8.1.4 ik分词器的使用</h3><p>存储时，使用ik_max_word，搜索时，使用ik_smart</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">PUT</span> /my_index <br>&#123;<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;text&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>          <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>          <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>        &#125;<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /my_index/_search?<span class="hljs-attribute">q</span>=中华人民共和国人民大会堂<br></code></pre></td></tr></table></figure><h2 id="8-2-ik配置文件"><a href="#8-2-ik配置文件" class="headerlink" title="8.2. ik配置文件"></a>8.2. ik配置文件</h2><h3 id="8-2-1-ik配置文件"><a href="#8-2-1-ik配置文件" class="headerlink" title="8.2.1 ik配置文件"></a>8.2.1 ik配置文件</h3><p>ik配置文件地址：es/plugins/ik/config目录</p><p>IKAnalyzer.cfg.xml：用来配置自定义词库</p><p>main.dic：ik原生内置的中文词库，总共有27万多条，只要是这些单词，都会被分在一起</p><p>preposition.dic: 介词</p><p>quantifier.dic：放了一些单位相关的词，量词</p><p>suffix.dic：放了一些后缀</p><p>surname.dic：中国的姓氏</p><p>stopword.dic：英文停用词</p><p>ik原生最重要的两个配置文件</p><p>main.dic：包含了原生的中文词语，会按照这个里面的词语去分词</p><p>stopword.dic：包含了英文的停用词</p><p>停用词，stopword</p><p>a the and at but</p><p>一般，像停用词，会在分词的时候，直接被干掉，不会建立在倒排索引中</p><h3 id="8-2-1-自定义词库"><a href="#8-2-1-自定义词库" class="headerlink" title="8.2.1 自定义词库"></a>8.2.1 自定义词库</h3><p>（1）自己建立词库：每年都会涌现一些特殊的流行词，网红，蓝瘦香菇，喊麦，鬼畜，一般不会在ik的原生词典里</p><p>自己补充自己的最新的词语，到ik的词库里面</p><p>IKAnalyzer.cfg.xml：ext_dict，创建mydict.dic。</p><p>补充自己的词语，然后需要重启es，才能生效</p><p>（2）自己建立停用词库：比如了，的，啥，么，我们可能并不想去建立索引，让人家搜索</p><p>custom/ext_stopword.dic，已经有了常用的中文停用词，可以补充自己的停用词，然后重启es</p><h2 id="8-3．-使用mysql热更新-词库"><a href="#8-3．-使用mysql热更新-词库" class="headerlink" title="8.3． 使用mysql热更新 词库"></a>8.3． 使用mysql热更新 词库</h2><h3 id="8-3-1热更新"><a href="#8-3-1热更新" class="headerlink" title="8.3.1热更新"></a>8.3.1热更新</h3><p>每次都是在es的扩展词典中，手动添加新词语，很坑</p><p>（1）每次添加完，都要重启es才能生效，非常麻烦</p><p>（2）es是分布式的，可能有数百个节点，你不能每次都一个一个节点上面去修改</p><p>es不停机，直接我们在外部某个地方添加新的词语，es中立即热加载到这些新词语</p><p>热更新的方案</p><p>（1）基于ik分词器原生支持的热更新方案，部署一个web服务器，提供一个http接口，通过modified和tag两个http响应头，来提供词语的热更新</p><p>（2）修改ik分词器源码，然后手动支持从mysql中每隔一定时间，自动加载新的词库</p><p>用第二种方案，第一种，ik git社区官方都不建议采用，觉得不太稳定</p><h3 id="8-3-2步骤"><a href="#8-3-2步骤" class="headerlink" title="8.3.2步骤"></a>8.3.2步骤</h3><p>1、下载源码</p><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>ik分词器，是个标准的java maven工程，直接导入eclipse就可以看到源码</p><p>2、修改源</p><p>org.wltea.analyzer.dic.Dictionary类，160行Dictionary单例类的初始化方法，在这里需要创建一个我们自定义的线程，并且启动它</p><p>org.wltea.analyzer.dic.HotDictReloadThread类：就是死循环，不断调用Dictionary.getSingleton().reLoadMainDict()，去重新加载词典</p><p>Dictionary类，399行：this.loadMySQLExtDict(); 加载mymsql字典。</p><p>Dictionary类，609行：this.loadMySQLStopwordDict();加载mysql停用词</p><p>config下jdbc-reload.properties。mysql配置文件</p><p>3、mvn package打包代码</p><p>target\releases\elasticsearch-analysis-ik-7.3.0.zip</p><p>4、解压缩ik压缩包</p><p>将mysql驱动jar，放入ik的目录下</p><p>5、修改jdbc相关配置</p><p>6、重启es</p><p>观察日志，日志中就会显示我们打印的那些东西，比如加载了什么配置，加载了什么词语，什么停用词</p><p>7、在mysql中添加词库与停用词</p><p>8、分词实验，验证热更新生效</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_analyze<br>&#123;<br>  <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="9．-search搜索入门"><a href="#9．-search搜索入门" class="headerlink" title="9． search搜索入门"></a>9． search搜索入门</h1><h2 id="9-1．-搜索语法入门"><a href="#9-1．-搜索语法入门" class="headerlink" title="9.1． 搜索语法入门"></a>9.1． 搜索语法入门</h2><h3 id="9-1-1query-string-search"><a href="#9-1-1query-string-search" class="headerlink" title="9.1.1query string search"></a>9.1.1query string search</h3><p>无条件搜索所有</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">969</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201002&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">34.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;bootstrap&quot;</span>,<br>            <span class="hljs-string">&quot;dev&quot;</span><br>          ]<br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;java编程思想&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">64.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;java&quot;</span>,<br>            <span class="hljs-string">&quot;dev&quot;</span><br>          ]<br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;spring开发基础&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">84.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-24 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;spring&quot;</span>,<br>            <span class="hljs-string">&quot;java&quot;</span><br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解释</p><p>took：耗费了几毫秒</p><p>timed_out：是否超时，这里是没有</p><p>_shards：到几个分片搜索，成功几个，跳过几个，失败几个。</p><p>hits.total：查询结果的数量，3个document</p><p>hits.max_score：score的含义，就是document对于一个search的相关度的匹配分数，越相关，就越匹配，分数也高</p><p>hits.hits：包含了匹配搜索的document的所有详细数据</p><h3 id="9-1-2传参"><a href="#9-1-2传参" class="headerlink" title="9.1.2传参"></a>9.1.2传参</h3><p>与http请求传参类似</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /book/_search?<span class="hljs-attribute">q</span>=name:java&amp;sort=price:desc<br></code></pre></td></tr></table></figure><p>类比sql:  select * from book where name like ’ %java%’ order by price desc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;java编程思想&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">64.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;java&quot;</span>,<br>            <span class="hljs-string">&quot;dev&quot;</span><br>          ]<br>        &#125;,<br>        <span class="hljs-attr">&quot;sort&quot;</span> : [<br>          <span class="hljs-number">64.6</span><br>        ]<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-1-3图解timeout"><a href="#9-1-3图解timeout" class="headerlink" title="9.1.3图解timeout"></a>9.1.3图解timeout</h3><p>GET /book/_search?timeout=10ms</p><p>全局设置：配置文件中设置 search.default_search_timeout：100ms。默认不超时。</p><h2 id="9-2．multi-index-多索引搜索"><a href="#9-2．multi-index-多索引搜索" class="headerlink" title="9.2．multi-index 多索引搜索"></a>9.2．multi-index 多索引搜索</h2><h3 id="9-2-1multi-index搜索模式"><a href="#9-2-1multi-index搜索模式" class="headerlink" title="9.2.1multi-index搜索模式"></a>9.2.1multi-index搜索模式</h3><p>告诉你如何一次性搜索多个index和多个type下的数据</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">/_<span class="hljs-built_in">search</span>：所有索引下的所有数据都搜索出来<br>/index1/_<span class="hljs-built_in">search</span>：指定一个<span class="hljs-built_in">index</span>，搜索其下所有的数据<br>/index1,index2/_<span class="hljs-built_in">search</span>：同时搜索两个<span class="hljs-built_in">index</span>下的数据<br>/<span class="hljs-built_in">index</span>*/_<span class="hljs-built_in">search</span>：按照通配符去匹配多个索引<br></code></pre></td></tr></table></figure><p>应用场景：生产环境log索引可以按照日期分开。</p><p>log_to_es_20190910</p><p>log_to_es_20190911</p><p>log_to_es_20180910</p><h3 id="9-2-2初步图解一下简单的搜索原理"><a href="#9-2-2初步图解一下简单的搜索原理" class="headerlink" title="9.2.2初步图解一下简单的搜索原理"></a>9.2.2初步图解一下简单的搜索原理</h3><p>搜索原理初步图解</p><h2 id="9-3．-分页搜索"><a href="#9-3．-分页搜索" class="headerlink" title="9.3． 分页搜索"></a>9.3． 分页搜索</h2><h3 id="9-3-1分页搜索的语法"><a href="#9-3-1分页搜索的语法" class="headerlink" title="9.3.1分页搜索的语法"></a>9.3.1分页搜索的语法</h3><p>sql: select * from book limit 1,5</p><p>size，from</p><p>GET /book/_search?size=10</p><p>GET /book/_search?size=10&amp;from=0</p><p>GET /book/_search?size=10&amp;from=20</p><p>GET /book_search?from=0&amp;size=3</p><h3 id="9-3-2deep-paging"><a href="#9-3-2deep-paging" class="headerlink" title="9.3.2deep paging"></a>9.3.2deep paging</h3><h4 id="什么是deep-paging"><a href="#什么是deep-paging" class="headerlink" title="什么是deep paging"></a>什么是deep paging</h4><p>根据相关度评分倒排序，所以分页过深，协调节点会将大量数据聚合分析。</p><h4 id="deep-paging-性能问题"><a href="#deep-paging-性能问题" class="headerlink" title="deep paging 性能问题"></a>deep paging 性能问题</h4><p>1消耗网络带宽，因为所搜过深的话，各 shard 要把数据传递给 coordinate node，这个过程是有大量数据传递的，消耗网络。</p><p>2消耗内存，各 shard 要把数据传送给 coordinate node，这个传递回来的数据，是被 coordinate node 保存在内存中的，这样会大量消耗内存。</p><p>3消耗cup，coordinate node 要把传回来的数据进行排序，这个排序过程很消耗cpu。<br>所以：鉴于deep paging的性能问题，所有应尽量减少使用。</p><h2 id="9-4．-query-string基础语法"><a href="#9-4．-query-string基础语法" class="headerlink" title="9.4． query string基础语法"></a>9.4． query string基础语法</h2><h3 id="9-4-1query-string基础语法"><a href="#9-4-1query-string基础语法" class="headerlink" title="9.4.1query string基础语法"></a>9.4.1query string基础语法</h3><p>GET /book/_search?q=name:java</p><p>GET /book/_search?q=+name:java</p><p>GET /book/_search?q=-name:java</p><p>一个是掌握q=field:search content的语法，还有一个是掌握+和-的含义</p><h3 id="9-4-2、-all-metadata的原理和作用"><a href="#9-4-2、-all-metadata的原理和作用" class="headerlink" title="9.4.2、_all metadata的原理和作用"></a>9.4.2、_all metadata的原理和作用</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /book/_search?<span class="hljs-attribute">q</span>=java<br></code></pre></td></tr></table></figure><p>直接可以搜索所有的field，任意一个field包含指定的关键字就可以搜索出来。我们在进行中搜索的时候，难道是对document中的每一个field都进行一次搜索吗？不是的。</p><p>es中_all元数据。建立索引的时候，插入一条docunment，es会将所有的field值经行全量分词，把这些分词，放到_all field中。在搜索的时候，没有指定field，就在_all搜索。</p><p>举例</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts">&#123;<br><span class="hljs-symbol">    name:</span>jack<br><span class="hljs-symbol">    email:</span><span class="hljs-number">123</span>@qq.com<br><span class="hljs-symbol">    address:</span>beijing<br>&#125;<br></code></pre></td></tr></table></figure><p>_all : jack,<a href="mailto:&#x31;&#x32;&#x33;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;">&#x31;&#x32;&#x33;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a>,beijing</p><h2 id="9-5．-query-DSL入门"><a href="#9-5．-query-DSL入门" class="headerlink" title="9.5． query DSL入门"></a>9.5． query DSL入门</h2><h3 id="9-5-1-DSL"><a href="#9-5-1-DSL" class="headerlink" title="9.5.1 DSL"></a>9.5.1 DSL</h3><p>query string 后边的参数原来越多，搜索条件越来越复杂，不能满足需求。</p><p>GET /book/_search?q=name:java&amp;size=10&amp;from=0&amp;sort=price:desc</p><p>DSL:Domain Specified Language，特定领域的语言</p><p>es特有的搜索语言，可在请求体中携带搜索条件，功能强大。</p><p>查询全部 GET /book/_search</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123; <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>排序 GET /book/_search?sort=price:desc</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /book/_search <br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;match&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;name&quot;</span> : &quot; <span class="hljs-type">java</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;</span>sort<span class="hljs-string">&quot;: [</span><br><span class="hljs-string">        &#123; &quot;</span>price<span class="hljs-string">&quot;: &quot;</span>desc<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">    ]</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>分页查询 GET /book/_search?size=10&amp;from=0</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET  <span class="hljs-regexp">/book/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123; <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125; &#125;,<br>  <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>指定返回字段 GET /book/ _search? _source=name,studymodel</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123; <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125; &#125;,<br>  <span class="hljs-string">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>通过组合以上各种类型查询，实现复杂查询。</p><h3 id="9-5-2．-Query-DSL语法"><a href="#9-5-2．-Query-DSL语法" class="headerlink" title="9.5.2． Query DSL语法"></a>9.5.2． Query DSL语法</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts">&#123;<br><span class="hljs-symbol">    QUERY_NAME:</span> &#123;<br><span class="hljs-symbol">        ARGUMENT:</span> VALUE,<br><span class="hljs-symbol">        ARGUMENT:</span> VALUE,...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts">&#123;<br><span class="hljs-symbol">    QUERY_NAME:</span> &#123;<br><span class="hljs-symbol">        FIELD_NAME:</span> &#123;<br><span class="hljs-symbol">            ARGUMENT:</span> VALUE,<br><span class="hljs-symbol">            ARGUMENT:</span> VALUE,...<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/test_index/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;test_field&quot;</span>: <span class="hljs-string">&quot;test&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5-3-组合多个搜索条件"><a href="#9-5-3-组合多个搜索条件" class="headerlink" title="9.5.3 组合多个搜索条件"></a>9.5.3 组合多个搜索条件</h3><p>搜索需求：title必须包含elasticsearch，content可以包含elasticsearch也可以不包含，author_id必须不为111</p><p>sql where  and or !=</p><p>初始数据：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my hadoop article&quot;</span>,<br>          <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;hadoop is very bad&quot;</span>,<br>          <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">111</span><br>&#125;<br><br>POST <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br>          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my elasticsearch  article&quot;</span>,<br>          <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;es is very bad&quot;</span>,<br>          <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">112</span><br>&#125;<br>POST <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>          <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;my elasticsearch article&quot;</span>,<br>          <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;es is very goods&quot;</span>,<br>          <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">111</span><br>&#125;<br></code></pre></td></tr></table></figure><p>搜索：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">GET</span> /website/<span class="hljs-symbol">_doc</span>/<span class="hljs-symbol">_search</span><br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;should&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;must_not&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">111</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">488</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">0.47000363</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;website&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.47000363</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;title&quot;</span> : <span class="hljs-string">&quot;my elasticsearch  article&quot;</span>,<br>          <span class="hljs-attr">&quot;content&quot;</span> : <span class="hljs-string">&quot;es is very bad&quot;</span>,<br>          <span class="hljs-attr">&quot;author_id&quot;</span> : <span class="hljs-number">112</span><br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>更复杂的搜索需求：</p><p>select * from test_index where name=’tom’ or (hired =true and (personality =’good’ and rude != true ))</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gradle">GET <span class="hljs-regexp">/test_index/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;must&quot;</span>: &#123; <span class="hljs-string">&quot;match&quot;</span>:&#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;tom&quot;</span> &#125;&#125;,<br>                <span class="hljs-string">&quot;should&quot;</span>: [<br>                    &#123; <span class="hljs-string">&quot;match&quot;</span>:&#123; <span class="hljs-string">&quot;hired&quot;</span>: <span class="hljs-keyword">true</span> &#125;&#125;,<br>                    &#123; <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>                        <span class="hljs-string">&quot;must&quot;</span>:&#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;personality&quot;</span>: <span class="hljs-string">&quot;good&quot;</span> &#125;&#125;,<br>                        <span class="hljs-string">&quot;must_not&quot;</span>: &#123; <span class="hljs-string">&quot;match&quot;</span>: &#123; <span class="hljs-string">&quot;rude&quot;</span>: <span class="hljs-keyword">true</span> &#125;&#125;<br>                    &#125;&#125;<br>                ],<br>                <span class="hljs-string">&quot;minimum_should_match&quot;</span>: <span class="hljs-number">1</span><br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-6．-full-text-search-全文检索"><a href="#9-6．-full-text-search-全文检索" class="headerlink" title="9.6． full-text search 全文检索"></a>9.6． full-text search 全文检索</h2><h3 id="9-6-1-全文检索"><a href="#9-6-1-全文检索" class="headerlink" title="9.6.1 全文检索"></a>9.6.1 全文检索</h3><p>重新创建book索引</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs gradle">PUT <span class="hljs-regexp">/book/</span><br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>        <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;description&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>        <span class="hljs-string">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;studymodel&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;price&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;double&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;timestamp&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,<br>         <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;pic&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>        <span class="hljs-string">&quot;index&quot;</span>:<span class="hljs-keyword">false</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/book/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span>,<br><span class="hljs-string">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,<br><span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-number">34.6</span>,<br><span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br><span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br><span class="hljs-string">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;bootstrap&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>]<br>&#125;<br><br>PUT <span class="hljs-regexp">/book/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程思想&quot;</span>,<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,<br><span class="hljs-string">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,<br><span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-number">64.6</span>,<br><span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br><span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br><span class="hljs-string">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;dev&quot;</span>]<br>&#125;<br><br>PUT <span class="hljs-regexp">/book/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br><span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,<br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,<br><span class="hljs-string">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,<br><span class="hljs-string">&quot;price&quot;</span>:<span class="hljs-number">84.6</span>,<br><span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2019-08-24 19:11:35&quot;</span>,<br><span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br><span class="hljs-string">&quot;tags&quot;</span>: [ <span class="hljs-string">&quot;spring&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><p>搜索</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET  /book/_search <br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;match&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;description&quot;</span> : &quot;<span class="hljs-type">java</span>程序员<span class="hljs-string">&quot;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="9-6-2-score初探"><a href="#9-6-2-score初探" class="headerlink" title="9.6.2 _score初探"></a>9.6.2 _score初探</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">2.137549</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">2.137549</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;spring开发基础&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">84.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-24 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;spring&quot;</span>,<br>            <span class="hljs-string">&quot;java&quot;</span><br>          ]<br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.57961315</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;java编程思想&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">64.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;java&quot;</span>,<br>            <span class="hljs-string">&quot;dev&quot;</span><br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果分析</p><p>1、建立索引时, description字段 term倒排索引</p><p>java 2,3</p><p>程序员 3</p><p>2、搜索时，直接找description中含有java的文档 2,3，并且3号文档含有两个java字段，一个程序员，所以得分高，排在前面。2号文档含有一个java，排在后面。</p><h2 id="9-7．-DSL-语法练习"><a href="#9-7．-DSL-语法练习" class="headerlink" title="9.7． DSL 语法练习"></a>9.7． DSL 语法练习</h2><h3 id="9-7-1-match-all"><a href="#9-7-1-match-all" class="headerlink" title="9.7.1 match_all"></a>9.7.1 match_all</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-2-match"><a href="#9-7-2-match" class="headerlink" title="9.7.2 match"></a>9.7.2 match</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br><span class="hljs-string">&quot;query&quot;</span>: &#123; <br><span class="hljs-string">&quot;match&quot;</span>: &#123; <br><span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-3-multi-match"><a href="#9-7-3-multi-match" class="headerlink" title="9.7.3  multi_match"></a>9.7.3  multi_match</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;multi_match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span>,<br>      <span class="hljs-string">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-4、range-query-范围查询"><a href="#9-7-4、range-query-范围查询" class="headerlink" title="9.7.4、range query 范围查询"></a>9.7.4、range query 范围查询</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-number">80</span>,<br><span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-number">90</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-5、term-query"><a href="#9-7-5、term-query" class="headerlink" title="9.7.5、term query"></a>9.7.5、term query</h3><p>字段为keyword时，存储和搜索都不分词</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-6、terms-query"><a href="#9-7-6、terms-query" class="headerlink" title="9.7.6、terms query"></a>9.7.6、terms query</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123; <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-string">&quot;tag&quot;</span>: [ <span class="hljs-string">&quot;search&quot;</span>, <span class="hljs-string">&quot;full_text&quot;</span>, <span class="hljs-string">&quot;nosql&quot;</span> ] &#125;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="9-7-7、exist-query-查询有某些字段值的文档"><a href="#9-7-7、exist-query-查询有某些字段值的文档" class="headerlink" title="9.7.7、exist query 查询有某些字段值的文档"></a>9.7.7、exist query 查询有某些字段值的文档</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;exists&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;join_date&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-8、Fuzzy-query"><a href="#9-7-8、Fuzzy-query" class="headerlink" title="9.7. 8、Fuzzy query"></a>9.7. 8、Fuzzy query</h3><p>返回包含与搜索词类似的词的文档，该词由Levenshtein编辑距离度量。</p><p>包括以下几种情况：</p><ul><li><p>更改角色（box→fox）</p></li><li><p>删除字符（aple→apple）</p></li><li><p>插入字符（sick→sic）</p></li><li><p>调换两个相邻字符（ACT→CAT）</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;fuzzy&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;description&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;jave&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-9、IDs"><a href="#9-7-9、IDs" class="headerlink" title="9.7.9、IDs"></a>9.7.9、IDs</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;ids&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;values&quot;</span> : [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-10、prefix-前缀查询"><a href="#9-7-10、prefix-前缀查询" class="headerlink" title="9.7.10、prefix 前缀查询"></a>9.7.10、prefix 前缀查询</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;prefix&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;description&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-7-11、regexp-query-正则查询"><a href="#9-7-11、regexp-query-正则查询" class="headerlink" title="9.7.11、regexp query  正则查询"></a>9.7.11、regexp query  正则查询</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;regexp&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;description&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;j.*a&quot;</span>,<br>                <span class="hljs-string">&quot;flags&quot;</span> : <span class="hljs-string">&quot;ALL&quot;</span>,<br>                <span class="hljs-string">&quot;max_determinized_states&quot;</span>: <span class="hljs-number">10000</span>,<br>                <span class="hljs-string">&quot;rewrite&quot;</span>: <span class="hljs-string">&quot;constant_score&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-8．-Filter"><a href="#9-8．-Filter" class="headerlink" title="9.8． Filter"></a>9.8． Filter</h2><h3 id="9-4-1-filter与query示例"><a href="#9-4-1-filter与query示例" class="headerlink" title="9.4.1 filter与query示例"></a>9.4.1 filter与query示例</h3><p>需求：用户查询description中有”java程序员”，并且价格大于80小于90的数据。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-number">80</span>,<br>      <span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-number">90</span><br>            &#125;<br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用filter:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>          &#125;<br>        &#125;<br>      ],<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-number">80</span>,<br>     <span class="hljs-string">&quot;lte&quot;</span>: <span class="hljs-number">90</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-4-2-filter与query对比"><a href="#9-4-2-filter与query对比" class="headerlink" title="9.4.2 filter与query对比"></a>9.4.2 filter与query对比</h3><p>filter，仅仅只是按照搜索条件过滤出需要的数据而已，不计算任何相关度分数，对相关度没有任何影响。</p><p>query，会去计算每个document相对于搜索条件的相关度，并按照相关度进行排序。</p><p>应用场景：</p><p>一般来说，如果你是在进行搜索，需要将最匹配搜索条件的数据先返回，那么用query        如果你只是要根据一些条件筛选出一部分数据，不关注其排序，那么用filter</p><h3 id="9-4-3-filter与query性能"><a href="#9-4-3-filter与query性能" class="headerlink" title="9.4.3 filter与query性能"></a>9.4.3 filter与query性能</h3><p>filter，不需要计算相关度分数，不需要按照相关度分数进行排序，同时还有内置的自动cache最常使用filter的数据</p><p>query，相反，要计算相关度分数，按照分数进行排序，而且无法cache结果</p><h2 id="9-9．-定位错误语法"><a href="#9-9．-定位错误语法" class="headerlink" title="9.9． 定位错误语法"></a>9.9． 定位错误语法</h2><p>验证错误语句：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_validate/query?explain<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;mach&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;valid&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;error&quot;</span> : <span class="hljs-string">&quot;org.elasticsearch.common.ParsingException: no [query] registered for [mach]&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>正确</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_validate/query?explain<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;valid&quot;</span> : <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;explanations&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>      <span class="hljs-attr">&quot;valid&quot;</span> : <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">&quot;explanation&quot;</span> : <span class="hljs-string">&quot;description:java description:程序员&quot;</span><br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>一般用在那种特别复杂庞大的搜索下，比如你一下子写了上百行的搜索，这个时候可以先用validate api去验证一下，搜索是否合法。</p><p>合法以后，explain就像mysql的执行计划，可以看到搜索的目标等信息。</p><h2 id="9-10．-定制排序规则"><a href="#9-10．-定制排序规则" class="headerlink" title="9.10． 定制排序规则"></a>9.10． 定制排序规则</h2><h3 id="9-10-1-默认排序规则"><a href="#9-10-1-默认排序规则" class="headerlink" title="9.10.1 默认排序规则"></a>9.10.1 默认排序规则</h3><p>默认情况下，是按照_score降序排序的</p><p>然而，某些情况下，可能没有有用的_score，比如说filter</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> book/_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;bool&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;must&quot;</span>: [<br>        &#123;<br>          <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，也可以是constant_score</p><h3 id="9-10-2-定制排序规则"><a href="#9-10-2-定制排序规则" class="headerlink" title="9.10.2 定制排序规则"></a>9.10.2 定制排序规则</h3><p>相当于sql中order by  ?sort=sprice:desc</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /book/_search <br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;constant_score&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;term&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;studymodel&quot;</span> : &quot;201001&quot;<br>            &#125;<br>        &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-11．-Text字段排序问题"><a href="#9-11．-Text字段排序问题" class="headerlink" title="9.11． Text字段排序问题"></a>9.11． Text字段排序问题</h2><p>如果对一个text field进行排序，结果往往不准确，因为分词后是多个单词，再排序就不是我们想要的结果了。</p><p>通常解决方案是，将一个text field建立两次索引，一个分词，用来进行搜索；一个不分词，用来进行排序。</p><p>fielddate:true</p><div class="code-wrapper"><pre><code class="hljs">PUT /website &#123;  &quot;mappings&quot;: &#123;  &quot;properties&quot;: &#123;    &quot;title&quot;: &#123;      &quot;type&quot;: &quot;text&quot;,      &quot;fields&quot;: &#123;        &quot;keyword&quot;: &#123;          &quot;type&quot;: &quot;keyword&quot;        &#125;              &#125;          &#125;,    &quot;content&quot;: &#123;      &quot;type&quot;: &quot;text&quot;    &#125;,    &quot;post_date&quot;: &#123;      &quot;type&quot;: &quot;date&quot;    &#125;,    &quot;author_id&quot;: &#123;      &quot;type&quot;: &quot;long&quot;    &#125;  &#125; &#125;&#125;</code></pre></div><p>插入数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">1</span><br>&#123;<br>  <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;first article&quot;</span>,<br>  <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my second article&quot;</span>,<br>  <span class="hljs-string">&quot;post_date&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span>,<br>  <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">110</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">2</span><br>&#123;<br>    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;second article&quot;</span>,<br>    <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my second article&quot;</span>,<br>     <span class="hljs-string">&quot;post_date&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span>,<br>    <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">110</span><br>&#125;<br><br>PUT <span class="hljs-regexp">/website/</span>_doc/<span class="hljs-number">3</span><br>&#123;<br>     <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;third article&quot;</span>,<br>     <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;this is my third article&quot;</span>,<br>     <span class="hljs-string">&quot;post_date&quot;</span>: <span class="hljs-string">&quot;2019-01-02&quot;</span>,<br>     <span class="hljs-string">&quot;author_id&quot;</span>: <span class="hljs-number">110</span><br>&#125;<br></code></pre></td></tr></table></figure><p>搜索</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/website/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;sort&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;title.keyword&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;order&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-12．-Scroll分批查询"><a href="#9-12．-Scroll分批查询" class="headerlink" title="9.12． Scroll分批查询"></a>9.12． Scroll分批查询</h3><p>场景：下载某一个索引中1亿条数据，到文件或是数据库。</p><p>不能一下全查出来，系统内存溢出。所以使用scoll滚动搜索技术，一批一批查询。</p><p>scoll搜索会在第一次搜索的时候，保存一个当时的视图快照，之后只会基于该旧的视图快照提供数据搜索，如果这个期间数据变更，是不会让用户看到的</p><p>每次发送scroll请求，我们还需要指定一个scoll参数，指定一个时间窗口，每次搜索请求只要在这个时间窗口内能完成就可以了。</p><p>搜索</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /book/_search?<span class="hljs-attribute">scroll</span>=1m<br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;size&quot;</span>: 3<br>&#125;<br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;_scroll_id&quot;</span> : <span class="hljs-string">&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAMOkWTURBNDUtcjZTVUdKMFp5cXloVElOQQ==&quot;</span>,<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">3</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">1.0</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>     <br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>获得的结果会有一个scoll_id，下一次再发送scoll请求的时候，必须带上这个scoll_id</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/_search/</span>scroll<br>&#123;<br>    <span class="hljs-string">&quot;scroll&quot;</span>: <span class="hljs-string">&quot;1m&quot;</span>, <br>    <span class="hljs-string">&quot;scroll_id&quot;</span> : <span class="hljs-string">&quot;DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAAMOkWTURBNDUtcjZTVUdKMFp5cXloVElOQQ==&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>与分页区别：</p><p>分页给用户看的  deep paging</p><p>scroll是用户系统内部操作，如下载批量数据，数据转移。零停机改变索引映射。</p><h1 id="10．-评分机制详解"><a href="#10．-评分机制详解" class="headerlink" title="10． 评分机制详解"></a>10． 评分机制详解</h1><h2 id="10-1．-评分机制-TF-IDF"><a href="#10-1．-评分机制-TF-IDF" class="headerlink" title="10.1． 评分机制 TF\IDF"></a>10.1． 评分机制 TF\IDF</h2><h3 id="10-1-1-算法介绍"><a href="#10-1-1-算法介绍" class="headerlink" title="10.1.1 算法介绍"></a>10.1.1 算法介绍</h3><p>relevance score算法，简单来说，就是计算出，一个索引中的文本，与搜索文本，他们之间的关联匹配程度。</p><p>Elasticsearch使用的是 term frequency/inverse document frequency算法，简称为TF/IDF算法。TF词频(Term Frequency)，IDF逆向文件频率(Inverse Document Frequency)</p><p><strong>Term frequency</strong>：搜索文本中的各个词条在field文本中出现了多少次，出现次数越多，就越相关。</p><p><img src="img/1571494142950.png" alt="1571494142950"></p><p>举例：搜索请求：hello world</p><p>doc1 : hello you and me,and world is very good.</p><p>doc2 : hello,how are you</p><p><strong>Inverse document frequency</strong>：搜索文本中的各个词条在整个索引的所有文档中出现了多少次，出现的次数越多，就越不相关.</p><p><img src="img/1571494159465.png" alt="1571494159465"></p><p><img src="img/1571494176760.png" alt="1571494176760"></p><p>举例：搜索请求：hello world</p><p>doc1 :  hello ,today is very good</p><p>doc2 : hi world ,how are you</p><p>整个index中1亿条数据。hello的document 1000个，有world的document  有100个。</p><p>doc2 更相关</p><p><strong>Field-length norm</strong>：field长度，field越长，相关度越弱</p><p>举例：搜索请求：hello world</p><p>doc1 : {“title”:”hello article”,”content “:”balabalabal 1万个”}</p><p>doc2 : {“title”:”my article”,”content “:”balabalabal 1万个,world”}</p><h3 id="10-1-2-score是如何被计算出来的"><a href="#10-1-2-score是如何被计算出来的" class="headerlink" title="10.1.2 _score是如何被计算出来的"></a>10.1.2 _score是如何被计算出来的</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">GET</span> /book/_search?<span class="hljs-attribute">explain</span>=<span class="hljs-literal">true</span><br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">5</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-number">2.137549</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [<br>      &#123;<br>        <span class="hljs-attr">&quot;_shard&quot;</span> : <span class="hljs-string">&quot;[book][0]&quot;</span>,<br>        <span class="hljs-attr">&quot;_node&quot;</span> : <span class="hljs-string">&quot;MDA45-r6SUGJ0ZyqyhTINA&quot;</span>,<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">2.137549</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;spring开发基础&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">84.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-24 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;spring&quot;</span>,<br>            <span class="hljs-string">&quot;java&quot;</span><br>          ]<br>        &#125;,<br>        <span class="hljs-attr">&quot;_explanation&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2.137549</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;sum of:&quot;</span>,<br>          <span class="hljs-attr">&quot;details&quot;</span> : [<br>            &#123;<br>              <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.7936629</span>,<br>              <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;weight(description:java in 0) [PerFieldSimilarity], result of:&quot;</span>,<br>              <span class="hljs-attr">&quot;details&quot;</span> : [<br>                &#123;<br>                  <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.7936629</span>,<br>                  <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;score(freq=2.0), product of:&quot;</span>,<br>                  <span class="hljs-attr">&quot;details&quot;</span> : [<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2.2</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;boost&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.47000363</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;n, number of documents containing term&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;N, total number of documents with field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;<br>                      ]<br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.7675597</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2.0</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;freq, occurrences of term within document&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.2</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;k1, term saturation parameter&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.75</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;b, length normalization parameter&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">12.0</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;dl, length of field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">35.333332</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;avgdl, average length of field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;<br>                      ]<br>                    &#125;<br>                  ]<br>                &#125;<br>              ]<br>            &#125;,<br>            &#123;<br>              <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.3438859</span>,<br>              <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;weight(description:程序员 in 0) [PerFieldSimilarity], result of:&quot;</span>,<br>              <span class="hljs-attr">&quot;details&quot;</span> : [<br>                &#123;<br>                  <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.3438859</span>,<br>                  <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;score(freq=1.0), product of:&quot;</span>,<br>                  <span class="hljs-attr">&quot;details&quot;</span> : [<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2.2</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;boost&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.98082924</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;n, number of documents containing term&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;N, total number of documents with field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;<br>                      ]<br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.6227967</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.0</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;freq, occurrences of term within document&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.2</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;k1, term saturation parameter&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.75</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;b, length normalization parameter&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">12.0</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;dl, length of field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">35.333332</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;avgdl, average length of field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;<br>                      ]<br>                    &#125;<br>                  ]<br>                &#125;<br>              ]<br>            &#125;<br>          ]<br>        &#125;<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">&quot;_shard&quot;</span> : <span class="hljs-string">&quot;[book][0]&quot;</span>,<br>        <span class="hljs-attr">&quot;_node&quot;</span> : <span class="hljs-string">&quot;MDA45-r6SUGJ0ZyqyhTINA&quot;</span>,<br>        <span class="hljs-attr">&quot;_index&quot;</span> : <span class="hljs-string">&quot;book&quot;</span>,<br>        <span class="hljs-attr">&quot;_type&quot;</span> : <span class="hljs-string">&quot;_doc&quot;</span>,<br>        <span class="hljs-attr">&quot;_id&quot;</span> : <span class="hljs-string">&quot;2&quot;</span>,<br>        <span class="hljs-attr">&quot;_score&quot;</span> : <span class="hljs-number">0.57961315</span>,<br>        <span class="hljs-attr">&quot;_source&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;name&quot;</span> : <span class="hljs-string">&quot;java编程思想&quot;</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,<br>          <span class="hljs-attr">&quot;studymodel&quot;</span> : <span class="hljs-string">&quot;201001&quot;</span>,<br>          <span class="hljs-attr">&quot;price&quot;</span> : <span class="hljs-number">64.6</span>,<br>          <span class="hljs-attr">&quot;timestamp&quot;</span> : <span class="hljs-string">&quot;2019-08-25 19:11:35&quot;</span>,<br>          <span class="hljs-attr">&quot;pic&quot;</span> : <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM424.jpg&quot;</span>,<br>          <span class="hljs-attr">&quot;tags&quot;</span> : [<br>            <span class="hljs-string">&quot;java&quot;</span>,<br>            <span class="hljs-string">&quot;dev&quot;</span><br>          ]<br>        &#125;,<br>        <span class="hljs-attr">&quot;_explanation&quot;</span> : &#123;<br>          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.57961315</span>,<br>          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;sum of:&quot;</span>,<br>          <span class="hljs-attr">&quot;details&quot;</span> : [<br>            &#123;<br>              <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.57961315</span>,<br>              <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;weight(description:java in 0) [PerFieldSimilarity], result of:&quot;</span>,<br>              <span class="hljs-attr">&quot;details&quot;</span> : [<br>                &#123;<br>                  <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.57961315</span>,<br>                  <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;score(freq=1.0), product of:&quot;</span>,<br>                  <span class="hljs-attr">&quot;details&quot;</span> : [<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2.2</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;boost&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.47000363</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;n, number of documents containing term&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;N, total number of documents with field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;<br>                      ]<br>                    &#125;,<br>                    &#123;<br>                      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.56055</span>,<br>                      <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:&quot;</span>,<br>                      <span class="hljs-attr">&quot;details&quot;</span> : [<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.0</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;freq, occurrences of term within document&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">1.2</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;k1, term saturation parameter&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">0.75</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;b, length normalization parameter&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">19.0</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;dl, length of field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;,<br>                        &#123;<br>                          <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">35.333332</span>,<br>                          <span class="hljs-attr">&quot;description&quot;</span> : <span class="hljs-string">&quot;avgdl, average length of field&quot;</span>,<br>                          <span class="hljs-attr">&quot;details&quot;</span> : [ ]<br>                        &#125;<br>                      ]<br>                    &#125;<br>                  ]<br>                &#125;<br>              ]<br>            &#125;<br>          ]<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-1-3-分析一个document是如何被匹配上的"><a href="#10-1-3-分析一个document是如何被匹配上的" class="headerlink" title="10.1.3 分析一个document是如何被匹配上的"></a>10.1.3 分析一个document是如何被匹配上的</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_explain/<span class="hljs-number">3</span><br>&#123;<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-2．-Doc-value"><a href="#10-2．-Doc-value" class="headerlink" title="10.2． Doc value"></a>10.2． Doc value</h2><p>搜索的时候，要依靠倒排索引；排序的时候，需要依靠正排索引，看到每个document的每个field，然后进行排序，所谓的正排索引，其实就是doc values</p><p>在建立索引的时候，一方面会建立倒排索引，以供搜索用；一方面会建立正排索引，也就是doc values，以供排序，聚合，过滤等操作使用</p><p>doc values是被保存在磁盘上的，此时如果内存足够，os会自动将其缓存在内存中，性能还是会很高；如果内存不足够，os会将其写入磁盘上</p><p><strong>倒排索引</strong></p><p>doc1: hello world you and me</p><p>doc2: hi, world, how are you</p><table><thead><tr><th>term</th><th>doc1</th><th>doc2</th></tr></thead><tbody><tr><td>hello</td><td>*</td><td></td></tr><tr><td>world</td><td>*</td><td>*</td></tr><tr><td>you</td><td>*</td><td>*</td></tr><tr><td>and</td><td>*</td><td></td></tr><tr><td>me</td><td>*</td><td></td></tr><tr><td>hi</td><td></td><td>*</td></tr><tr><td>how</td><td></td><td>*</td></tr><tr><td>are</td><td></td><td>*</td></tr></tbody></table><p>搜索时：</p><p>hello you –&gt; hello, you</p><p>hello –&gt; doc1</p><p>you –&gt; doc1,doc2</p><p>doc1: hello world you and me</p><p>doc2: hi, world, how are you</p><p>sort by 出现问题</p><p><strong>正排索引</strong></p><p>doc1: { “name”: “jack”, “age”: 27 }</p><p>doc2: { “name”: “tom”, “age”: 30 }</p><table><thead><tr><th>document</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>doc1</td><td>jack</td><td>27</td></tr><tr><td>doc2</td><td>tom</td><td>30</td></tr></tbody></table><h2 id="10-3．-query-phase"><a href="#10-3．-query-phase" class="headerlink" title="10.3． query phase"></a>10.3． query phase</h2><h3 id="1、query-phase"><a href="#1、query-phase" class="headerlink" title="1、query phase"></a>1、query phase</h3><p>（1）搜索请求发送到某一个coordinate node，构构建一个priority queue，长度以paging操作from和size为准，默认为10</p><p>（2）coordinate node将请求转发到所有shard，每个shard本地搜索，并构建一个本地的priority queue</p><p>（3）各个shard将自己的priority queue返回给coordinate node，并构建一个全局的priority queue</p><h3 id="2、replica-shard如何提升搜索吞吐量"><a href="#2、replica-shard如何提升搜索吞吐量" class="headerlink" title="2、replica shard如何提升搜索吞吐量"></a>2、replica shard如何提升搜索吞吐量</h3><p>一次请求要打到所有shard的一个replica/primary上去，如果每个shard都有多个replica，那么同时并发过来的搜索请求可以同时打到其他的replica上去</p><h2 id="10-4．-fetch-phase"><a href="#10-4．-fetch-phase" class="headerlink" title="10.4． fetch phase"></a>10.4． fetch phase</h2><h3 id="1、fetch-phbase工作流程"><a href="#1、fetch-phbase工作流程" class="headerlink" title="1、fetch phbase工作流程"></a>1、fetch phbase工作流程</h3><p>（1）coordinate node构建完priority queue之后，就发送mget请求去所有shard上获取对应的document</p><p>（2）各个shard将document返回给coordinate node</p><p>（3）coordinate node将合并后的document结果返回给client客户端</p><h3 id="2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score排序"><a href="#2、一般搜索，如果不加from和size，就默认搜索前10条，按照-score排序" class="headerlink" title="2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score排序"></a>2、一般搜索，如果不加from和size，就默认搜索前10条，按照_score排序</h3><h2 id="10-5．-搜索参数小总结"><a href="#10-5．-搜索参数小总结" class="headerlink" title="10.5． 搜索参数小总结"></a>10.5． 搜索参数小总结</h2><h3 id="1、preference"><a href="#1、preference" class="headerlink" title="1、preference"></a>1、preference</h3><p>决定了哪些shard会被用来执行搜索操作</p><p>_primary, _primary_first, _local, _only_node:xyz, _prefer_node:xyz, _shards:2,3</p><p>bouncing results问题，两个document排序，field值相同；不同的shard上，可能排序不同；每次请求轮询打到不同的replica shard上；每次页面上看到的搜索结果的排序都不一样。这就是bouncing result，也就是跳跃的结果。</p><p>搜索的时候，是轮询将搜索请求发送到每一个replica shard（primary shard），但是在不同的shard上，可能document的排序不同</p><p>解决方案就是将preference设置为一个字符串，比如说user_id，让每个user每次搜索的时候，都使用同一个replica shard去执行，就不会看到bouncing results了</p><h3 id="2、timeout"><a href="#2、timeout" class="headerlink" title="2、timeout"></a>2、timeout</h3><p>已经讲解过原理了，主要就是限定在一定时间内，将部分获取到的数据直接返回，避免查询耗时过长</p><h3 id="3、routing"><a href="#3、routing" class="headerlink" title="3、routing"></a>3、routing</h3><p>document文档路由，_id路由，routing=user_id，这样的话可以让同一个user对应的数据到一个shard上去</p><h3 id="4、search-type"><a href="#4、search-type" class="headerlink" title="4、search_type"></a>4、search_type</h3><p>default：query_then_fetch</p><p>dfs_query_then_fetch，可以提升revelance sort精准度</p><h1 id="11．-聚合入门"><a href="#11．-聚合入门" class="headerlink" title="11． 聚合入门"></a>11． 聚合入门</h1><h2 id="11-1聚合示例"><a href="#11-1聚合示例" class="headerlink" title="11.1聚合示例"></a>11.1聚合示例</h2><h3 id="11-1-1需求：计算每个studymodel下的商品数量"><a href="#11-1-1需求：计算每个studymodel下的商品数量" class="headerlink" title="11.1.1需求：计算每个studymodel下的商品数量"></a>11.1.1需求：计算每个studymodel下的商品数量</h3><p>sql语句： select studymodel，count(*)  from book group by studymodel</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;, <br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_model&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;studymodel&quot;</span> &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-1-2-需求：计算每个tags下的商品数量"><a href="#11-1-2-需求：计算每个tags下的商品数量" class="headerlink" title="11.1.2 需求：计算每个tags下的商品数量"></a>11.1.2 需求：计算每个tags下的商品数量</h3><p>设置字段”fielddata”: true</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gradle">PUT <span class="hljs-regexp">/book/</span>_mapping/<br>&#123;<br>  <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>      <span class="hljs-string">&quot;fielddata&quot;</span>: <span class="hljs-keyword">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match_all&quot;</span>: &#123;&#125;<br>  &#125;, <br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_tags&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;tags&quot;</span> &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-1-3-需求：加上搜索条件，计算每个tags下的商品数量"><a href="#11-1-3-需求：加上搜索条件，计算每个tags下的商品数量" class="headerlink" title="11.1.3 需求：加上搜索条件，计算每个tags下的商品数量"></a>11.1.3 需求：加上搜索条件，计算每个tags下的商品数量</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;match&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;java程序员&quot;</span><br>    &#125;<br>  &#125;, <br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_tags&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;tags&quot;</span> &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-1-4-需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格"><a href="#11-1-4-需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格" class="headerlink" title="11.1.4 需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格"></a>11.1.4 需求：先分组，再算每组的平均值，计算每个tag下的商品的平均价格</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /book/_search<br>&#123;<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;aggs&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;group_by_tags&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;terms&quot;</span> : &#123; <br>              <span class="hljs-string">&quot;field&quot;</span> : &quot;<span class="hljs-type">tags</span><span class="hljs-string">&quot; </span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>aggs<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>avg_price<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                    &quot;</span>avg<span class="hljs-string">&quot; : &#123; &quot;</span>field<span class="hljs-string">&quot; : &quot;</span>price<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="11-1-5-需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序"><a href="#11-1-5-需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序" class="headerlink" title="11.1.5 需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序"></a>11.1.5 需求：计算每个tag下的商品的平均价格，并且按照平均价格降序排序</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /book/_search<br>&#123;<br>    <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;aggs&quot;</span> : &#123;<br>        <span class="hljs-string">&quot;group_by_tags&quot;</span> : &#123;<br>            <span class="hljs-string">&quot;terms&quot;</span> : &#123; <br>              <span class="hljs-string">&quot;field&quot;</span> : &quot;<span class="hljs-type">tags</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">              &quot;</span>order<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">                &quot;</span>avg_price<span class="hljs-string">&quot;: &quot;</span>desc<span class="hljs-string">&quot;</span><br><span class="hljs-string">              &#125;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>aggs<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>avg_price<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                    &quot;</span>avg<span class="hljs-string">&quot; : &#123; &quot;</span>field<span class="hljs-string">&quot; : &quot;</span>price<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">                &#125;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="11-1-6-需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格"><a href="#11-1-6-需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格" class="headerlink" title="11.1.6 需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格"></a>11.1.6 需求：按照指定的价格范围区间进行分组，然后在每组内再按照tag进行分组，最后再计算每组的平均价格</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/book/</span>_search<br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_price&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span>,<br>        <span class="hljs-string">&quot;ranges&quot;</span>: [<br>          &#123;<br>            <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-number">40</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">40</span>,<br>            <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-number">60</span><br>          &#125;,<br>          &#123;<br>            <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-number">60</span>,<br>            <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-number">80</span><br>          &#125;<br>        ]<br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;group_by_tags&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;tags&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;average_price&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-2两个核心概念：bucket和metric"><a href="#11-2两个核心概念：bucket和metric" class="headerlink" title="11.2两个核心概念：bucket和metric"></a>11.2两个核心概念：bucket和metric</h2><h3 id="11-2-1-bucket：一个数据分组"><a href="#11-2-1-bucket：一个数据分组" class="headerlink" title="11.2.1 bucket：一个数据分组"></a>11.2.1 bucket：一个数据分组</h3><p>city  name<br>北京 张三<br>北京 李四<br>天津 王五<br>天津 赵六</p><p>天津 王麻子</p><p>划分出来两个bucket，一个是北京bucket，一个是天津bucket<br>北京bucket：包含了2个人，张三，李四<br>上海bucket：包含了3个人，王五，赵六，王麻子</p><h3 id="11-2-2metric：对一个数据分组执行的统计"><a href="#11-2-2metric：对一个数据分组执行的统计" class="headerlink" title="11.2.2metric：对一个数据分组执行的统计"></a>11.2.2metric：对一个数据分组执行的统计</h3><p>metric，就是对一个bucket执行的某种聚合分析的操作，比如说求平均值，求最大值，求最小值</p><p>select count(*)<br>from book<br>group studymodel</p><p>bucket：group by studymodel –&gt; 那些studymodel相同的数据，就会被划分到一个bucket中<br>metric：count(*)，对每个user_id bucket中所有的数据，计算一个数量。还有avg()，sum()，max()，min()</p><h2 id="11-3-电视案例"><a href="#11-3-电视案例" class="headerlink" title="11.3 电视案例"></a>11.3 电视案例</h2><p>创建索引及映射</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">PUT /tvs<br>PUT <span class="hljs-regexp">/tvs/</span>_search<br>&#123;<br><span class="hljs-string">&quot;properties&quot;</span>: &#123;<br><span class="hljs-string">&quot;price&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;color&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;brand&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;sold_date&quot;</span>: &#123;<br><span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">POST /tvs/_bulk<br>&#123; &quot;<span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 1000, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>红色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>长虹<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-10</span><span class="hljs-number">-28</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 2000, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>红色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>长虹<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-11</span><span class="hljs-number">-05</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 3000, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>绿色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>小米<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-05</span><span class="hljs-number">-18</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 1500, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>蓝色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>TCL<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-07</span><span class="hljs-number">-02</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 1200, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>绿色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>TCL<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-08</span><span class="hljs-number">-19</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 2000, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>红色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>长虹<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2019</span><span class="hljs-number">-11</span><span class="hljs-number">-05</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 8000, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>红色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>三星<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2020</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span><span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string">&#123; &quot;</span><span class="hljs-keyword">index</span><span class="hljs-string">&quot;: &#123;&#125;&#125;</span><br><span class="hljs-string">&#123; &quot;</span>price<span class="hljs-string">&quot; : 2500, &quot;</span>color<span class="hljs-string">&quot; : &quot;</span>蓝色<span class="hljs-string">&quot;, &quot;</span>brand<span class="hljs-string">&quot; : &quot;</span>小米<span class="hljs-string">&quot;, &quot;</span>sold_date<span class="hljs-string">&quot; : &quot;</span><span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-12</span><span class="hljs-string">&quot; &#125;</span><br></code></pre></td></tr></table></figure><h3 id="需求1-统计哪种颜色的电视销量最高"><a href="#需求1-统计哪种颜色的电视销量最高" class="headerlink" title="需求1 统计哪种颜色的电视销量最高"></a>需求1 统计哪种颜色的电视销量最高</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /tvs/_search<br>&#123;<br>    <span class="hljs-string">&quot;size&quot;</span> : 0,<br>    <span class="hljs-string">&quot;aggs&quot;</span> : &#123; <br>        <span class="hljs-string">&quot;popular_colors&quot;</span> : &#123; <br>            <span class="hljs-string">&quot;terms&quot;</span> : &#123; <br>              <span class="hljs-string">&quot;field&quot;</span> : &quot;<span class="hljs-type">color</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>查询条件解析</p><p>size：只获取聚合结果，而不要执行聚合的原始数据<br>aggs：固定语法，要对一份数据执行分组聚合操作<br>popular_colors：就是对每个aggs，都要起一个名字，<br>terms：根据字段的值进行分组<br>field：根据指定的字段的值进行分组</p><p>返回</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [ ]<br>  &#125;,<br>  <span class="hljs-attr">&quot;aggregations&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;popular_colors&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;buckets&quot;</span> : [<br>        &#123;<br>          <span class="hljs-attr">&quot;key&quot;</span> : <span class="hljs-string">&quot;红色&quot;</span>,<br>          <span class="hljs-attr">&quot;doc_count&quot;</span> : <span class="hljs-number">4</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;key&quot;</span> : <span class="hljs-string">&quot;绿色&quot;</span>,<br>          <span class="hljs-attr">&quot;doc_count&quot;</span> : <span class="hljs-number">2</span><br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;key&quot;</span> : <span class="hljs-string">&quot;蓝色&quot;</span>,<br>          <span class="hljs-attr">&quot;doc_count&quot;</span> : <span class="hljs-number">2</span><br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>返回结果解析</p><p>hits.hits：我们指定了size是0，所以hits.hits就是空的<br>aggregations：聚合结果<br>popular_color：我们指定的某个聚合的名称<br>buckets：根据我们指定的field划分出的buckets<br>key：每个bucket对应的那个值<br>doc_count：这个bucket分组内，有多少个数据<br>数量，其实就是这种颜色的销量</p><p>每种颜色对应的bucket中的数据的默认的排序规则：按照doc_count降序排序</p><h3 id="需求2-统计每种颜色电视平均价格"><a href="#需求2-统计每种颜色电视平均价格" class="headerlink" title="需求2 统计每种颜色电视平均价格"></a>需求2 统计每种颜色电视平均价格</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search<br>&#123;<br>   <span class="hljs-string">&quot;size&quot;</span> : <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;colors&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;color&quot;</span><br>         &#125;,<br>         <span class="hljs-string">&quot;aggs&quot;</span>: &#123; <br>            <span class="hljs-string">&quot;avg_price&quot;</span>: &#123; <br>               <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>                  <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span> <br>               &#125;<br>            &#125;<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在一个aggs执行的bucket操作（terms），平级的json结构下，再加一个aggs，这个第二个aggs内部，同样取个名字，执行一个metric操作，avg，对之前的每个bucket中的数据的指定的field，price field，求一个平均值</p><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;took&quot;</span> : <span class="hljs-number">4</span>,<br>  <span class="hljs-attr">&quot;timed_out&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;_shards&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;successful&quot;</span> : <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;skipped&quot;</span> : <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;failed&quot;</span> : <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;hits&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;total&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">8</span>,<br>      <span class="hljs-attr">&quot;relation&quot;</span> : <span class="hljs-string">&quot;eq&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;max_score&quot;</span> : <span class="hljs-literal">null</span>,<br>    <span class="hljs-attr">&quot;hits&quot;</span> : [ ]<br>  &#125;,<br>  <span class="hljs-attr">&quot;aggregations&quot;</span> : &#123;<br>    <span class="hljs-attr">&quot;colors&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span> : <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">&quot;buckets&quot;</span> : [<br>        &#123;<br>          <span class="hljs-attr">&quot;key&quot;</span> : <span class="hljs-string">&quot;红色&quot;</span>,<br>          <span class="hljs-attr">&quot;doc_count&quot;</span> : <span class="hljs-number">4</span>,<br>          <span class="hljs-attr">&quot;avg_price&quot;</span> : &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">3250.0</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;key&quot;</span> : <span class="hljs-string">&quot;绿色&quot;</span>,<br>          <span class="hljs-attr">&quot;doc_count&quot;</span> : <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">&quot;avg_price&quot;</span> : &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2100.0</span><br>          &#125;<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">&quot;key&quot;</span> : <span class="hljs-string">&quot;蓝色&quot;</span>,<br>          <span class="hljs-attr">&quot;doc_count&quot;</span> : <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">&quot;avg_price&quot;</span> : &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span> : <span class="hljs-number">2000.0</span><br>          &#125;<br>        &#125;<br>      ]<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>buckets，除了key和doc_count<br>avg_price：我们自己取的metric aggs的名字<br>value：我们的metric计算的结果，每个bucket中的数据的price字段求平均值后的结果</p><p>相当于sql: select avg(price) from tvs group by color</p><h3 id="需求3-继续下钻分析"><a href="#需求3-继续下钻分析" class="headerlink" title="需求3 继续下钻分析"></a>需求3 继续下钻分析</h3><p>每个颜色下，平均价格及每个颜色下，每个品牌的平均价格</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_color&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;color&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;color_avg_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;group_by_brand&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;brand&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;brand_avg_price&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求4：更多的metric"><a href="#需求4：更多的metric" class="headerlink" title="需求4：更多的metric"></a>需求4：更多的metric</h3><p>count：bucket，terms，自动就会有一个doc_count，就相当于是count<br>avg：avg aggs，求平均值<br>max：求一个bucket内，指定field值最大的那个数据<br>min：求一个bucket内，指定field值最小的那个数据<br>sum：求一个bucket内，指定field值的总和</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search<br>&#123;<br>   <span class="hljs-string">&quot;size&quot;</span> : <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;colors&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;color&quot;</span><br>         &#125;,<br>         <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;avg_price&quot;</span>: &#123; <span class="hljs-string">&quot;avg&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span> &#125; &#125;,<br>            <span class="hljs-string">&quot;min_price&quot;</span> : &#123; <span class="hljs-string">&quot;min&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span>&#125; &#125;, <br>            <span class="hljs-string">&quot;max_price&quot;</span> : &#123; <span class="hljs-string">&quot;max&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span>&#125; &#125;,<br>            <span class="hljs-string">&quot;sum_price&quot;</span> : &#123; <span class="hljs-string">&quot;sum&quot;</span>: &#123; <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span> &#125; &#125; <br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求5：划分范围-histogram"><a href="#需求5：划分范围-histogram" class="headerlink" title="需求5：划分范围 histogram"></a>需求5：划分范围 histogram</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search<br>&#123;<br>   <span class="hljs-string">&quot;size&quot;</span> : <span class="hljs-number">0</span>,<br>   <span class="hljs-string">&quot;aggs&quot;</span>:&#123;<br>      <span class="hljs-string">&quot;price&quot;</span>:&#123;<br>         <span class="hljs-string">&quot;histogram&quot;</span>:&#123; <br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span>,<br>            <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-number">2000</span><br>         &#125;,<br>         <span class="hljs-string">&quot;aggs&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;income&quot;</span>: &#123;<br>               <span class="hljs-string">&quot;sum&quot;</span>: &#123; <br>                 <span class="hljs-string">&quot;field&quot;</span> : <span class="hljs-string">&quot;price&quot;</span><br>               &#125;<br>             &#125;<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>histogram：类似于terms，也是进行bucket分组操作，接收一个field，按照这个field的值的各个范围区间，进行bucket分组操作</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;histogram&quot;</span>:&#123; <br>  <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span>,<br>  <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-number">2000</span><br>&#125;<br></code></pre></td></tr></table></figure><p>interval：2000，划分范围，0<del>2000，2000</del>4000，4000<del>6000，6000</del>8000，8000~10000，buckets</p><p>bucket有了之后，一样的，去对每个bucket执行avg，count，sum，max，min，等各种metric操作，聚合分析</p><h3 id="需求6：按照日期分组聚合"><a href="#需求6：按照日期分组聚合" class="headerlink" title="需求6：按照日期分组聚合"></a>需求6：按照日期分组聚合</h3><p>date_histogram，按照我们指定的某个date类型的日期field，以及日期interval，按照一定的日期间隔，去划分bucket</p><p>min_doc_count：即使某个日期interval，2017-01-01~2017-01-31中，一条数据都没有，那么这个区间也是要返回的，不然默认是会过滤掉这个区间的<br>extended_bounds，min，max：划分bucket的时候，会限定在这个起始日期，和截止日期内</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ada">GET /tvs/_search<br>&#123;<br>   <span class="hljs-string">&quot;size&quot;</span> : 0,<br>   <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;sales&quot;</span>: &#123;<br>         <span class="hljs-string">&quot;date_histogram&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;sold_date&quot;</span>,<br>            <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;month&quot;</span>, <br>            <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>,<br>            <span class="hljs-string">&quot;min_doc_count&quot;</span> : 0, <br>            <span class="hljs-string">&quot;extended_bounds&quot;</span> : &#123; <br>                <span class="hljs-string">&quot;min&quot;</span> : &quot;2019-01-01&quot;,<br>                <span class="hljs-string">&quot;max&quot;</span> : &quot;2020-12-31&quot;<br>            &#125;<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求7-统计每季度每个品牌的销售额"><a href="#需求7-统计每季度每个品牌的销售额" class="headerlink" title="需求7 统计每季度每个品牌的销售额"></a>需求7 统计每季度每个品牌的销售额</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_sold_date&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;date_histogram&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;sold_date&quot;</span>,<br>        <span class="hljs-string">&quot;interval&quot;</span>: <span class="hljs-string">&quot;quarter&quot;</span>,<br>        <span class="hljs-string">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>,<br>        <span class="hljs-string">&quot;min_doc_count&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;extended_bounds&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;min&quot;</span>: <span class="hljs-string">&quot;2019-01-01&quot;</span>,<br>          <span class="hljs-string">&quot;max&quot;</span>: <span class="hljs-string">&quot;2020-12-31&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;group_by_brand&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;brand&quot;</span><br>          &#125;,<br>          <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;sum_price&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;sum&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;,<br>        <span class="hljs-string">&quot;total_sum_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;sum&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求8-：搜索与聚合结合，查询某个品牌按颜色销量"><a href="#需求8-：搜索与聚合结合，查询某个品牌按颜色销量" class="headerlink" title="需求8 ：搜索与聚合结合，查询某个品牌按颜色销量"></a>需求8 ：搜索与聚合结合，查询某个品牌按颜色销量</h3><p>搜索与聚合可以结合起来。</p><p>sql select count(*)</p><p>from tvs</p><p>where brand like “%小米%”</p><p>group by color</p><p>es aggregation，scope，任何的聚合，都必须在搜索出来的结果数据中之行，搜索结果，就是聚合分析操作的scope</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;brand&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_color&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;color&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求9-global-bucket：单个品牌与所有品牌销量对比"><a href="#需求9-global-bucket：单个品牌与所有品牌销量对比" class="headerlink" title="需求9 global bucket：单个品牌与所有品牌销量对比"></a>需求9 global bucket：单个品牌与所有品牌销量对比</h3><p>aggregation，scope，一个聚合操作，必须在query的搜索结果范围内执行</p><p>出来两个结果，一个结果，是基于query搜索结果来聚合的; 一个结果，是对所有数据执行聚合的</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>, <br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;brand&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;single_brand_avg_price&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>      &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;all&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;global&quot;</span>: &#123;&#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;all_brand_avg_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求10：过滤-聚合：统计价格大于1200的电视平均价格"><a href="#需求10：过滤-聚合：统计价格大于1200的电视平均价格" class="headerlink" title="需求10：过滤+聚合：统计价格大于1200的电视平均价格"></a>需求10：过滤+聚合：统计价格大于1200的电视平均价格</h3><p>搜索+聚合</p><p>过滤+聚合</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;constant_score&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-number">1200</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;avg_price&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="需求11-bucket-filter：统计品牌最近一个月的平均价格"><a href="#需求11-bucket-filter：统计品牌最近一个月的平均价格" class="headerlink" title="需求11 bucket filter：统计品牌最近一个月的平均价格"></a>需求11 bucket filter：统计品牌最近一个月的平均价格</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;query&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;term&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;brand&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;recent_150d&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;sold_date&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;now-150d&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;recent_150d_avg_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;recent_140d&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;sold_date&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;now-140d&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;recent_140d_avg_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-string">&quot;recent_130d&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;sold_date&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;gte&quot;</span>: <span class="hljs-string">&quot;now-130d&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;recent_130d_avg_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>aggs.filter，针对的是聚合去做的</p><p>如果放query里面的filter，是全局的，会对所有的数据都有影响</p><p>但是，如果，比如说，你要统计，长虹电视，最近1个月的平均值; 最近3个月的平均值; 最近6个月的平均值</p><p>bucket filter：对不同的bucket下的aggs，进行filter</p><h3 id="需求12-排序：按每种颜色的平均销售额降序排序"><a href="#需求12-排序：按每种颜色的平均销售额降序排序" class="headerlink" title="需求12 排序：按每种颜色的平均销售额降序排序"></a>需求12 排序：按每种颜色的平均销售额降序排序</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_color&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;color&quot;</span>,<br>        <span class="hljs-string">&quot;order&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg_price&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>        &#125;<br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;avg_price&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相当于sql子表数据字段可以立刻使用。</p><h3 id="需求13-排序：按每种颜色的每种品牌平均销售额降序排序"><a href="#需求13-排序：按每种颜色的每种品牌平均销售额降序排序" class="headerlink" title="需求13 排序：按每种颜色的每种品牌平均销售额降序排序"></a>需求13 排序：按每种颜色的每种品牌平均销售额降序排序</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/tvs/</span>_search  <br>&#123;<br>  <span class="hljs-string">&quot;size&quot;</span>: <span class="hljs-number">0</span>,<br>  <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;group_by_color&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;color&quot;</span><br>      &#125;,<br>      <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;group_by_brand&quot;</span>: &#123;<br>          <span class="hljs-string">&quot;terms&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;brand&quot;</span>,<br>            <span class="hljs-string">&quot;order&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;avg_price&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span><br>            &#125;<br>          &#125;,<br>          <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;avg_price&quot;</span>: &#123;<br>              <span class="hljs-string">&quot;avg&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="12．-es7-sql新特性"><a href="#12．-es7-sql新特性" class="headerlink" title="12． es7 sql新特性"></a>12． es7 sql新特性</h1><h2 id="12-1-快速入门"><a href="#12-1-快速入门" class="headerlink" title="12.1 快速入门"></a>12.1 快速入门</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">POST /_sql?<span class="hljs-attribute">format</span>=txt<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;SELECT * FROM tvs &quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-2启动方式"><a href="#12-2启动方式" class="headerlink" title="12.2启动方式"></a>12.2启动方式</h2><p>1http 请求</p><p>2客户端：elasticsearch-sql-cli.bat</p><p>3代码</p><h2 id="12-3显示方式"><a href="#12-3显示方式" class="headerlink" title="12.3显示方式"></a>12.3显示方式</h2><p><img src="img/1573212830146.png" alt="1573212830146"></p><h2 id="12-4-sql-翻译"><a href="#12-4-sql-翻译" class="headerlink" title="12.4 sql 翻译"></a>12.4 sql 翻译</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">POST <span class="hljs-regexp">/_sql/</span>translate<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;SELECT * FROM tvs &quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;size&quot;</span> : <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">&quot;_source&quot;</span> : <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">&quot;stored_fields&quot;</span> : <span class="hljs-string">&quot;_none_&quot;</span>,<br>  <span class="hljs-attr">&quot;docvalue_fields&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;field&quot;</span> : <span class="hljs-string">&quot;brand&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;field&quot;</span> : <span class="hljs-string">&quot;color&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;field&quot;</span> : <span class="hljs-string">&quot;price&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">&quot;field&quot;</span> : <span class="hljs-string">&quot;sold_date&quot;</span>,<br>      <span class="hljs-attr">&quot;format&quot;</span> : <span class="hljs-string">&quot;epoch_millis&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-attr">&quot;sort&quot;</span> : [<br>    &#123;<br>      <span class="hljs-attr">&quot;_doc&quot;</span> : &#123;<br>        <span class="hljs-attr">&quot;order&quot;</span> : <span class="hljs-string">&quot;asc&quot;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-5-与其他DSL结合"><a href="#12-5-与其他DSL结合" class="headerlink" title="12.5 与其他DSL结合"></a>12.5 与其他DSL结合</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">POST /_sql?format=txt<br>&#123;<br>    <span class="hljs-string">&quot;query&quot;</span>: <span class="hljs-string">&quot;SELECT * FROM tvs&quot;</span>,<br>    <span class="hljs-string">&quot;filter&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;range&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;price&quot;</span>: &#123;<br>                <span class="hljs-string">&quot;gte&quot;</span> : 1200,<br>                <span class="hljs-string">&quot;lte&quot;</span> : 2000<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-6-java-代码实现sql功能"><a href="#12-6-java-代码实现sql功能" class="headerlink" title="12.6 java 代码实现sql功能"></a>12.6 java 代码实现sql功能</h2><p>1前提 es拥有白金版功能</p><p>kibana中管理-》许可管理 开启白金版试用</p><p>2导入依赖</p><div class="code-wrapper"><pre><code class="hljs">    &lt;dependency&gt;        &lt;groupId&gt;org.elasticsearch.plugin&lt;/groupId&gt;        &lt;artifactId&gt;x-pack-sql-jdbc&lt;/artifactId&gt;        &lt;version&gt;7.3.0&lt;/version&gt;    &lt;/dependency&gt;        &lt;repositories&gt;        &lt;repository&gt;            &lt;id&gt;elastic.co&lt;/id&gt;            &lt;url&gt;https://artifacts.elastic.co/maven&lt;/url&gt;        &lt;/repository&gt;    &lt;/repositories&gt;</code></pre></div><p>3代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>        try  &#123;<br>            <span class="hljs-keyword">Connection</span> <span class="hljs-keyword">connection</span> = DriverManager.getConnection(&quot;jdbc:es://http://localhost:9200&quot;);<br>            <span class="hljs-keyword">Statement</span> <span class="hljs-keyword">statement</span> = <span class="hljs-keyword">connection</span>.createStatement();<br>            ResultSet results = <span class="hljs-keyword">statement</span>.executeQuery(<br>                    &quot;select * from tvs&quot;);<br>            <span class="hljs-keyword">while</span>(results.next())&#123;<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(results.getString(<span class="hljs-number">1</span>));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(results.getString(<span class="hljs-number">2</span>));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(results.getString(<span class="hljs-number">3</span>));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(results.getString(<span class="hljs-number">4</span>));<br>                <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;============================&quot;);<br>            &#125;<br>        &#125;catch (<span class="hljs-keyword">Exception</span> e)&#123;<br>            e.printStackTrace();<br>        &#125;<br></code></pre></td></tr></table></figure><p>大型企业可以购买白金版，增加Machine Learning、高级安全性x-pack。</p><h1 id="13．-Logstash学习"><a href="#13．-Logstash学习" class="headerlink" title="13． Logstash学习"></a>13． Logstash学习</h1><h2 id="13-1Logstash基本语法组成"><a href="#13-1Logstash基本语法组成" class="headerlink" title="13.1Logstash基本语法组成"></a>13.1Logstash基本语法组成</h2><p><img src="img/1573291947262.png" alt="1573291947262"></p><h3 id="1什么是Logstash"><a href="#1什么是Logstash" class="headerlink" title="1什么是Logstash"></a>1什么是Logstash</h3><p>logstash是一个数据抽取工具，将数据从一个地方转移到另一个地方。如hadoop生态圈的sqoop等。下载地址：<a href="https://www.elastic.co/cn/downloads/logstash">https://www.elastic.co/cn/downloads/logstash</a></p><p>logstash之所以功能强大和流行，还与其丰富的过滤器插件是分不开的，过滤器提供的并不单单是过滤的功能，还可以对进入过滤器的原始数据进行复杂的逻辑处理，甚至添加独特的事件到后续流程中。<br>Logstash配置文件有如下三部分组成，其中input、output部分是必须配置，filter部分是可选配置，而filter就是过滤器插件，可以在这部分实现各种日志过滤功能。</p><h3 id="2配置文件："><a href="#2配置文件：" class="headerlink" title="2配置文件："></a>2配置文件：</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-class">input </span>&#123;<br>    <span class="hljs-meta">#输入插件</span><br>&#125;<br><span class="hljs-class">filter </span>&#123;<br>    <span class="hljs-meta">#过滤匹配插件</span><br>&#125;<br><span class="hljs-class">output </span>&#123;<br>    <span class="hljs-meta">#输出插件</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3启动操作："><a href="#3启动操作：" class="headerlink" title="3启动操作："></a>3启动操作：</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">logstash.bat -e &#x27;input</span><span class="hljs-template-variable">&#123;stdin&#123;&#125;</span><span class="xml">&#125; output</span><span class="hljs-template-variable">&#123;stdout&#123;&#125;</span><span class="xml">&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>为了好维护，将配置写入文件，启动</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">logstash.bat -f ..<span class="hljs-regexp">/config/</span>test1.conf<br></code></pre></td></tr></table></figure><h2 id="13-2-Logstash输入插件（input）"><a href="#13-2-Logstash输入插件（input）" class="headerlink" title="13.2 Logstash输入插件（input）"></a>13.2 Logstash输入插件（input）</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/input-plugins.html">https://www.elastic.co/guide/en/logstash/current/input-plugins.html</a></p><h3 id="1、标准输入-Stdin"><a href="#1、标准输入-Stdin" class="headerlink" title="1、标准输入(Stdin)"></a>1、标准输入(Stdin)</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">input</span>&#123;<br>    <span class="hljs-built_in">stdin</span>&#123;<br>       <br>    &#125;<br>&#125;<br><span class="hljs-built_in">output</span> &#123;<br>    <span class="hljs-built_in">stdout</span>&#123;<br>        codec=&gt;rubydebug    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、读取文件-File"><a href="#2、读取文件-File" class="headerlink" title="2、读取文件(File)"></a>2、读取文件(File)</h3><p>logstash使用一个名为filewatch的ruby gem库来监听文件变化,并通过一个叫.sincedb的数据库文件来记录被监听的日志文件的读取进度（时间戳），这个sincedb数据文件的默认路径在 &lt;path.data&gt;/plugins/inputs/file下面，文件名类似于.sincedb_123456，而&lt;path.data&gt;表示logstash插件存储目录，默认是LOGSTASH_HOME/data。</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>    file &#123;<br>        <span class="hljs-attr">path</span> =&gt; [<span class="hljs-string">&quot;/var/*/*&quot;</span>]<br>        <span class="hljs-attr">start_position</span> =&gt; <span class="hljs-string">&quot;beginning&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">output</span> &#123;<br>    stdout&#123;<br>        <span class="hljs-attr">codec</span>=&gt;rubydebug    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认情况下，logstash会从文件的结束位置开始读取数据，也就是说logstash进程会以类似tail -f命令的形式逐行获取数据。</p><h3 id="3、读取TCP网络数据"><a href="#3、读取TCP网络数据" class="headerlink" title="3、读取TCP网络数据"></a>3、读取TCP网络数据</h3><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>  tcp &#123;<br>    <span class="hljs-attr">port</span> =&gt; <span class="hljs-string">&quot;1234&quot;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">filter</span> &#123;<br>  grok &#123;<br>    <span class="hljs-attr">match</span> =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;SYSLOGLINE&#125;&quot;</span> &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">output</span> &#123;<br>    stdout&#123;<br>        <span class="hljs-attr">codec</span>=&gt;rubydebug<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-3-Logstash过滤器插件-Filter"><a href="#13-3-Logstash过滤器插件-Filter" class="headerlink" title="13.3 Logstash过滤器插件(Filter)"></a>13.3 Logstash过滤器插件(Filter)</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/filter-plugins.html">https://www.elastic.co/guide/en/logstash/current/filter-plugins.html</a></p><h3 id="13-13-1Grok-正则捕获"><a href="#13-13-1Grok-正则捕获" class="headerlink" title="13.13.1Grok 正则捕获"></a>13.13.1Grok 正则捕获</h3><p>grok是一个十分强大的logstash filter插件，他可以通过正则解析任意文本，将非结构化日志数据弄成结构化和方便查询的结构。他是目前logstash 中解析非结构化日志数据最好的方式。</p><p>Grok 的语法规则是：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%&#123;语法: 语义&#125;</span><br></code></pre></td></tr></table></figure><p>例如输入的内容为：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.16.213.132</span> <span class="hljs-string">[07/Feb/2019:16:24:19 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">403</span> <span class="hljs-number">5039</span><br></code></pre></td></tr></table></figure><p>%{IP:clientip}匹配模式将获得的结果为：clientip: 172.16.213.132<br>%{HTTPDATE:timestamp}匹配模式将获得的结果为：timestamp: 07/Feb/2018:16:24:19 +0800<br>而%{QS:referrer}匹配模式将获得的结果为：referrer: “GET / HTTP/1.1”</p><p>下面是一个组合匹配模式，它可以获取上面输入的所有内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">%&#123;IP:clientip&#125;\ \<span class="hljs-selector-attr">[%&#123;HTTPDATE:timestamp&#125;\]</span>\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;<br></code></pre></td></tr></table></figure><p>通过上面这个组合匹配模式，我们将输入的内容分成了五个部分，即五个字段，将输入内容分割为不同的数据字段，这对于日后解析和查询日志数据非常有用，这正是使用grok的目的。</p><p>例子：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">input</span>&#123;<br>    <span class="hljs-built_in">stdin</span>&#123;&#125;<br>&#125;<br>filter&#123;<br>    grok&#123;<br>        <span class="hljs-built_in">match</span> =&gt; [<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;&quot;</span>]<br>    &#125;<br>&#125;<br><span class="hljs-built_in">output</span>&#123;<br>    <span class="hljs-built_in">stdout</span>&#123;<br>        codec =&gt; <span class="hljs-string">&quot;rubydebug&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入内容：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">172.16.213.132</span> <span class="hljs-string">[07/Feb/2019:16:24:19 +0800]</span> <span class="hljs-string">&quot;<span class="hljs-keyword">GET</span> / HTTP/1.1&quot;</span> <span class="hljs-number">403</span> <span class="hljs-number">5039</span><br></code></pre></td></tr></table></figure><h3 id="13-13-2时间处理-Date"><a href="#13-13-2时间处理-Date" class="headerlink" title="13.13.2时间处理(Date)"></a>13.13.2时间处理(Date)</h3><p>date插件是对于排序事件和回填旧数据尤其重要，它可以用来转换日志记录中的时间字段，变成LogStash::Timestamp对象，然后转存到@timestamp字段里，这在之前已经做过简单的介绍。<br>下面是date插件的一个配置示例（这里仅仅列出filter部分）：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">filter</span> &#123;<br>    grok &#123;<br>        <span class="hljs-attr">match</span> =&gt; [<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;%&#123;HTTPDATE:timestamp&#125;&quot;</span>]<br>    &#125;<br>    <span class="hljs-keyword">date</span> &#123;<br>        <span class="hljs-attr">match</span> =&gt; [<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-13-3、数据修改-Mutate"><a href="#13-13-3、数据修改-Mutate" class="headerlink" title="13.13.3、数据修改(Mutate)"></a>13.13.3、数据修改(Mutate)</h3><h4 id="（1）正则表达式替换匹配字段"><a href="#（1）正则表达式替换匹配字段" class="headerlink" title="（1）正则表达式替换匹配字段"></a>（1）正则表达式替换匹配字段</h4><p>gsub可以通过正则表达式替换字段中匹配到的值，只对字符串字段有效，下面是一个关于mutate插件中gsub的示例（仅列出filter部分）：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">filter</span> &#123;<br>    mutate &#123;<br>        <span class="hljs-attr">gsub</span> =&gt; [<span class="hljs-string">&quot;filed_name_1&quot;</span>, <span class="hljs-string">&quot;/&quot;</span> , <span class="hljs-string">&quot;_&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例表示将filed_name_1字段中所有”/“字符替换为”_”。</p><h4 id="（2）分隔符分割字符串为数组"><a href="#（2）分隔符分割字符串为数组" class="headerlink" title="（2）分隔符分割字符串为数组"></a>（2）分隔符分割字符串为数组</h4><p>split可以通过指定的分隔符分割字段中的字符串为数组，下面是一个关于mutate插件中split的示例（仅列出filter部分）：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">filter</span> &#123;<br>    mutate &#123;<br>        <span class="hljs-attr">split</span> =&gt; [<span class="hljs-string">&quot;filed_name_2&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例表示将filed_name_2字段以”|”为区间分隔为数组。</p><h4 id="（3）重命名字段"><a href="#（3）重命名字段" class="headerlink" title="（3）重命名字段"></a>（3）重命名字段</h4><p>rename可以实现重命名某个字段的功能，下面是一个关于mutate插件中rename的示例（仅列出filter部分）：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq">filter &#123;<br>    mutate &#123;<br>        <span class="hljs-built_in">rename</span> =&gt; &#123; <span class="hljs-string">&quot;old_field&quot;</span> =&gt; <span class="hljs-string">&quot;new_field&quot;</span> &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例表示将字段old_field重命名为new_field。</p><h4 id="（4）删除字段"><a href="#（4）删除字段" class="headerlink" title="（4）删除字段"></a>（4）删除字段</h4><p>remove_field可以实现删除某个字段的功能，下面是一个关于mutate插件中remove_field的示例（仅列出filter部分）：</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">filter</span> &#123;<br>    mutate &#123;<br>        <span class="hljs-attr">remove_field</span>  =&gt;  [<span class="hljs-string">&quot;timestamp&quot;</span>]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个示例表示将字段timestamp删除。</p><h4 id="（5）GeoIP-地址查询归类"><a href="#（5）GeoIP-地址查询归类" class="headerlink" title="（5）GeoIP 地址查询归类"></a>（5）GeoIP 地址查询归类</h4><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">filter</span> &#123;<br>    geoip &#123;<br>        <span class="hljs-attr">source</span> =&gt; <span class="hljs-string">&quot;ip_field&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="综合例子："><a href="#综合例子：" class="headerlink" title="综合例子："></a>综合例子：</h4><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>    stdin &#123;&#125;<br>&#125;<br><span class="hljs-keyword">filter</span> &#123;<br>    grok &#123;<br>        <span class="hljs-attr">match</span> =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;&quot;</span> &#125;<br>        <span class="hljs-keyword">remove_field</span> =&gt; [ <span class="hljs-string">&quot;message&quot;</span> ]<br>   &#125;<br><span class="hljs-keyword">date</span> &#123;<br>        <span class="hljs-attr">match</span> =&gt; [<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>]<br>    &#125;<br><span class="hljs-keyword">mutate</span> &#123;<br>          <span class="hljs-attr">convert</span> =&gt; [ <span class="hljs-string">&quot;response&quot;</span>,<span class="hljs-string">&quot;float&quot;</span> ]<br>           <span class="hljs-attr">rename</span> =&gt; &#123; <span class="hljs-string">&quot;response&quot;</span> =&gt; <span class="hljs-string">&quot;response_new&quot;</span> &#125;   <br>           <span class="hljs-keyword">gsub</span> =&gt; [<span class="hljs-string">&quot;referrer&quot;</span>,<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>]          <br>           split =&gt; [<span class="hljs-string">&quot;clientip&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>]<br>        &#125;<br>&#125;<br><span class="hljs-keyword">output</span> &#123;<br>    stdout &#123;<br>        <span class="hljs-attr">codec</span> =&gt; <span class="hljs-string">&quot;rubydebug&quot;</span><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="13-4-Logstash输出插件（output）"><a href="#13-4-Logstash输出插件（output）" class="headerlink" title="13.4 Logstash输出插件（output）"></a>13.4 Logstash输出插件（output）</h2><p><a href="https://www.elastic.co/guide/en/logstash/current/output-plugins.html">https://www.elastic.co/guide/en/logstash/current/output-plugins.html</a></p><p>output是Logstash的最后阶段，一个事件可以经过多个输出，而一旦所有输出处理完成，整个事件就执行完成。 一些常用的输出包括：</p><ul><li>file：  表示将日志数据写入磁盘上的文件。</li><li>elasticsearch：表示将日志数据发送给Elasticsearch。Elasticsearch可以高效方便和易于查询的保存数据。</li></ul><p>1、输出到标准输出(stdout)</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">output</span> &#123;<br>    stdout &#123;<br>        <span class="hljs-attr">codec</span> =&gt; rubydebug<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、保存为文件（file）</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">output</span> &#123;<br>    file &#123;<br>        <span class="hljs-attr">path</span> =&gt; <span class="hljs-string">&quot;/data/log/%&#123;+yyyy-MM-dd&#125;/%&#123;host&#125;_%&#123;+HH&#125;.log&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、输出到elasticsearch</p><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">output</span> &#123;<br>    elasticsearch &#123;<br>        <span class="hljs-attr">host</span> =&gt; [<span class="hljs-string">&quot;192.164.1.1:9200&quot;</span>,<span class="hljs-string">&quot;172.16.213.77:9200&quot;</span>]<br>        <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;</span>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>host：是一个数组类型的值，后面跟的值是elasticsearch节点的地址与端口，默认端口是9200。可添加多个地址。</li><li>index：写入elasticsearch的索引的名称，这里可以使用变量。Logstash提供了%{+YYYY.MM.dd}这种写法。在语法解析的时候，看到以+ 号开头的，就会自动认为后面是时间格式，尝试用时间格式来解析后续字符串。这种以天为单位分割的写法，可以很容易的删除老的数据或者搜索指定时间范围内的数据。此外，注意索引名中不能有大写字母。</li><li>manage_template:用来设置是否开启logstash自动管理模板功能，如果设置为false将关闭自动管理模板功能。如果我们自定义了模板，那么应该设置为false。</li><li>template_name:这个配置项用来设置在Elasticsearch中模板的名称。</li></ul><h2 id="13-5-综合案例"><a href="#13-5-综合案例" class="headerlink" title="13.5 综合案例"></a>13.5 综合案例</h2><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs puppet"><span class="hljs-keyword">input</span> &#123;<br>    file &#123;<br>        <span class="hljs-attr">path</span> =&gt; [<span class="hljs-string">&quot;D:/ES/logstash-7.3.0/nginx.log&quot;</span>]        <br>        <span class="hljs-attr">start_position</span> =&gt; <span class="hljs-string">&quot;beginning&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">filter</span> &#123;<br>    grok &#123;<br>        <span class="hljs-attr">match</span> =&gt; &#123; <span class="hljs-string">&quot;message&quot;</span> =&gt; <span class="hljs-string">&quot;%&#123;IP:clientip&#125;\ \[%&#123;HTTPDATE:timestamp&#125;\]\ %&#123;QS:referrer&#125;\ %&#123;NUMBER:response&#125;\ %&#123;NUMBER:bytes&#125;&quot;</span> &#125;<br>        <span class="hljs-keyword">remove_field</span> =&gt; [ <span class="hljs-string">&quot;message&quot;</span> ]<br>   &#125;<br><span class="hljs-keyword">date</span> &#123;<br>        <span class="hljs-attr">match</span> =&gt; [<span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;dd/MMM/yyyy:HH:mm:ss Z&quot;</span>]<br>    &#125;<br><span class="hljs-keyword">mutate</span> &#123;<br>           <span class="hljs-attr">rename</span> =&gt; &#123; <span class="hljs-string">&quot;response&quot;</span> =&gt; <span class="hljs-string">&quot;response_new&quot;</span> &#125;<br>           <span class="hljs-keyword">convert</span> =&gt; [ <span class="hljs-string">&quot;response&quot;</span>,<span class="hljs-string">&quot;float&quot;</span> ]<br>           gsub =&gt; [<span class="hljs-string">&quot;referrer&quot;</span>,<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>]<br>           remove_field =&gt; [<span class="hljs-string">&quot;timestamp&quot;</span>]<br>           split =&gt; [<span class="hljs-string">&quot;clientip&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>]<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">output</span> &#123;<br>    stdout &#123;<br>        <span class="hljs-attr">codec</span> =&gt; <span class="hljs-string">&quot;rubydebug&quot;</span><br>    &#125;<br><br><span class="hljs-keyword">elasticsearch</span> &#123;<br>    <span class="hljs-attr">host</span> =&gt; [<span class="hljs-string">&quot;localhost:9200&quot;</span>]<br>    <span class="hljs-attr">index</span> =&gt; <span class="hljs-string">&quot;logstash-%&#123;+YYYY.MM.dd&#125;&quot;</span>       <br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="14．-kibana学习"><a href="#14．-kibana学习" class="headerlink" title="14． kibana学习"></a>14． kibana学习</h1><h2 id="14-1基本查询"><a href="#14-1基本查询" class="headerlink" title="14.1基本查询"></a>14.1基本查询</h2><p>1是什么：elk中数据展现工具。</p><p>2下载：<a href="https://www.elastic.co/cn/downloads/kibana">https://www.elastic.co/cn/downloads/kibana</a></p><p>3使用：建立索引模式，index partten</p><p>discover 中使用DSL搜索。</p><h2 id="14-2-可视化"><a href="#14-2-可视化" class="headerlink" title="14.2 可视化"></a>14.2 可视化</h2><p>绘制图形</p><h2 id="14-3-仪表盘"><a href="#14-3-仪表盘" class="headerlink" title="14.3 仪表盘"></a>14.3 仪表盘</h2><p>将各种可视化图形放入，形成大屏幕。</p><h2 id="14-4-使用模板数据指导绘图"><a href="#14-4-使用模板数据指导绘图" class="headerlink" title="14.4 使用模板数据指导绘图"></a>14.4 使用模板数据指导绘图</h2><p>点击主页的添加模板数据，可以看到很多模板数据以及绘图。</p><h2 id="14-5-其他功能"><a href="#14-5-其他功能" class="headerlink" title="14.5 其他功能"></a>14.5 其他功能</h2><p>监控，日志，APM等功能非常丰富。</p><h1 id="15．-项目实战"><a href="#15．-项目实战" class="headerlink" title="15． 项目实战"></a>15． 项目实战</h1><h2 id="15-1项目一：ELK用于日志分析"><a href="#15-1项目一：ELK用于日志分析" class="headerlink" title="15.1项目一：ELK用于日志分析"></a>15.1项目一：ELK用于日志分析</h2><p>需求：集中收集分布式服务的日志</p><p>1逻辑模块程序随时输出日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.es;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.junit.runner.RunWith;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<br><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * creste by itheima.itcast</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestLog</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger LOGGER= LoggerFactory.getLogger(TestLog.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog</span><span class="hljs-params">()</span></span>&#123;<br>        Random random =<span class="hljs-keyword">new</span> Random();<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">int</span> userid=random.nextInt(<span class="hljs-number">10</span>);<br>            LOGGER.info(<span class="hljs-string">&quot;userId:&#123;&#125;,send:&#123;&#125;&quot;</span>,userid,<span class="hljs-string">&quot;hello world.I am &quot;</span>+userid);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">500</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2logstash收集日志到es</p><p><strong>grok 内置类型</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs inform7">USERNAME <span class="hljs-comment">[a-zA-Z0-9._-]</span>+<br>USER %&#123;USERNAME&#125;<br>INT (?:<span class="hljs-comment">[+-]</span>?(?:<span class="hljs-comment">[0-9]</span>+))<br>BASE10NUM (?&lt;!<span class="hljs-comment">[0-9.+-]</span>)(?&gt;<span class="hljs-comment">[+-]</span>?(?:(?:<span class="hljs-comment">[0-9]</span>+(?:\.<span class="hljs-comment">[0-9]</span>+)?)|(?:\.<span class="hljs-comment">[0-9]</span>+)))<br>NUMBER (?:%&#123;BASE10NUM&#125;)<br>BASE16NUM (?&lt;!<span class="hljs-comment">[0-9A-Fa-f]</span>)(?:<span class="hljs-comment">[+-]</span>?(?:0x)?(?:<span class="hljs-comment">[0-9A-Fa-f]</span>+))<br>BASE16FLOAT \b(?&lt;!<span class="hljs-comment">[0-9A-Fa-f.]</span>)(?:<span class="hljs-comment">[+-]</span>?(?:0x)?(?:(?:<span class="hljs-comment">[0-9A-Fa-f]</span>+(?:\.<span class="hljs-comment">[0-9A-Fa-f]</span>*)?)|(?:\.<span class="hljs-comment">[0-9A-Fa-f]</span>+)))\b<br><br>POSINT \b(?:<span class="hljs-comment">[1-9]</span><span class="hljs-comment">[0-9]</span>*)\b<br>NONNEGINT \b(?:<span class="hljs-comment">[0-9]</span>+)\b<br>WORD \b\w+\b<br>NOTSPACE \S+<br>SPACE \s*<br>DATA .*?<br>GREEDYDATA .*<br>QUOTEDSTRING (?&gt;(?&lt;!\\)(?&gt;<span class="hljs-string">&quot;(?&gt;\\.|<span class="hljs-subst">[^\\&quot;]</span>+)+&quot;</span>|<span class="hljs-string">&quot;&quot;</span>|(?&gt;&#x27;(?&gt;\\.|<span class="hljs-comment">[^\\&#x27;]</span>+)+&#x27;)|&#x27;&#x27;|(?&gt;`(?&gt;\\.|<span class="hljs-comment">[^\\`]</span>+)+`)|``))<br>UUID <span class="hljs-comment">[A-Fa-f0-9]</span>&#123;8&#125;-(?:<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;4&#125;-)&#123;3&#125;<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;12&#125;<br><br># Networking<br>MAC (?:%&#123;CISCOMAC&#125;|%&#123;WINDOWSMAC&#125;|%&#123;COMMONMAC&#125;)<br>CISCOMAC (?:(?:<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;4&#125;\.)&#123;2&#125;<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;4&#125;)<br>WINDOWSMAC (?:(?:<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;2&#125;-)&#123;5&#125;<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;2&#125;)<br>COMMONMAC (?:(?:<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;2&#125;:)&#123;5&#125;<span class="hljs-comment">[A-Fa-f0-9]</span>&#123;2&#125;)<br>IPV6 (((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;7&#125;(<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;|:))|((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;6&#125;(:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;|((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;)|:))|((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;5&#125;(((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;1,2&#125;)|:((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;)|:))|((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;4&#125;(((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;1,3&#125;)|((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)?:((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;))|:))|((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;3&#125;(((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;1,4&#125;)|((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;0,2&#125;:((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;))|:))|((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;2&#125;(((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;1,5&#125;)|((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;0,3&#125;:((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;))|:))|((<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;:)&#123;1&#125;(((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;1,6&#125;)|((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;0,4&#125;:((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;))|:))|(:(((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;1,7&#125;)|((:<span class="hljs-comment">[0-9A-Fa-f]</span>&#123;1,4&#125;)&#123;0,5&#125;:((25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d)(\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span>\d|1\d\d|<span class="hljs-comment">[1-9]</span>?\d))&#123;3&#125;))|:)))(%.+)?<br>IPV4 (?&lt;!<span class="hljs-comment">[0-9]</span>)(?:(?:25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>?<span class="hljs-comment">[0-9]</span>&#123;1,2&#125;)<span class="hljs-comment">[.]</span>(?:25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>?<span class="hljs-comment">[0-9]</span>&#123;1,2&#125;)<span class="hljs-comment">[.]</span>(?:25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>?<span class="hljs-comment">[0-9]</span>&#123;1,2&#125;)<span class="hljs-comment">[.]</span>(?:25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>?<span class="hljs-comment">[0-9]</span>&#123;1,2&#125;))(?!<span class="hljs-comment">[0-9]</span>)<br>IP (?:%&#123;IPV6&#125;|%&#123;IPV4&#125;)<br>HOSTNAME \b(?:<span class="hljs-comment">[0-9A-Za-z]</span><span class="hljs-comment">[0-9A-Za-z-]</span>&#123;0,62&#125;)(?:\.(?:<span class="hljs-comment">[0-9A-Za-z]</span><span class="hljs-comment">[0-9A-Za-z-]</span>&#123;0,62&#125;))*(\.?|\b)<br>HOST %&#123;HOSTNAME&#125;<br>IPORHOST (?:%&#123;HOSTNAME&#125;|%&#123;IP&#125;)<br>HOSTPORT %&#123;IPORHOST&#125;:%&#123;POSINT&#125;<br><br># paths<br>PATH (?:%&#123;UNIXPATH&#125;|%&#123;WINPATH&#125;)<br>UNIXPATH (?&gt;/(?&gt;<span class="hljs-comment">[\w_%!$@:.,-]</span>+|\\.)*)+<br>TTY (?:/dev/(pts|tty(<span class="hljs-comment">[pq]</span>)?)(\w+)?/?(?:<span class="hljs-comment">[0-9]</span>+))<br>WINPATH (?&gt;<span class="hljs-comment">[A-Za-z]</span>+:|\\)(?:\\<span class="hljs-comment">[^\\?*]</span>*)+<br>URIPROTO <span class="hljs-comment">[A-Za-z]</span>+(\+<span class="hljs-comment">[A-Za-z+]</span>+)?<br>URIHOST %&#123;IPORHOST&#125;(?::%&#123;POSINT:port&#125;)?<br># uripath comes loosely from RFC1738, but mostly from what Firefox<br># doesn&#x27;t turn into %XX<br>URIPATH (?:/<span class="hljs-comment">[A-Za-z0-9$.+!*&#x27;()&#123;&#125;,~:;=@#%_\-]</span>*)+<br>#URIPARAM \?(?:<span class="hljs-comment">[A-Za-z0-9]</span>+(?:=(?:<span class="hljs-comment">[^&amp;]</span>*))?(?:&amp;(?:<span class="hljs-comment">[A-Za-z0-9]</span>+(?:=(?:<span class="hljs-comment">[^&amp;]</span>*))?)?)*)?<br>URIPARAM \?<span class="hljs-comment">[A-Za-z0-9$.+!*&#x27;|()&#123;&#125;,~@#%&amp;/=:;_?\-\<span class="hljs-comment">[\]</span>]</span>*<br>URIPATHPARAM %&#123;URIPATH&#125;(?:%&#123;URIPARAM&#125;)?<br>URI %&#123;URIPROTO&#125;://(?:%&#123;USER&#125;(?::<span class="hljs-comment">[^@]</span>*)?@)?(?:%&#123;URIHOST&#125;)?(?:%&#123;URIPATHPARAM&#125;)?<br><br># Months: January, Feb, 3, 03, 12, December<br>MONTH \b(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\b<br>MONTHNUM (?:0?<span class="hljs-comment">[1-9]</span>|1<span class="hljs-comment">[0-2]</span>)<br>MONTHNUM2 (?:0<span class="hljs-comment">[1-9]</span>|1<span class="hljs-comment">[0-2]</span>)<br>MONTHDAY (?:(?:0<span class="hljs-comment">[1-9]</span>)|(?:<span class="hljs-comment">[12]</span><span class="hljs-comment">[0-9]</span>)|(?:3<span class="hljs-comment">[01]</span>)|<span class="hljs-comment">[1-9]</span>)<br><br># Days: Monday, Tue, Thu, etc...<br>DAY (?:Mon(?:day)?|Tue(?:sday)?|Wed(?:nesday)?|Thu(?:rsday)?|Fri(?:day)?|Sat(?:urday)?|Sun(?:day)?)<br><br># Years?<br>YEAR (?&gt;\d\d)&#123;1,2&#125;<br>HOUR (?:2<span class="hljs-comment">[0123]</span>|<span class="hljs-comment">[01]</span>?<span class="hljs-comment">[0-9]</span>)<br>MINUTE (?:<span class="hljs-comment">[0-5]</span><span class="hljs-comment">[0-9]</span>)<br># &#x27;60&#x27; <span class="hljs-keyword">is</span> a leap second in most time standards and thus <span class="hljs-keyword">is</span> valid.<br>SECOND (?:(?:<span class="hljs-comment">[0-5]</span>?<span class="hljs-comment">[0-9]</span>|60)(?:<span class="hljs-comment">[:.,]</span><span class="hljs-comment">[0-9]</span>+)?)<br>TIME (?!&lt;<span class="hljs-comment">[0-9]</span>)%&#123;HOUR&#125;:%&#123;MINUTE&#125;(?::%&#123;SECOND&#125;)(?!<span class="hljs-comment">[0-9]</span>)<br># datestamp <span class="hljs-keyword">is</span> YYYY/MM/DD-HH:MM:SS.UUUU (or something like it)<br>DATE_US %&#123;MONTHNUM&#125;<span class="hljs-comment">[/-]</span>%&#123;MONTHDAY&#125;<span class="hljs-comment">[/-]</span>%&#123;YEAR&#125;<br>DATE_EU %&#123;MONTHDAY&#125;<span class="hljs-comment">[./-]</span>%&#123;MONTHNUM&#125;<span class="hljs-comment">[./-]</span>%&#123;YEAR&#125;<br>ISO8601_TIMEZONE (?:Z|<span class="hljs-comment">[+-]</span>%&#123;HOUR&#125;(?::?%&#123;MINUTE&#125;))<br>ISO8601_SECOND (?:%&#123;SECOND&#125;|60)<br>TIMESTAMP_ISO8601 %&#123;YEAR&#125;-%&#123;MONTHNUM&#125;-%&#123;MONTHDAY&#125;<span class="hljs-comment">[T ]</span>%&#123;HOUR&#125;:?%&#123;MINUTE&#125;(?::?%&#123;SECOND&#125;)?%&#123;ISO8601_TIMEZONE&#125;?<br>DATE %&#123;DATE_US&#125;|%&#123;DATE_EU&#125;<br>DATESTAMP %&#123;DATE&#125;<span class="hljs-comment">[- ]</span>%&#123;TIME&#125;<br>TZ (?:<span class="hljs-comment">[PMCE]</span><span class="hljs-comment">[SD]</span>T|UTC)<br>DATESTAMP_RFC822 %&#123;DAY&#125; %&#123;MONTH&#125; %&#123;MONTHDAY&#125; %&#123;YEAR&#125; %&#123;TIME&#125; %&#123;TZ&#125;<br>DATESTAMP_RFC2822 %&#123;DAY&#125;, %&#123;MONTHDAY&#125; %&#123;MONTH&#125; %&#123;YEAR&#125; %&#123;TIME&#125; %&#123;ISO8601_TIMEZONE&#125;<br>DATESTAMP_OTHER %&#123;DAY&#125; %&#123;MONTH&#125; %&#123;MONTHDAY&#125; %&#123;TIME&#125; %&#123;TZ&#125; %&#123;YEAR&#125;<br>DATESTAMP_EVENTLOG %&#123;YEAR&#125;%&#123;MONTHNUM2&#125;%&#123;MONTHDAY&#125;%&#123;HOUR&#125;%&#123;MINUTE&#125;%&#123;SECOND&#125;<br><br># Syslog Dates: Month Day HH:MM:SS<br>SYSLOGTIMESTAMP %&#123;MONTH&#125; +%&#123;MONTHDAY&#125; %&#123;TIME&#125;<br>PROG (?:<span class="hljs-comment">[\w._/%-]</span>+)<br>SYSLOGPROG %&#123;PROG:program&#125;(?:\<span class="hljs-comment">[%&#123;POSINT:pid&#125;\]</span>)?<br>SYSLOGHOST %&#123;IPORHOST&#125;<br>SYSLOGFACILITY &lt;%&#123;NONNEGINT:facility&#125;.%&#123;NONNEGINT:priority&#125;&gt;<br>HTTPDATE %&#123;MONTHDAY&#125;/%&#123;MONTH&#125;/%&#123;YEAR&#125;:%&#123;TIME&#125; %&#123;INT&#125;<br><br># Shortcuts<br>QS %&#123;QUOTEDSTRING&#125;<br><br># Log formats<br>SYSLOGBASE %&#123;SYSLOGTIMESTAMP:timestamp&#125; (?:%&#123;SYSLOGFACILITY&#125; )?%&#123;SYSLOGHOST:logsource&#125; %&#123;SYSLOGPROG&#125;:<br>COMMONAPACHELOG %&#123;IPORHOST:clientip&#125; %&#123;USER:ident&#125; %&#123;USER:auth&#125; \<span class="hljs-comment">[%&#123;HTTPDATE:timestamp&#125;\]</span> <span class="hljs-string">&quot;(?:%&#123;WORD:verb&#125; %&#123;NOTSPACE:request&#125;(?: HTTP/%&#123;NUMBER:httpversion&#125;)?|%&#123;DATA:rawrequest&#125;)&quot;</span> %&#123;NUMBER:response&#125; (?:%&#123;NUMBER:bytes&#125;|-)<br>COMBINEDAPACHELOG %&#123;COMMONAPACHELOG&#125; %&#123;QS:referrer&#125; %&#123;QS:agent&#125;<br><br># Log Levels<br>LOGLEVEL (<span class="hljs-comment">[Aa]</span>lert|ALERT|<span class="hljs-comment">[Tt]</span>race|TRACE|<span class="hljs-comment">[Dd]</span>ebug|DEBUG|<span class="hljs-comment">[Nn]</span>otice|NOTICE|<span class="hljs-comment">[Ii]</span>nfo|INFO|<span class="hljs-comment">[Ww]</span>arn?(?:ing)?|WARN?(?:ING)?|<span class="hljs-comment">[Ee]</span>rr?(?:or)?|ERR?(?:OR)?|<span class="hljs-comment">[Cc]</span>rit?(?:ical)?|CRIT?(?:ICAL)?|<span class="hljs-comment">[Ff]</span>atal|FATAL|<span class="hljs-comment">[Ss]</span>evere|SEVERE|EMERG(?:ENCY)?|<span class="hljs-comment">[Ee]</span>merg(?:ency)?)<br></code></pre></td></tr></table></figure><p>写logstash配置文件。</p><p>3kibana展现数据</p><h2 id="15-2项目二：学成在线站内搜索模块"><a href="#15-2项目二：学成在线站内搜索模块" class="headerlink" title="15.2项目二：学成在线站内搜索模块"></a>15.2项目二：学成在线站内搜索模块</h2><h3 id="1mysql导入course-pub表"><a href="#1mysql导入course-pub表" class="headerlink" title="1mysql导入course_pub表"></a>1mysql导入course_pub表</h3><h3 id="2创建索引xc-course"><a href="#2创建索引xc-course" class="headerlink" title="2创建索引xc_course"></a>2创建索引xc_course</h3><h3 id="3创建映射"><a href="#3创建映射" class="headerlink" title="3创建映射"></a>3创建映射</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs ada">PUT /xc_course<br>&#123;<br>  <span class="hljs-string">&quot;settings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;number_of_replicas&quot;</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-string">&quot;mappings&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;properties&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;description&quot;</span> : &#123;<br>                <span class="hljs-string">&quot;analyzer&quot;</span> : &quot;<span class="hljs-type">ik_max_word</span><span class="hljs-string">&quot;,</span><br><span class="hljs-string">                &quot;</span>search_analyzer<span class="hljs-string">&quot;: &quot;</span>ik_smart<span class="hljs-string">&quot;,</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>grade<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>id<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>mt<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>name<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>analyzer<span class="hljs-string">&quot; : &quot;</span>ik_max_word<span class="hljs-string">&quot;,</span><br><span class="hljs-string">           &quot;</span>search_analyzer<span class="hljs-string">&quot;: &quot;</span>ik_smart<span class="hljs-string">&quot;,</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>users<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span>index<span class="hljs-string">&quot; : false,</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>charge<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>valid<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>pic<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span>index<span class="hljs-string">&quot; : false,</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>qq<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span>index<span class="hljs-string">&quot; : false,</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>price<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>float<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>price_old<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>float<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>st<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>status<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>studymodel<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>teachmode<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>keyword<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>teachplan<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                &quot;</span>analyzer<span class="hljs-string">&quot; : &quot;</span>ik_max_word<span class="hljs-string">&quot;,</span><br><span class="hljs-string">           &quot;</span>search_analyzer<span class="hljs-string">&quot;: &quot;</span>ik_smart<span class="hljs-string">&quot;,</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>text<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">           &quot;</span>expires<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date<span class="hljs-string">&quot;,</span><br><span class="hljs-string">            &quot;</span>format<span class="hljs-string">&quot;: &quot;</span>yyyy-MM-dd HH:mm:ss<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>pub_time<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date<span class="hljs-string">&quot;,</span><br><span class="hljs-string">             &quot;</span>format<span class="hljs-string">&quot;: &quot;</span>yyyy-MM-dd HH:mm:ss<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">            &quot;</span>start_time<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">               &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date<span class="hljs-string">&quot;,</span><br><span class="hljs-string">           &quot;</span>format<span class="hljs-string">&quot;: &quot;</span>yyyy-MM-dd HH:mm:ss<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;,</span><br><span class="hljs-string">          &quot;</span>end_time<span class="hljs-string">&quot; : &#123;</span><br><span class="hljs-string">                 &quot;</span><span class="hljs-keyword">type</span><span class="hljs-string">&quot; : &quot;</span>date<span class="hljs-string">&quot;,</span><br><span class="hljs-string">           &quot;</span>format<span class="hljs-string">&quot;: &quot;</span>yyyy-MM-dd HH:mm:ss<span class="hljs-string">&quot;</span><br><span class="hljs-string">            &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125; </span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="4logstash创建模板文件"><a href="#4logstash创建模板文件" class="headerlink" title="4logstash创建模板文件"></a>4logstash创建模板文件</h3><p>Logstash的工作是从MySQL中读取数据，向ES中创建索引，这里需要提前创建mapping的模板文件以便logstash使用。</p><p>在logstach的config目录创建xc_course_template.json，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>   <span class="hljs-attr">&quot;mappings&quot;</span> : &#123;<br>      <span class="hljs-attr">&quot;doc&quot;</span> : &#123;<br>         <span class="hljs-attr">&quot;properties&quot;</span> : &#123;<br>            <span class="hljs-attr">&quot;charge&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;description&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;analyzer&quot;</span> : <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>               <span class="hljs-attr">&quot;search_analyzer&quot;</span> : <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;end_time&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;format&quot;</span> : <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;date&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;expires&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;format&quot;</span> : <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;date&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;grade&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;id&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;mt&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;name&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;analyzer&quot;</span> : <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>               <span class="hljs-attr">&quot;search_analyzer&quot;</span> : <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;pic&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;index&quot;</span> : <span class="hljs-literal">false</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;price&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;float&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;price_old&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;float&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;pub_time&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;format&quot;</span> : <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;date&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;qq&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;index&quot;</span> : <span class="hljs-literal">false</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;st&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;start_time&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;format&quot;</span> : <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;date&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;status&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;studymodel&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;teachmode&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;teachplan&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;analyzer&quot;</span> : <span class="hljs-string">&quot;ik_max_word&quot;</span>,<br>               <span class="hljs-attr">&quot;search_analyzer&quot;</span> : <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;users&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;index&quot;</span> : <span class="hljs-literal">false</span>,<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;text&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;valid&quot;</span> : &#123;<br>               <span class="hljs-attr">&quot;type&quot;</span> : <span class="hljs-string">&quot;keyword&quot;</span><br>            &#125;<br>         &#125;<br>      &#125;<br>   &#125;,<br>   <span class="hljs-attr">&quot;template&quot;</span> : <span class="hljs-string">&quot;xc_course&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5logstash配置mysql-conf"><a href="#5logstash配置mysql-conf" class="headerlink" title="5logstash配置mysql.conf"></a>5logstash配置mysql.conf</h3><p>1、ES采用UTC时区问题</p><p>ES采用UTC 时区，比北京时间早8小时，所以ES读取数据时让最后更新时间加8小时</p><p>where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)</p><p>2、logstash每个执行完成会在/config/logstash_metadata记录执行时间下次以此时间为基准进行增量同步数据到索引库。</p><h3 id="6启动"><a href="#6启动" class="headerlink" title="6启动"></a>6启动</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">.<span class="hljs-symbol">\l</span>ogstash.bat -f ..<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\m</span>ysql.conf<br></code></pre></td></tr></table></figure><p>7后端代码</p><p>7.1Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/search/course&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EsCourseController</span>  </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    EsCourseService esCourseService;<br><br>    <span class="hljs-meta">@GetMapping(value=&quot;/list/&#123;page&#125;/&#123;size&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> QueryResponseResult&lt;CoursePub&gt; <span class="hljs-title">list</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;page&quot;)</span> <span class="hljs-keyword">int</span> page, <span class="hljs-meta">@PathVariable(&quot;size&quot;)</span> <span class="hljs-keyword">int</span> size, CourseSearchParam courseSearchParam)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> esCourseService.list(page,size,courseSearchParam);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>7.2</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Service<br>public <span class="hljs-keyword">class</span> EsCourseService &#123;<br>    @<span class="hljs-constructor">Value(<span class="hljs-string">&quot;$&#123;heima.course.source_field&#125;&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String source_field;<br><br>    @Autowired<br>    RestHighLevelClient restHighLevelClient;<br><br>    <span class="hljs-comment">//课程搜索</span><br>    public QueryResponseResult&lt;CoursePub&gt; <span class="hljs-built_in">list</span>(<span class="hljs-built_in">int</span> page, <span class="hljs-built_in">int</span> size, CourseSearchParam courseSearchParam) &#123;<br>        <span class="hljs-keyword">if</span> (courseSearchParam<span class="hljs-operator"> == </span>null) &#123;<br>            courseSearchParam = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CourseSearchParam()</span>;<br>        &#125;<br>        <span class="hljs-comment">//1创建搜索请求对象</span><br>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>)</span>;<br><br>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchSourceBuilder()</span>;<br>        <span class="hljs-comment">//过虑源字段</span><br>        String<span class="hljs-literal">[]</span> source_field_array = source_field.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        searchSourceBuilder.fetch<span class="hljs-constructor">Source(<span class="hljs-params">source_field_array</span>, <span class="hljs-params">new</span> String[]&#123;&#125;)</span>;<br>        <span class="hljs-comment">//创建布尔查询对象</span><br>        BoolQueryBuilder boolQueryBuilder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-built_in">bool</span><span class="hljs-constructor">Query()</span>;<br>        <span class="hljs-comment">//搜索条件</span><br>        <span class="hljs-comment">//根据关键字搜索</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getKeyword</span>()</span>)) &#123;<br>            MultiMatchQueryBuilder multiMatchQueryBuilder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>multi<span class="hljs-constructor">MatchQuery(<span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getKeyword</span>()</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;teachplan&quot;</span>)<br>                    .minimum<span class="hljs-constructor">ShouldMatch(<span class="hljs-string">&quot;70%&quot;</span>)</span><br>                    .field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);<br>            boolQueryBuilder.must(multiMatchQueryBuilder);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getMt</span>()</span>)) &#123;<br>            <span class="hljs-comment">//根据一级分类</span><br>            boolQueryBuilder.filter(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;mt&quot;</span>, <span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getMt</span>()</span>));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getSt</span>()</span>)) &#123;<br>            <span class="hljs-comment">//根据二级分类</span><br>            boolQueryBuilder.filter(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;st&quot;</span>, <span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getSt</span>()</span>));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StringUtils</span>.</span></span>is<span class="hljs-constructor">NotEmpty(<span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getGrade</span>()</span>)) &#123;<br>            <span class="hljs-comment">//根据难度等级</span><br>            boolQueryBuilder.filter(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;grade&quot;</span>, <span class="hljs-params">courseSearchParam</span>.<span class="hljs-params">getGrade</span>()</span>));<br>        &#125;<br><br>        <span class="hljs-comment">//设置boolQueryBuilder到searchSourceBuilder</span><br>        searchSourceBuilder.query(boolQueryBuilder);<br>        <span class="hljs-comment">//设置分页参数</span><br>        <span class="hljs-keyword">if</span> (page &lt;= <span class="hljs-number">0</span>) &#123;<br>            page = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>            size = <span class="hljs-number">12</span>;<br>        &#125;<br>        <span class="hljs-comment">//起始记录下标</span><br>        <span class="hljs-built_in">int</span> from = (page - <span class="hljs-number">1</span>)<span class="hljs-operator"> * </span>size;<br>        searchSourceBuilder.from(from);<br>        searchSourceBuilder.size(size);<br><br>        <span class="hljs-comment">//设置高亮</span><br>        HighlightBuilder highlightBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HighlightBuilder()</span>;<br>        highlightBuilder.pre<span class="hljs-constructor">Tags(<span class="hljs-string">&quot;&lt;font class=&#x27;eslight&#x27;&gt;&quot;</span>)</span>;<br>        highlightBuilder.post<span class="hljs-constructor">Tags(<span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>)</span>;<br>        <span class="hljs-comment">//设置高亮字段</span><br><span class="hljs-comment">//        &lt;font class=&#x27;eslight&#x27;&gt;node&lt;/font&gt;学习</span><br>        highlightBuilder.fields<span class="hljs-literal">()</span>.add(<span class="hljs-keyword">new</span> HighlightBuilder.<span class="hljs-constructor">Field(<span class="hljs-string">&quot;name&quot;</span>)</span>);<br>        searchSourceBuilder.highlighter(highlightBuilder);<br><br>        searchRequest.source(searchSourceBuilder);<br><br>        QueryResult&lt;CoursePub&gt; queryResult = <span class="hljs-keyword">new</span> <span class="hljs-constructor">QueryResult()</span>;<br>        List&lt;CoursePub&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;CoursePub&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//2执行搜索</span><br>            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br>            <span class="hljs-comment">//3获取响应结果</span><br>            SearchHits hits = searchResponse.get<span class="hljs-constructor">Hits()</span>;<br>            long totalHits=hits.get<span class="hljs-constructor">TotalHits()</span>.value;<br>            <span class="hljs-comment">//匹配的总记录数</span><br><span class="hljs-comment">//            long totalHits = hits.totalHits;</span><br>            queryResult.set<span class="hljs-constructor">Total(<span class="hljs-params">totalHits</span>)</span>;<br>            SearchHit<span class="hljs-literal">[]</span> searchHits = hits.get<span class="hljs-constructor">Hits()</span>;<br>            <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;<br>                CoursePub coursePub = <span class="hljs-keyword">new</span> <span class="hljs-constructor">CoursePub()</span>;<br>                <span class="hljs-comment">//源文档</span><br>                Map&lt;String, Object&gt; sourceAsMap = hit.get<span class="hljs-constructor">SourceAsMap()</span>;<br>                <span class="hljs-comment">//取出id</span><br>                String id = (String) sourceAsMap.get(<span class="hljs-string">&quot;id&quot;</span>);<br>                coursePub.set<span class="hljs-constructor">Id(<span class="hljs-params">id</span>)</span>;<br>                <span class="hljs-comment">//取出name</span><br>                String name = (String) sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-comment">//取出高亮字段name</span><br>                Map&lt;String, HighlightField&gt; highlightFields = hit.get<span class="hljs-constructor">HighlightFields()</span>;<br>                <span class="hljs-keyword">if</span> (highlightFields != null) &#123;<br>                    HighlightField highlightFieldName = highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (highlightFieldName != null) &#123;<br>                        Text<span class="hljs-literal">[]</span> fragments = highlightFieldName.fragments<span class="hljs-literal">()</span>;<br>                        StringBuffer stringBuffer = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuffer()</span>;<br>                        <span class="hljs-keyword">for</span> (Text text : fragments) &#123;<br>                            stringBuffer.append(text);<br>                        &#125;<br>                        name = stringBuffer.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>;<br>                    &#125;<br>                &#125;<br>                coursePub.set<span class="hljs-constructor">Name(<span class="hljs-params">name</span>)</span>;<br>                <span class="hljs-comment">//图片</span><br>                String pic = (String) sourceAsMap.get(<span class="hljs-string">&quot;pic&quot;</span>);<br>                coursePub.set<span class="hljs-constructor">Pic(<span class="hljs-params">pic</span>)</span>;<br>                <span class="hljs-comment">//价格</span><br>                Double price = null;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>) != null) &#123;<br>                        price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);<br>                    &#125;<br><br>                &#125; catch (Exception e) &#123;<br>                    e.print<span class="hljs-constructor">StackTrace()</span>;<br>                &#125;<br>                coursePub.set<span class="hljs-constructor">Price(<span class="hljs-params">price</span>)</span>;<br>                <span class="hljs-comment">//旧价格</span><br>                Double price_old = null;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (sourceAsMap.get(<span class="hljs-string">&quot;price_old&quot;</span>) != null) &#123;<br>                        price_old = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price_old&quot;</span>);<br>                    &#125;<br>                &#125; catch (Exception e) &#123;<br>                    e.print<span class="hljs-constructor">StackTrace()</span>;<br>                &#125;<br>                coursePub.set<span class="hljs-constructor">Price_old(<span class="hljs-params">price_old</span>)</span>;<br>                <span class="hljs-comment">//将coursePub对象放入list</span><br>                <span class="hljs-built_in">list</span>.add(coursePub);<br>            &#125;<br><br><br>        &#125; catch (IOException e) &#123;<br>            e.print<span class="hljs-constructor">StackTrace()</span>;<br>        &#125;<br><br>        queryResult.set<span class="hljs-constructor">List(<span class="hljs-params">list</span>)</span>;<br>        QueryResponseResult&lt;CoursePub&gt; queryResponseResult = <span class="hljs-keyword">new</span> QueryResponseResult&lt;CoursePub&gt;(CommonCode.SUCCESS, queryResult);<br><br>        return queryResponseResult;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot2</title>
    <link href="/2022/03/07/springboot2/"/>
    <url>/2022/03/07/springboot2/</url>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ul><li>SpringBoot快速入门</li><li>SpringBoot基础配置</li><li>基于SpringBoot整合SSMP</li></ul><h2 id="快速入门和基础配置"><a href="#快速入门和基础配置" class="headerlink" title="快速入门和基础配置"></a>快速入门和基础配置</h2><h3 id="几种搭建SpringBoot的方式"><a href="#几种搭建SpringBoot的方式" class="headerlink" title="几种搭建SpringBoot的方式"></a>几种搭建SpringBoot的方式</h3><ul><li>idea中根据向导进行联网快速制作</li><li>SpringBoot官网制作</li><li>选择start来源为自定义URL <a href="http://start.aliyun.com或https//start.aliyun.com">http://start.aliyun.com或https://start.aliyun.com</a></li><li>手动创建一个maven工程，改造成sprinboot（1.pom 2.引导类)</li></ul><h3 id="在Idea中隐藏指定文件-文件夹"><a href="#在Idea中隐藏指定文件-文件夹" class="headerlink" title="在Idea中隐藏指定文件/文件夹"></a>在Idea中隐藏指定文件/文件夹</h3><p>【Files】-&gt;【Settings】-&gt;【Editor】-&gt;【File Types】-&gt;【Ignored Files and Folders】</p><h3 id="springboot的pom文件"><a href="#springboot的pom文件" class="headerlink" title="springboot的pom文件"></a>springboot的pom文件</h3><ul><li>继承spring-boot-starter-parent(SpringBoot统一管理版本减少依赖冲突的)</li><li>实际开发中如果需要用什么技术，先去找有没有这个技术对应的starter (starter可以实现快速配置的效果)<ul><li>如果有对应的starter，直接写starter，而且无需指定版本，版本由parent提供</li><li>如果没有对应的starter，手写坐标即可</li></ul></li></ul><h3 id="springboot中tomcat服务器运行原因"><a href="#springboot中tomcat服务器运行原因" class="headerlink" title="springboot中tomcat服务器运行原因"></a>springboot中tomcat服务器运行原因</h3><p>其实是以对象的形式在Spring容器中运行的(主要是在tomcat-embed-core里)</p><h3 id="更换内嵌Tomcat"><a href="#更换内嵌Tomcat" class="headerlink" title="更换内嵌Tomcat"></a>更换内嵌Tomcat</h3><p>排除掉spring-boot-starter-tomcat 新增一个spring-boot-starter-jetty</p><h3 id="springboot配置文件"><a href="#springboot配置文件" class="headerlink" title="springboot配置文件"></a>springboot配置文件</h3><p>默认是application.properties</p><ul><li>properties格式</li><li>yml格式</li><li>yaml格式</li></ul><p>优先级<br>application.properties  &gt;  application.yml  &gt;  application.yaml<br>相同的按优先级覆盖，不同的都保留</p><h3 id="自动提示功能消失解决方案"><a href="#自动提示功能消失解决方案" class="headerlink" title="自动提示功能消失解决方案"></a>自动提示功能消失解决方案</h3><ul><li>Setting → Project Structure → Facets</li><li>选中对应项目/工程</li><li>Customize Spring Boot</li><li>选择配置文件</li></ul><h3 id="yml数据读取"><a href="#yml数据读取" class="headerlink" title="yml数据读取"></a>yml数据读取</h3><ul><li>@Value 读取单个数据</li><li>@Autowired 自动装配数据到Environment对象中</li><li>@ConfigurationProperties 常用的做法是封装到对象，只加载部分数据</li></ul><h2 id="整合SSMP"><a href="#整合SSMP" class="headerlink" title="整合SSMP"></a>整合SSMP</h2><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><h3 id="spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包"><a href="#spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包" class="headerlink" title="spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包"></a>spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包</h3><p>为什么可以独立运行呢？</p><ul><li>读取MANIFEST.MF 里的Main-Class jar运行的入口</li><li>org.springframework.boot.loader.JarLauncher运行时会找到Start-Class属性com.itheima.SSMPApplication</li><li>运行启动类启动SpringBoot程序</li><li>依赖的jar包放在lib里</li></ul><h3 id="程序运行时端口占用问题"><a href="#程序运行时端口占用问题" class="headerlink" title="程序运行时端口占用问题"></a>程序运行时端口占用问题</h3><ul><li>查找所有端口使用情况 netstat -ano</li><li>查找指定端口 netstat -ano | findstr “端口号”</li><li>查找PID对应的进程 tasklist | findstr “进程PID号”</li><li>根据进程号杀死进程 taskkill /f /pid “进程PID号”</li><li>根据进程名称杀死进程 taskkill /f /t /im “”  (/f 强制， /t 关联子进程， /im 进程名称)<h3 id="临时属性配置"><a href="#临时属性配置" class="headerlink" title="临时属性配置"></a>临时属性配置</h3></li><li>java –jar springboot.jar –-server.port=80 –logging.level.root=debug</li><li>Program arguments对应的位置就是添加临时属性的</li><li>本质上都是传递到main函数的args数组中</li><li>由于临时属性优先级比较高，超过配置文件，企业开发中通常关闭临时属性入口</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>SpringApplication.<span class="hljs-built_in">run</span>(SSMPApplication.class);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4种配置文件"><a href="#4种配置文件" class="headerlink" title="4种配置文件"></a>4种配置文件</h3><ul><li>jar所在目录的config文件里的application.yml 优先级最高 运维经理整体调控</li><li>jar所在目录的application.yml 运维人员</li><li>classpath: config/application.yml 项目经理</li><li>classpath: application.yml 开发</li></ul><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><ul><li>通过临时参数配置配置文件名称 –spring.config.name=e.properties,b.properties</li><li>通过临时参数配置配置文件路径 –spring.config.location=classpath:/e.yml,classpath:/b.yml</li><li>微服务使用的配置中心管理</li></ul><h3 id="多环境开发推荐使用多文件版本"><a href="#多环境开发推荐使用多文件版本" class="headerlink" title="多环境开发推荐使用多文件版本"></a>多环境开发推荐使用多文件版本</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span><br><span class="hljs-attr">active:</span> <span class="hljs-string">pro</span><span class="hljs-comment"># 启动pro</span><br></code></pre></td></tr></table></figure><p><em><strong>application-pro.yaml</strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p><em><strong>application-dev.yaml</strong></em></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><h3 id="多环境开发使用group属性设置配置文件分组，便于线上维护管理"><a href="#多环境开发使用group属性设置配置文件分组，便于线上维护管理" class="headerlink" title="多环境开发使用group属性设置配置文件分组，便于线上维护管理"></a>多环境开发使用group属性设置配置文件分组，便于线上维护管理</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>        <span class="hljs-attr">group:</span><br>        <span class="hljs-attr">&quot;dev&quot;:</span> <span class="hljs-string">devDB,devRedis,devMVC</span><br>      <span class="hljs-attr">&quot;pro&quot;:</span> <span class="hljs-string">proDB,proRedis,proMVC</span><br>      <span class="hljs-attr">&quot;test&quot;:</span> <span class="hljs-string">testDB,testRedis,testMVC</span><br></code></pre></td></tr></table></figure><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_dev<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>dev<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><span class="hljs-comment">&lt;!--默认启动环境--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>env_pro<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">profile.active</span>&gt;</span>pro<span class="hljs-tag">&lt;/<span class="hljs-name">profile.active</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>SpringBoot中读取maven设置值</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">@profile.active@</span><br></code></pre></td></tr></table></figure><p>上面的@属性名@就是读取maven中配置的属性值的语法格式。</p><h4 id="idea里的一个bug"><a href="#idea里的一个bug" class="headerlink" title="idea里的一个bug"></a>idea里的一个bug</h4><p>在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</p><h1 id="开发实用篇"><a href="#开发实用篇" class="headerlink" title="开发实用篇"></a>开发实用篇</h1><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><h3 id="idea自动热部署实现-idea设置当idea工具失去焦点5秒后进行热部署"><a href="#idea自动热部署实现-idea设置当idea工具失去焦点5秒后进行热部署" class="headerlink" title="idea自动热部署实现(idea设置当idea工具失去焦点5秒后进行热部署)"></a>idea自动热部署实现(idea设置当idea工具失去焦点5秒后进行热部署)</h3><ul><li><strong>步骤1</strong> 导入开发者工具对应的坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>步骤2</strong> setting-&gt;build-&gt;Compiler-&gt;勾选【Build project automatically】</li></ul><h3 id="设置不参与热部署的文件或文件夹"><a href="#设置不参与热部署的文件或文件夹" class="headerlink" title="设置不参与热部署的文件或文件夹"></a>设置不参与热部署的文件或文件夹</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-attr">exclude:</span> <span class="hljs-string">static/**,public/**,config/application.yml</span><br></code></pre></td></tr></table></figure><h3 id="关闭热部署（生产环境不需要热部署功能，资源浪费）"><a href="#关闭热部署（生产环境不需要热部署功能，资源浪费）" class="headerlink" title="关闭热部署（生产环境不需要热部署功能，资源浪费）"></a>关闭热部署（生产环境不需要热部署功能，资源浪费）</h3><ul><li>yaml配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">devtools:</span><br>    <span class="hljs-attr">restart:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></li><li>更高优先级配置<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@SpringBootApplication<br>public <span class="hljs-keyword">class</span> SSMPApplication &#123;<br>    public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;spring.devtools.restart.enabled&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>)</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SpringApplication</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SSMPApplication</span>.</span></span><span class="hljs-keyword">class</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><ul><li>使用@ConfigurationProperties可以为使用@Bean声明的第三方bean绑定属性 (可是在方法上使用)</li><li>当使用@EnableConfigurationProperties声明进行属性绑定的bean后，无需使用@Component注解再次进行bean声明（统一管理属性绑定的bean）</li></ul><h3 id="松散绑定-yaml配置文件属性格式松散"><a href="#松散绑定-yaml配置文件属性格式松散" class="headerlink" title="松散绑定(yaml配置文件属性格式松散)"></a>松散绑定(yaml配置文件属性格式松散)</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs YML"><span class="hljs-attr">servers:</span><br>  <span class="hljs-attr">ipAddress:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>       <span class="hljs-comment"># 驼峰模式</span><br>  <span class="hljs-attr">ip_address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>      <span class="hljs-comment"># 下划线模式</span><br>  <span class="hljs-attr">ip-address:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>      <span class="hljs-comment"># 烤肉串模式</span><br>  <span class="hljs-attr">IP_ADDRESS:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>      <span class="hljs-comment"># 常量模式</span><br></code></pre></td></tr></table></figure><p>推荐使用中划线格式也就是烤肉串模式</p><p>@Value注解不支持松散绑定规则</p><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.validation<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>validation-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;servers&quot;)</span><br><span class="hljs-comment">//开启对当前bean的属性注入校验</span><br><span class="hljs-meta">@Validated</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServerConfig</span> </span>&#123;<br>    <span class="hljs-comment">//设置具体的规则</span><br>    <span class="hljs-meta">@Max(value = 8888,message = &quot;最大值不能超过8888&quot;)</span><br>    <span class="hljs-meta">@Min(value = 202,message = &quot;最小值不能低于202&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> port;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>导入JSR303和校验框架坐标</li><li>@Validated启动校验功能</li><li>@Max(value=222,message=”最大值不能超过8888”) 设置校验格式</li></ul><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><ul><li>yaml文件中对于数字的定义支持进制（<strong>支持二进制，八进制，十六进制</strong>）书写格式，如需使用字符串请使用引号明确标注</li><li>双引号不会对串中转义字符进行转义 单引号会转义</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h2 id="数据层解决方案"><a href="#数据层解决方案" class="headerlink" title="数据层解决方案"></a>数据层解决方案</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>数据层解决方案=数据源+持久化+数据库三种技术（如Druid+MyBatisPlus+Mysql）</p><h4 id="数据源技术"><a href="#数据源技术" class="headerlink" title="数据源技术"></a>数据源技术</h4><ul><li>Druid数据源<ul><li>引入starter坐标<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>yaml配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">datasource:</span><br>        <span class="hljs-attr">druid:</span><br>            <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span><br>            <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>            <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>            <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure></li></ul></li><li>Hikari springboot默认使用的<br>  如果使用默认的配置删除druid就行<br>  否则配置如下  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs YAML"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="持久化技术"><a href="#持久化技术" class="headerlink" title="持久化技术"></a>持久化技术</h4><ul><li>SpringBoot内置JdbcTemplate持久化解决方案</li><li>使用JdbcTemplate需要导入spring-boot-starter-jdbc的坐标</li><li>Spring JdbcTemplate的使用<ul><li>查找<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Test<br>void test<span class="hljs-constructor">JdbcTemplate(@Autowired JdbcTemplate <span class="hljs-params">jdbcTemplate</span>)</span>&#123;<br>    <br>    String sql = <span class="hljs-string">&quot;select * from tbl_book&quot;</span>;<br>    RowMapper&lt;Book&gt; rm = <span class="hljs-keyword">new</span> RowMapper&lt;Book&gt;<span class="hljs-literal">()</span> &#123;<br>        @Override<br>        public Book map<span class="hljs-constructor">Row(ResultSet <span class="hljs-params">rs</span>, <span class="hljs-params">int</span> <span class="hljs-params">rowNum</span>)</span> throws SQLException &#123;<br>            Book temp = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Book()</span>;<br>            temp.set<span class="hljs-constructor">Id(<span class="hljs-params">rs</span>.<span class="hljs-params">getInt</span>(<span class="hljs-string">&quot;id&quot;</span>)</span>);<br>            temp.set<span class="hljs-constructor">Name(<span class="hljs-params">rs</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;name&quot;</span>)</span>);<br>            temp.set<span class="hljs-constructor">Type(<span class="hljs-params">rs</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;type&quot;</span>)</span>);<br>            temp.set<span class="hljs-constructor">Description(<span class="hljs-params">rs</span>.<span class="hljs-params">getString</span>(<span class="hljs-string">&quot;description&quot;</span>)</span>);<br>            return temp;<br>        &#125;<br>    &#125;;<br>    List&lt;Book&gt; <span class="hljs-built_in">list</span> = jdbcTemplate.query(sql, rm);<br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-built_in">list</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>增删改<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Test</span><br><span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">testJdbcTemplateSave</span>(<span class="hljs-params"><span class="hljs-meta">@Autowired</span> JdbcTemplate jdbcTemplate</span>)</span>&#123;<br><span class="hljs-built_in">String</span> sql = <span class="hljs-string">&quot;insert into tbl_book values(3,&#x27;springboot1&#x27;,&#x27;springboot2&#x27;,&#x27;springboot3&#x27;)&quot;</span>;<br>jdbcTemplate.update(sql);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h4><p>springboot提供了3款内置的数据库，分别是</p><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul><ol><li>H2内嵌式数据库启动方式，添加坐标，添加配置</li><li>H2数据库线上运行时请务必关闭<br>pom依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.h2database<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>如果需要访问h2控制台需要引入web<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>yaml 开启访问</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">h2:</span><br>    <span class="hljs-attr">console:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/h2</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:h2:~/test</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">sa</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h3 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h3><h4 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h4><ul><li>导入springboot整合redis的starter坐标spring-boot-starter-data-redis</li><li>进行基础配置,可以不配,默认host: localhost port: 6379</li><li>使用springboot整合redis的专用客户端接口RedisTemplate操作 opsForValue opsForHash</li><li>可以修改redis客户端 client-type: jedis  springboot2默认是lettuce(jedis非线程安全，lettuce基于netty与服务器连接线程安全)</li></ul><h4 id="mongodb"><a href="#mongodb" class="headerlink" title="mongodb"></a>mongodb</h4><ul><li>导入springboot整合mogodb的starter坐标spring-boot-starter-data-mongodb</li><li>yaml设置数据库  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  data:</span><br><span class="hljs-symbol">    mongodb:</span><br><span class="hljs-symbol">      uri:</span> mongodb:<span class="hljs-comment">//localhost/itheima</span><br></code></pre></td></tr></table></figure></li><li>使用springboot整合mongodb的专用客户端接口MongoTemplate操作</li></ul><h4 id="ElasticSearch全文搜索"><a href="#ElasticSearch全文搜索" class="headerlink" title="ElasticSearch全文搜索"></a>ElasticSearch全文搜索</h4><ol><li>倒排索引 （数据得到id,再用id查数据） <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">- 例如<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>的数据中名称这一项的值是“中华人民共和国”，那么分词结束后，就会出现“中华”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>，“人民”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span>，“共和国”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">1</span><br><br>- 例如<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span>的数据中名称这一项的值是“人民代表大会“，那么分词结束后，就会出现“人民”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span>，“代表”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span>，“大会”对应<span class="hljs-built_in">id</span>为<span class="hljs-number">2</span><br><br>- 此时就会出现如下对应结果，按照上述形式可以对所有文档进行分词。需要注意分词的过程不是仅对一个字段进行，而是对每一个参与查询的字段都执行，最终结果汇总到一个表格中<br></code></pre></td></tr></table></figure><table><thead><tr><th>分词结果关键字</th><th>对应id</th></tr></thead><tbody><tr><td>中华</td><td>1</td></tr><tr><td>人民</td><td>1,2</td></tr><tr><td>共和国</td><td>1</td></tr><tr><td>代表</td><td>2</td></tr><tr><td>大会</td><td>2</td></tr></tbody></table></li><li>创建文档 </li><li>使用文档</li></ol><p><strong>Es支持rest操作,用postman可以操作,Ik 分词器设置索引规则</strong></p><p><strong>rest操作</strong></p><ol><li>添加 post<ul><li>_doc  设置随机id</li><li>_doc/1 设置指定id</li><li>_create/1 设置指定id</li></ul></li><li>查询 get<ul><li>_doc/1 查询指定id</li><li>_search 查所有</li><li>_search?q=name:springboot  条件查</li></ul></li><li>修改put 或者post <ul><li>put方法  _doc/1 body里添加修改的json对象  全覆盖</li><li>post方法 _update/1  “doc”:{}  只修改doc里的部分内容</li></ul></li></ol><p><strong>ES sprinboot没有整合高版本的，需要硬编码</strong></p><ol><li>导入springboot整合ES的High Level Client坐标elasticsearch-rest-high-level-client</li><li>手工管理客户端对象，包括初始化和关闭操作<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-meta">@BeforeEach</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> </span>&#123;<br>    client = <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(HttpHost.create(<span class="hljs-string">&quot;http://localhost:9200&quot;</span>)));<br>&#125;<br><br><span class="hljs-meta">@AfterEach</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TearDown</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    client.close();<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用High Level Client根据操作的种类不同，选择不同的Request对象完成对应操作<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-meta">@Test</span><br>    void testCreateIndex() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">CreateIndexRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">CreateIndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>);<br>        <span class="hljs-type">String</span> source <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;    <span class="hljs-subst">\&quot;</span>mappings<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;        <span class="hljs-subst">\&quot;</span>properties<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>id<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>keyword<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>text<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>analyzer<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ik_max_word<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>copy_to<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>all<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>description<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>text<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>analyzer<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ik_max_word<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>copy_to<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>all<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>keyword<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            <span class="hljs-subst">\&quot;</span>all<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>type<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>text<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;                <span class="hljs-subst">\&quot;</span>analyzer<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>ik_max_word<span class="hljs-subst">\&quot;</span><span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;            &#125;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;        &#125;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;    &#125;<span class="hljs-subst">\n</span>&quot;</span> <span class="hljs-operator">+</span><br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        request.source(source, <span class="hljs-type">XContentType</span>.<span class="hljs-type">JSON</span>);<br>        client.indices().create(request, <span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testCreateDoc() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">Book</span> book <span class="hljs-operator">=</span> bookDao.selectById(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">IndexRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">IndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>).id(book.getId().toString());<br>        <span class="hljs-type">String</span> json <span class="hljs-operator">=</span> <span class="hljs-type">JSON</span>.toJSONString(book);<br>        request.source(json,<span class="hljs-type">XContentType</span>.<span class="hljs-type">JSON</span>).opType(<span class="hljs-type">DocWriteRequest</span>.<span class="hljs-type">OpType</span>.<span class="hljs-type">CREATE</span>);<br>        client.index(request,<span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testCreateDocs() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">List</span>&lt;<span class="hljs-type">Book</span>&gt; books <span class="hljs-operator">=</span> bookDao.selectList(null);<br>        <span class="hljs-type">BulkRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">BulkRequest</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">Book</span> book:books)&#123;<br>            <span class="hljs-type">IndexRequest</span> indexRequest <span class="hljs-operator">=</span> new <span class="hljs-type">IndexRequest</span>(<span class="hljs-string">&quot;books&quot;</span>).id(book.getId().toString());<br>            indexRequest.source(<span class="hljs-type">JSON</span>.toJSONString(book),<span class="hljs-type">XContentType</span>.<span class="hljs-type">JSON</span>).opType(<span class="hljs-type">DocWriteRequest</span>.<span class="hljs-type">OpType</span>.<span class="hljs-type">CREATE</span>);<br>            request.add(indexRequest);<br>        &#125;<br>        client.bulk(request,<span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testGet() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">GetRequest</span> getRequest <span class="hljs-operator">=</span> new <span class="hljs-type">GetRequest</span>(<span class="hljs-string">&quot;books&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>        <span class="hljs-type">GetResponse</span> getResponse <span class="hljs-operator">=</span> client.get(getRequest, <span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>);<br>        <span class="hljs-type">System</span>.out.println(getResponse.getSourceAsString());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    void testGetBy() <span class="hljs-keyword">throws</span> <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-type">SearchRequest</span> request <span class="hljs-operator">=</span> new <span class="hljs-type">SearchRequest</span>(<span class="hljs-string">&quot;books&quot;</span>);<br>        <span class="hljs-type">SearchSourceBuilder</span> builder <span class="hljs-operator">=</span> new <span class="hljs-type">SearchSourceBuilder</span>();<br>        builder.query(<span class="hljs-type">QueryBuilders</span>.termQuery(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;spring&quot;</span>));<br>        request.source(builder);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">SearchHit</span> hit : client.search(request, <span class="hljs-type">RequestOptions</span>.<span class="hljs-type">DEFAULT</span>).getHits()) &#123;<br>            <span class="hljs-type">System</span>.out.println(hit.getSourceAsString());<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="springboot-内置缓存"><a href="#springboot-内置缓存" class="headerlink" title="springboot 内置缓存"></a>springboot 内置缓存</h4><ul><li>spring-boot-starter-cache</li><li>@EnableCaching</li><li>设置操作的数据是否使用缓存@Cacheable(value=”cacheSpace”,key=”#id”) ，@CachePut 只放不取 ，@CacheEvict是用来标注在需要清除缓存元素的方法或类上的<h4 id="ehcache"><a href="#ehcache" class="headerlink" title="ehcache"></a>ehcache</h4></li><li>导入坐标  ehcache</li><li>yaml <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  cache:</span><br><span class="hljs-symbol">      type:</span> ehcache<br><span class="hljs-symbol">      ehcache:</span><br><span class="hljs-symbol">          config:</span> ehcache.xml<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ehcache</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:noNamespaceSchemaLocation</span>=<span class="hljs-string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">updateCheck</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">diskStore</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;D:\ehcache&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">defaultCache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;60&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cache</span></span><br><span class="hljs-tag">        <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;smsCode&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">eternal</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">diskPersistent</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">maxElementsInMemory</span>=<span class="hljs-string">&quot;1000&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">overflowToDisk</span>=<span class="hljs-string">&quot;false&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToIdleSeconds</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">timeToLiveSeconds</span>=<span class="hljs-string">&quot;10&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">memoryStoreEvictionPolicy</span>=<span class="hljs-string">&quot;LRU&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ehcache</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="redis-1"><a href="#redis-1" class="headerlink" title="redis"></a>redis</h4><ul><li><p>导坐标 spring-boot-starter-data-redis</p></li><li><p>加配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>  <span class="hljs-attr">cache:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">use-key-prefix:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">key-prefix:</span> <span class="hljs-string">sms_</span><br>      <span class="hljs-attr">cache-null-values:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">time-to-live:</span> <span class="hljs-string">10s</span><br></code></pre></td></tr></table></figure><h4 id="memcached"><a href="#memcached" class="headerlink" title="memcached"></a>memcached</h4><p>由于memcached未被springboot收录为缓存解决方案需要硬编码</p></li><li><p>导入坐标xmemcached（性能指标各方面最好的客户端）</p></li><li><p>配置memcached</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@Configuration<br>public <span class="hljs-keyword">class</span> XMemcachedConfig &#123;<br>    @Autowired<br>    <span class="hljs-keyword">private</span> XMemcachedProperties props;<br>    @Bean<br>    public MemcachedClient get<span class="hljs-constructor">MemcachedClient()</span> throws IOException &#123;<br>        MemcachedClientBuilder memcachedClientBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">XMemcachedClientBuilder(<span class="hljs-params">props</span>.<span class="hljs-params">getServers</span>()</span>);<br>        memcachedClientBuilder.set<span class="hljs-constructor">ConnectionPoolSize(<span class="hljs-params">props</span>.<span class="hljs-params">getPoolSize</span>()</span>);<br>        memcachedClientBuilder.set<span class="hljs-constructor">OpTimeout(<span class="hljs-params">props</span>.<span class="hljs-params">getOpTimeout</span>()</span>);<br>        MemcachedClient memcachedClient = memcachedClientBuilder.build<span class="hljs-literal">()</span>;<br>        return memcachedClient;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">memcached:</span><br>  <span class="hljs-attr">servers:</span> <span class="hljs-string">localhost:11211</span><br>  <span class="hljs-attr">poolSize:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">opTimeout:</span> <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@ConfigurationProperties</span>(prefix = <span class="hljs-string">&quot;memcached&quot;</span>)<br><span class="hljs-variable">@Data</span><br>public class XMemcachedProperties &#123;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">servers</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">int</span> <span class="hljs-selector-tag">poolSize</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">long</span> <span class="hljs-selector-tag">opTimeout</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>注入MemcachedClient对象set get操作即可</p><h4 id="jetcache"><a href="#jetcache" class="headerlink" title="jetcache"></a>jetcache</h4></li><li><p>本地缓存（Local）</p><ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li><p>远程缓存（Remote）</p><ul><li>Redis</li><li>Tair<h5 id="纯远程方案"><a href="#纯远程方案" class="headerlink" title="纯远程方案"></a>纯远程方案</h5></li></ul></li><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alicp.jetcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jetcache:</span><br>  <span class="hljs-attr">remote:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">sms:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure></li></ul><p><em><strong>其中poolConfig是必配项，否则会报错</strong></em></p><ul><li>开启缓存@EnableCreateCacheAnnotation</li><li>创建缓存对象，put写缓存，get读缓存。<br>@CreateCache(name=”jetCache_”,expire = 10,timeUnit = TimeUnit.SECONDS)<br>private Cache&lt;String ,String&gt; jetCache;</li></ul><h5 id="纯本地方案"><a href="#纯本地方案" class="headerlink" title="纯本地方案"></a>纯本地方案</h5><p>和远程的区别</p><ul><li>yaml配置<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">jetcache:</span><br><span class="hljs-symbol">  local:</span><br><span class="hljs-symbol">    default:</span><br><span class="hljs-symbol">      type:</span> linkedhashmap<br><span class="hljs-symbol">      keyConvertor:</span> fastjson<br></code></pre></td></tr></table></figure></li><li>@CreateCache(name=”jetCache_”,expire = 1000,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.LOCAL) 指定为本地<h5 id="本地-远程方案"><a href="#本地-远程方案" class="headerlink" title="本地+远程方案"></a>本地+远程方案</h5>和远程的区别</li><li>yaml配置<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jetcache:</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">linkedhashmap</span><br>      <span class="hljs-attr">keyConvertor:</span> <span class="hljs-string">fastjson</span><br>  <span class="hljs-attr">remote:</span><br>    <span class="hljs-attr">default:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">sms:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">redis</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">poolConfig:</span><br>        <span class="hljs-attr">maxTotal:</span> <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure></li><li>@CreateCache(name=”jetCache_”,expire = 1000,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.BOTH)</li><li>cacheType如果不进行配置，默认值是REMOTE</li></ul><h5 id="方法缓存"><a href="#方法缓存" class="headerlink" title="方法缓存"></a>方法缓存</h5><p>jetcache提供了方法缓存方案，只不过名称变更了而已。在对应的操作接口上方使用注解@Cached即可<br>需要保障进出redis的Object类型的数据必须实现序列化接口</p><ul><li>//jetcache启用缓存的主开关<br>@EnableCreateCacheAnnotation<br>//开启方法注解缓存<br>@EnableMethodCache(basePackages = “com.itheima”)</li><li>@Cached(name=”book_”,key=”#id”,expire = 3600,cacheType = CacheType.REMOTE)</li></ul><h5 id="远程方案的数据同步"><a href="#远程方案的数据同步" class="headerlink" title="远程方案的数据同步"></a>远程方案的数据同步</h5><p><strong>更新缓存</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">CacheUpdate(<span class="hljs-params">name</span>=<span class="hljs-string">&quot;book_&quot;</span>,<span class="hljs-params">key</span>=<span class="hljs-string">&quot;#book.id&quot;</span>,<span class="hljs-params">value</span>=<span class="hljs-string">&quot;#book&quot;</span>)</span><br>public boolean update(Book book) &#123;<br>    return bookDao.update<span class="hljs-constructor">ById(<span class="hljs-params">book</span>)</span> &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>删除缓存</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">@CacheInvalidate<span class="hljs-built_in">(name</span>=<span class="hljs-string">&quot;book_&quot;</span><span class="hljs-built_in">,key</span> = <span class="hljs-string">&quot;#id&quot;</span>)<br>public<span class="hljs-built_in"> boolean</span> <span class="hljs-keyword">delete</span>(Integer<span class="hljs-built_in"> id</span>) &#123;<br>    <span class="hljs-keyword">return</span> bookDao.deleteById<span class="hljs-built_in">(id</span>) &gt; <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定时刷新缓存</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Cached</span>(name=<span class="hljs-string">&quot;book_&quot;</span>,key=<span class="hljs-string">&quot;#id&quot;</span>,expire = <span class="hljs-number">3600</span>,cacheType = CacheType.REMOTE)<br><span class="hljs-variable">@CacheRefresh</span>(refresh = <span class="hljs-number">5</span>)<br>public Book getById(Integer id) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">bookDao</span><span class="hljs-selector-class">.selectById</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="j2cache"><a href="#j2cache" class="headerlink" title="j2cache"></a>j2cache</h4><ul><li><p>导入坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.j2cache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>j2cache-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.4-release<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.j2cache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.0-release<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.sf.ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ehcache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>j2cache的starter中默认包含了redis坐标，官方推荐使用redis作为二级缓存，因此此处无需导入redis坐标<br></code></pre></td></tr></table></figure></li><li><p>j2cache.properties</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># 1级缓存</span><br><span class="hljs-attr">j2cache.L1.provider_class</span> = ehcache<br><span class="hljs-attr">ehcache.configXml</span> = ehcache.xml<br><br><span class="hljs-comment"># 2级缓存</span><br><span class="hljs-attr">j2cache.L2.provider_class</span> = net.oschina.j2cache.cache.support.redis.SpringRedisProvider<br><span class="hljs-attr">j2cache.L2.config_section</span> = redis<br><span class="hljs-attr">redis.hosts</span> = localhost:<span class="hljs-number">6379</span><br><br><span class="hljs-comment"># 1级缓存中的数据如何到达二级缓存</span><br><span class="hljs-attr">j2cache.broadcast</span> = net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy<br></code></pre></td></tr></table></figure></li><li><p>使用缓存CacheChannel set get 方法</p></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><ul><li>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于<strong>发送</strong>电子邮件的传输协议</li><li>POP3（Post Office Protocol - Version 3）：用于<strong>接收</strong>电子邮件的标准协议</li><li>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</li></ul><p>简单说就是SMPT是发邮件的标准，POP3是收邮件的标准，IMAP是对POP3的升级。</p><h4 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h4><ul><li>导入spring-boot-starter-mail</li><li>配置邮箱登录信息<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  mail:</span><br><span class="hljs-symbol">    host:</span> smtp<span class="hljs-number">.126</span>.com<br><span class="hljs-symbol">    username:</span> test@<span class="hljs-number">126.</span>com<br><span class="hljs-symbol">    password:</span> test<br></code></pre></td></tr></table></figure></li><li>使用JavaMailSender 发送邮件<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">SimpleMailMessage message = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimpleMailMessage()</span>;<br>        message.set<span class="hljs-constructor">From(<span class="hljs-params">from</span>+<span class="hljs-string">&quot;(小甜甜)&quot;</span>)</span>;<span class="hljs-comment">//发送人</span><br>        message.set<span class="hljs-constructor">To(<span class="hljs-params">to</span>)</span>;<span class="hljs-comment">//接收人</span><br>        message.set<span class="hljs-constructor">Subject(<span class="hljs-params">subject</span>)</span>;<span class="hljs-comment">//标题</span><br>        message.set<span class="hljs-constructor">Text(<span class="hljs-params">context</span>)</span>;<span class="hljs-comment">//正文</span><br>        javaMailSender.send(message);<br></code></pre></td></tr></table></figure><h4 id="发送多组件邮件（附件、复杂正文）"><a href="#发送多组件邮件（附件、复杂正文）" class="headerlink" title="发送多组件邮件（附件、复杂正文）"></a>发送多组件邮件（附件、复杂正文）</h4>使用MimeMessage可以发送特殊的邮件<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">MimeMessage message = javaMailSender.create<span class="hljs-constructor">MimeMessage()</span>;<br>MimeMessageHelper helper = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MimeMessageHelper(<span class="hljs-params">message</span>,<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">//此处设置支持附件</span><br>helper.set<span class="hljs-constructor">From(<span class="hljs-params">to</span>+<span class="hljs-string">&quot;(小甜甜)&quot;</span>)</span>;<br>helper.set<span class="hljs-constructor">To(<span class="hljs-params">from</span>)</span>;<br>helper.set<span class="hljs-constructor">Subject(<span class="hljs-params">subject</span>)</span>;<br>helper.set<span class="hljs-constructor">Text(<span class="hljs-params">context</span>,<span class="hljs-params">true</span>)</span>;<span class="hljs-comment">//此处设置正文支持html解析</span><br> <span class="hljs-comment">//添加附件</span><br> File f1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-string">&quot;springboot_23_mail-0.0.1-SNAPSHOT.jar&quot;</span>)</span>;<br> File f2 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-string">&quot;resources\\logo.png&quot;</span>)</span>;<br><br> helper.add<span class="hljs-constructor">Attachment(<span class="hljs-params">f1</span>.<span class="hljs-params">getName</span>()</span>,f1);<br> helper.add<span class="hljs-constructor">Attachment(<span class="hljs-string">&quot;最靠谱的培训结构.png&quot;</span>,<span class="hljs-params">f2</span>)</span>;<br>javaMailSender.send(message);<br></code></pre></td></tr></table></figure></li></ul><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><h4 id="SpringBoot整合ActiveMQ-严格满足JMS规范"><a href="#SpringBoot整合ActiveMQ-严格满足JMS规范" class="headerlink" title="SpringBoot整合ActiveMQ(严格满足JMS规范)"></a>SpringBoot整合ActiveMQ(严格满足JMS规范)</h4><p>目前仅在一些线上运行的产品中出现，新产品开发较少采用。</p><ul><li>导入spring-boot-starter-activemq</li><li>配置地址 <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  activemq:</span><br>    broker-url: tcp:<span class="hljs-comment">//localhost:61616</span><br></code></pre></td></tr></table></figure></li><li>使用JmsMessagingTemplate操作ActiveMQ<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceActivemqImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JmsMessagingTemplate messagingTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列，id：&quot;</span>+id);<br>        messagingTemplate.convertAndSend(<span class="hljs-string">&quot;order.queue.id&quot;</span>,id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">doMessage</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">String</span> id = messagingTemplate.receiveAndConvert(<span class="hljs-string">&quot;order.queue.id&quot;</span>,<span class="hljs-built_in">String</span>.class);<br>        System.out.println(<span class="hljs-string">&quot;已完成短信发送业务，id：&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>使用监听器，当队列有消息时，立即消费<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageListener</span> </span>&#123;<br>    <span class="hljs-meta">@JmsListener(destination = <span class="hljs-meta-string">&quot;order.queue.id&quot;</span>)</span><br>    <span class="hljs-meta">@SendTo(<span class="hljs-meta-string">&quot;order.other.queue.id&quot;</span>)</span><span class="hljs-comment">//SendTo消费完成转发给下一个消息处理器</span><br>    <span class="hljs-keyword">public</span> String receive(String id)&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;已完成短信发送业务，id：&quot;</span>+id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;new:&quot;</span>+id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>切换消息模型由点对点模型到发布订阅模型，修改jms配置即可<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">activemq:</span><br>    <span class="hljs-attr">broker-url:</span> <span class="hljs-string">tcp://localhost:61616</span><br>  <span class="hljs-attr">jms:</span><br>    <span class="hljs-attr">pub-sub-domain:</span> <span class="hljs-literal">true</span>    <span class="hljs-string">pub-sub-domain默认值为false，即点对点模型</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h4><p>RabbitMQ是MQ产品中的目前较为流行的产品之一，它遵从AMQP协议</p><h5 id="整合-direct模型"><a href="#整合-direct模型" class="headerlink" title="整合(direct模型)"></a>整合(direct模型)</h5><ul><li><p>导入spring-boot-starter-amqp</p></li><li><p>配置yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br></code></pre></td></tr></table></figure></li><li><p>初始化RabbitMQ相关对象</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitConfigDirect</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">directQueue</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;direct_queue&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">directQueue2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;direct_queue2&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> DirectExchange <span class="hljs-function"><span class="hljs-title">directExchange</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DirectExchange(<span class="hljs-string">&quot;directExchange&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingDirect</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class="hljs-string">&quot;direct&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingDirect2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class="hljs-string">&quot;direct2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>使用AmqpTemplate操作RabbitMQ</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceRabbitmqDirectImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AmqpTemplate amqpTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessage</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列（rabbitmq direct），id：&quot;</span>+id);<br>        amqpTemplate.convertAndSend(<span class="hljs-string">&quot;directExchange&quot;</span>,<span class="hljs-string">&quot;direct&quot;</span>,id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>监听器监听消息，消费消息</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageListener</span> </span>&#123;<br>    <span class="hljs-meta">@RabbitListener</span>(queues = <span class="hljs-string">&quot;direct_queue&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">receive</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;已完成短信发送业务(rabbitmq direct)，id：&quot;</span>+id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="整合-topic模型"><a href="#整合-topic模型" class="headerlink" title="整合(topic模型)"></a>整合(topic模型)</h5><ul><li>初始化RabbitMQ相关对象</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitConfigTopic</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">topicQueue</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;topic_queue&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-function"><span class="hljs-title">topicQueue2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(<span class="hljs-string">&quot;topic_queue2&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TopicExchange <span class="hljs-function"><span class="hljs-title">topicExchange</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(<span class="hljs-string">&quot;topicExchange&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingTopic</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="hljs-string">&quot;topic.*.id&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-function"><span class="hljs-title">bindingTopic2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="hljs-string">&quot;topic.orders.*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>匹配键</strong></th><th>topic.*.*</th><th><strong>topic.#</strong></th></tr></thead><tbody><tr><td>topic.order.id</td><td>true</td><td>true</td></tr><tr><td>order.topic.id</td><td>false</td><td>false</td></tr><tr><td>topic.sm.order.id</td><td>false</td><td>true</td></tr><tr><td>topic.sm.id</td><td>false</td><td>true</td></tr><tr><td>topic.id.order</td><td>true</td><td>true</td></tr><tr><td>topic.id</td><td>false</td><td>true</td></tr><tr><td>topic.order</td><td>false</td><td>true</td></tr></tbody></table><h4 id="SpringBoot整合RocketMQ"><a href="#SpringBoot整合RocketMQ" class="headerlink" title="SpringBoot整合RocketMQ"></a>SpringBoot整合RocketMQ</h4><p>阿里研发捐赠给Apache基金会，它遵从AMQP协议。</p><h5 id="整合（异步消息）"><a href="#整合（异步消息）" class="headerlink" title="整合（异步消息）"></a>整合（异步消息）</h5><ul><li>导入rocketmq-spring-boot-starter springboot不维护</li><li>配置yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rocketmq:</span><br>  <span class="hljs-attr">name-server:</span> <span class="hljs-string">localhost:9876</span><br>  <span class="hljs-attr">producer:</span><br>    <span class="hljs-attr">group:</span> <span class="hljs-string">group_rocketmq</span><br></code></pre></td></tr></table></figure><ul><li>使用RocketMQTemplate操作RocketMQ</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceRocketmqImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RocketMQTemplate rocketMQTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列（rocketmq），id：&quot;</span>+id);<br>        SendCallback callback = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">SendCallback</span>(<span class="hljs-params"></span>)</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onSuccess</span>(<span class="hljs-params">SendResult sendResult</span>)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送成功&quot;</span>);<br>            &#125;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onException</span>(<span class="hljs-params">Throwable e</span>)</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;消息发送失败！！！！！&quot;</span>);<br>            &#125;<br>        &#125;;<br>        rocketMQTemplate.asyncSend(<span class="hljs-string">&quot;order_id&quot;</span>,id,callback);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>@RocketMQMessageListener监听消息  实现RocketMQListener接口 ，需要设置消息队列和组<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Component</span><br><span class="hljs-variable">@RocketMQMessageListener</span>(topic = <span class="hljs-string">&quot;order_id&quot;</span>,consumerGroup = <span class="hljs-string">&quot;group_rocketmq&quot;</span>)<br>public class MessageListener implements RocketMQListener&lt;String&gt; &#123;<br>    <span class="hljs-variable">@Override</span><br>    public void onMessage(String id) &#123;<br>        <span class="hljs-selector-tag">System</span><span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(<span class="hljs-string">&quot;已完成短信发送业务(rocketmq)，id：&quot;</span>+id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="SpringBoot整合Kafka"><a href="#SpringBoot整合Kafka" class="headerlink" title="SpringBoot整合Kafka"></a>SpringBoot整合Kafka</h4><ul><li>导入spring-kafka</li><li>配置Kafka的服务器地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">bootstrap-servers:</span> <span class="hljs-string">localhost:9092</span><br>    <span class="hljs-attr">consumer:</span><br>      <span class="hljs-attr">group-id:</span> <span class="hljs-string">order</span><br></code></pre></td></tr></table></figure><ul><li>使用KafkaTemplate操作Kafka<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageServiceKafkaImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MessageService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> KafkaTemplate&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; kafkaTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sendMessage</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> id</span>)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待发送短信的订单已纳入处理队列（kafka），id：&quot;</span>+id);<br>        kafkaTemplate.send(<span class="hljs-string">&quot;itheima2022&quot;</span>,id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>设置监听器@KafkaListener 配上队列名称，获取数据从ConsumerRecord对象中获取即可。<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MessageListener</span> </span>&#123;<br>    <span class="hljs-meta">@KafkaListener</span>(topics = <span class="hljs-string">&quot;itheima2022&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">onMessage</span>(<span class="hljs-params">ConsumerRecord&lt;<span class="hljs-built_in">String</span>,<span class="hljs-built_in">String</span>&gt; record</span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;已完成短信发送业务(kafka)，id：&quot;</span>+record.value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p><strong>服务端开发</strong></p><ul><li>导入坐标<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>yaml 可以配置一个client访问的端口</li><li>引导类上加@EnableAdminServer</li></ul><p><strong>客户端开发</strong></p><ul><li>导入坐标</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>允许服务器使用HTTP访问的配置</li></ul><p>整体上来说，对于端点的配置有两组信息，一组是endpoints开头的，对所有端点进行配置，一组是endpoint开头的，对具体端点进行配置。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">80</span><br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">  boot:</span><br><span class="hljs-symbol">    admin:</span><br><span class="hljs-symbol">      client:</span><br><span class="hljs-symbol">        url:</span> http:<span class="hljs-comment">//localhost:8080</span><br><span class="hljs-symbol">management:</span><br><span class="hljs-symbol">  endpoint:</span><br><span class="hljs-symbol">    health:</span><br>      show-details: always<br><span class="hljs-symbol">  endpoints:</span><br><span class="hljs-symbol">    web:</span><br><span class="hljs-symbol">      exposure:</span><br><span class="hljs-symbol">        include:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure><h3 id="自定义监控指标"><a href="#自定义监控指标" class="headerlink" title="自定义监控指标"></a>自定义监控指标</h3><p><strong>INFO端点</strong></p><p>info端点描述了当前应用的基本信息，可以通过两种形式快速配置info端点的信息</p><ul><li><p>配置形式</p><p>在yml文件中通过设置info节点的信息就可以快速配置端点信息</p></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">info:</span><br><span class="hljs-symbol">  appName:</span> @project.artifactId@<br><span class="hljs-symbol">  version:</span> @project.version@<br><span class="hljs-symbol">  company:</span> 传智教育<br><span class="hljs-symbol">  author:</span> itheima<br></code></pre></td></tr></table></figure><ul><li><p>编程形式</p><p>通过配置的形式只能添加固定的数据，如果需要动态数据还可以通过配置bean的方式为info端点添加信息，此信息与配置信息共存</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InfoConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InfoContributor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contribute</span><span class="hljs-params">(Info.Builder builder)</span> </span>&#123;<br>        builder.withDetail(<span class="hljs-string">&quot;runTime&quot;</span>,System.currentTimeMillis());<span class="hljs-comment">//添加单个信息</span><br>        Map infoMap = <span class="hljs-keyword">new</span> HashMap();<br>        infoMap.put(<span class="hljs-string">&quot;buildTime&quot;</span>,<span class="hljs-string">&quot;2006&quot;</span>);<br>        builder.withDetails(infoMap);<span class="hljs-comment">//添加一组信息</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Health端点</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Component</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HealthConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractHealthIndicator</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> void doHealthCheck(<span class="hljs-type">Health</span>.<span class="hljs-type">Builder</span> builder) <span class="hljs-keyword">throws</span> <span class="hljs-type">Exception</span> &#123;<br>        boolean condition = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(condition) &#123;<br>            builder.status(<span class="hljs-type">Status</span>.<span class="hljs-type">UP</span>);<span class="hljs-comment">//设置运行状态为启动状态</span><br>            builder.withDetail(<span class="hljs-string">&quot;runTime&quot;</span>, <span class="hljs-type">System</span>.currentTimeMillis());<br>            <span class="hljs-type">Map</span> infoMap = <span class="hljs-keyword">new</span> <span class="hljs-type">HashMap</span>();<br>            infoMap.put(<span class="hljs-string">&quot;buildTime&quot;</span>, <span class="hljs-string">&quot;2006&quot;</span>);<br>            builder.withDetails(infoMap);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            builder.status(<span class="hljs-type">Status</span>.<span class="hljs-type">OUT_OF_SERVICE</span>);<span class="hljs-comment">//设置运行状态为不在服务状态</span><br>            builder.withDetail(<span class="hljs-string">&quot;上线了吗？&quot;</span>,<span class="hljs-string">&quot;你做梦&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当任意一个组件状态不为UP时，整体应用对外服务状态为非UP状态。</p><p><strong>Metrics端点</strong></p><p>metrics端点描述了性能指标，除了系统自带的监控性能指标，还可以自定义性能指标。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@Service</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceImpl&lt;BookDao</span>, <span class="hljs-title">Book&gt;</span> <span class="hljs-title">implements</span> <span class="hljs-title">IBookService</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BookDao</span> bookDao;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Counter</span> counter;<br><br>    public <span class="hljs-type">BookServiceImpl</span>(<span class="hljs-type">MeterRegistry</span> meterRegistry)&#123;<br>        counter = meterRegistry.counter(<span class="hljs-string">&quot;用户付费操作次数：&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    public boolean delete(<span class="hljs-type">Integer</span> id) &#123;<br>        <span class="hljs-comment">//每次执行删除业务等同于执行了付费业务</span><br>        counter.increment();<br>        <span class="hljs-keyword">return</span> bookDao.deleteById(id) &gt; <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>自定义端点</strong><br>可以根据业务需要自定义端点，方便业务监控</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Endpoint</span>(id=<span class="hljs-string">&quot;pay&quot;</span>,enableByDefault = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PayEndpoint</span> </span>&#123;<br>    <span class="hljs-meta">@ReadOperation</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">getPay</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">Map</span> payMap = <span class="hljs-keyword">new</span> HashMap();<br>        payMap.put(<span class="hljs-string">&quot;level 1&quot;</span>,<span class="hljs-string">&quot;300&quot;</span>);<br>        payMap.put(<span class="hljs-string">&quot;level 2&quot;</span>,<span class="hljs-string">&quot;291&quot;</span>);<br>        payMap.put(<span class="hljs-string">&quot;level 3&quot;</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>        <span class="hljs-keyword">return</span> payMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nettyAccept</title>
    <link href="/2022/01/24/nettyAccept/"/>
    <url>/2022/01/24/nettyAccept/</url>
    
    <content type="html"><![CDATA[<h1 id="netty-启动接受新连接"><a href="#netty-启动接受新连接" class="headerlink" title="netty 启动接受新连接"></a>netty 启动接受新连接</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>selector.select()阻塞直到有事件发生</li><li>遍历处理selectedKeys</li><li>判断事件类型是否是accept</li><li>创建SocketChannel,设置为非阻塞</li><li>将SocketChannel注册到selector上</li><li>关注read事件</li></ul><p>##每一步对应的代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs csharp">判断事件类型是否是accept<br>NioEventLoop 里<span class="hljs-function">processSelectedKey</span><br><span class="hljs-function"><span class="hljs-title">if</span> (<span class="hljs-params">(readyOps &amp; (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT</span>)) !</span>= <span class="hljs-number">0</span> || readyOps == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">unsafe</span>.read();<br> &#125;<br><span class="hljs-keyword">unsafe</span>类型 AbstractNioMessageChannel<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">创建SocketChannel,设置为非阻塞<br>NioMessageUnsafe read() <br>NioServerSocketChannel doReadMessages<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">doReadMessages</span><span class="hljs-params">(List&lt;Object&gt; buf)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>     SocketChannel ch = SocketUtils.accept(javaChannel());<br><br>     <span class="hljs-keyword">try</span> &#123;<br>         <span class="hljs-keyword">if</span> (ch != <span class="hljs-keyword">null</span>) &#123;<br>             buf.add(<span class="hljs-keyword">new</span> NioSocketChannel(<span class="hljs-keyword">this</span>, ch));<br>             <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>         &#125;<br>     &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>         logger.warn(<span class="hljs-string">&quot;Failed to create a new channel from an accepted socket.&quot;</span>, t);<br><br>         <span class="hljs-keyword">try</span> &#123;<br>             ch.close();<br>         &#125; <span class="hljs-keyword">catch</span> (Throwable t2) &#123;<br>             logger.warn(<span class="hljs-string">&quot;Failed to close a socket.&quot;</span>, t2);<br>         &#125;<br>     &#125;<br><br>     <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">将SocketChannel注册到selector上<br>pipeline.fire<span class="hljs-constructor">ChannelRead(<span class="hljs-params">readBuf</span>.<span class="hljs-params">get</span>(<span class="hljs-params">i</span>)</span>);<br>NioServerSocketChannel的pipeline流水线操作，实际处理是由ServerBootstrapAcceptor 的channelRead<br>        public void channel<span class="hljs-constructor">Read(ChannelHandlerContext <span class="hljs-params">ctx</span>, Object <span class="hljs-params">msg</span>)</span> &#123;<br>            final Channel child = (Channel) msg;<br><br>            child.pipeline<span class="hljs-literal">()</span>.add<span class="hljs-constructor">Last(<span class="hljs-params">childHandler</span>)</span>;<br><br>            set<span class="hljs-constructor">ChannelOptions(<span class="hljs-params">child</span>, <span class="hljs-params">childOptions</span>, <span class="hljs-params">logger</span>)</span>;<br><br>            <span class="hljs-keyword">for</span> (Entry&lt;AttributeKey&lt;?&gt;, Object&gt; e: childAttrs) &#123;<br>                child.attr((AttributeKey&lt;Object&gt;) e.get<span class="hljs-constructor">Key()</span>).set(e.get<span class="hljs-constructor">Value()</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                childGroup.register(child).add<span class="hljs-constructor">Listener(<span class="hljs-params">new</span> ChannelFutureListener()</span> &#123;<br>                    @Override<br>                    public void operation<span class="hljs-constructor">Complete(ChannelFuture <span class="hljs-params">future</span>)</span> throws Exception &#123;<br>                        <span class="hljs-keyword">if</span> (!future.is<span class="hljs-constructor">Success()</span>) &#123;<br>                            force<span class="hljs-constructor">Close(<span class="hljs-params">child</span>, <span class="hljs-params">future</span>.<span class="hljs-params">cause</span>()</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;);<br>            &#125; catch (Throwable t) &#123;<br>                force<span class="hljs-constructor">Close(<span class="hljs-params">child</span>, <span class="hljs-params">t</span>)</span>;<br>            &#125;<br>        &#125;<br>        <br><br>        register方法里线程切换<br>            <span class="hljs-keyword">if</span> (eventLoop.<span class="hljs-keyword">in</span><span class="hljs-constructor">EventLoop()</span>) &#123;<br>                register0(promise);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    eventLoop.execute(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Runnable()</span> &#123;<br>                        @Override<br>                        public void run<span class="hljs-literal">()</span> &#123;<br>                            register0(promise);<br>                        &#125;<br>                    &#125;);<br>                &#125; catch (Throwable t) &#123;<br>                    logger.warn(<br>                            <span class="hljs-string">&quot;Force-closing a channel whose registration task was not accepted by an event loop: &#123;&#125;&quot;</span>,<br>                            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractChannel</span>.</span></span>this, t);<br>                    close<span class="hljs-constructor">Forcibly()</span>;<br>                    closeFuture.set<span class="hljs-constructor">Closed()</span>;<br>                    safe<span class="hljs-constructor">SetFailure(<span class="hljs-params">promise</span>, <span class="hljs-params">t</span>)</span>;<br>                &#125;<br>            &#125;<br><br>            register0里<span class="hljs-keyword">do</span><span class="hljs-constructor">Register()</span>; 完成NioSocketChannel注册到seletor上，无关注事件<br>            pipeline.invoke<span class="hljs-constructor">HandlerAddedIfNeeded()</span>; 构建NioSocketChannel的pipeline<br>            将hangler添加到pipeline<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">关注read事件  层层调用最后 在AbstractNioChannel类<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> doBeginRead() throws Exception &#123;<br>        <span class="hljs-comment">// Channel.read() or ChannelHandlerContext.read() was called</span><br>        <span class="hljs-keyword">final</span> SelectionKey selectionKey = <span class="hljs-keyword">this</span>.selectionKey;<br>        <span class="hljs-keyword">if</span> (!selectionKey.isValid()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        readPending = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> <span class="hljs-built_in">int</span>erestOps = selectionKey.<span class="hljs-built_in">int</span>erestOps();<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>erestOps &amp; readInterestOp) == <span class="hljs-number">0</span>) &#123;<br>            selectionKey.<span class="hljs-built_in">int</span>erestOps(<span class="hljs-built_in">int</span>erestOps | readInterestOp);<br>        &#125;<br>    &#125;<br><br>    其中readInterestOp 是在构建NioSocketChannel时设置的OP_READ<br>    <span class="hljs-keyword">protected</span> AbstractNioByteChannel(Channel parent, SelectableChannel ch) &#123;<br>            <span class="hljs-keyword">super</span>(parent, ch, SelectionKey.OP_READ);<br>    &#125;   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nettyBoot</title>
    <link href="/2022/01/11/nettyBoot/"/>
    <url>/2022/01/11/nettyBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="netty-启动流程"><a href="#netty-启动流程" class="headerlink" title="netty 启动流程"></a>netty 启动流程</h1><p>对比分析一下 </p><h2 id="nio启动步骤"><a href="#nio启动步骤" class="headerlink" title="nio启动步骤"></a>nio启动步骤</h2><ul><li>Selector selector = Selector.open();</li><li>ServerSocketChannel ssc = ServerSocketChannel.open();</li><li>SelectionKey selectionKey = ssc.register(selector,0,nettySsc);</li><li>ssc.bind(new InetSocketAddress(8080,backlog));</li><li>selectionKey.interestOps(SelectionKey.OP_ACCEPT);</li></ul><h2 id="netty启动步骤"><a href="#netty启动步骤" class="headerlink" title="netty启动步骤"></a>netty启动步骤</h2><ul><li>init<ul><li>创建niossc main</li><li>添加初始化handler main<ul><li>初始化hander被调用 (向niossc 添加acceptorHandler)nio-thread</li></ul></li></ul></li><li>register<ul><li>原生ssc注册到seletor 未关注事件 nio-thread</li><li>执行niossc初始化handler nio-thread</li></ul></li><li>bind<ul><li>原生ssc绑定端口 nio-thread</li><li>fire niossc active事件（设置了关注事件)</li></ul></li></ul><h3 id="细节分析"><a href="#细节分析" class="headerlink" title="细节分析"></a>细节分析</h3><p> 1.初始化handler什么时候被调用?<br> <figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">AbstractChannel类中register0方法里<br>pipeline.invokeHandlerAddedIfNeeded()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><br> niossc初始化handler只会执行一次，执行完自动删除<br> <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">执行一次<br>DefaultChannelPipeline类中方法<br>final void invoke<span class="hljs-constructor">HandlerAddedIfNeeded()</span> &#123;<br>        <span class="hljs-keyword">assert</span> channel.event<span class="hljs-constructor">Loop()</span>.<span class="hljs-keyword">in</span><span class="hljs-constructor">EventLoop()</span>;<br>        <span class="hljs-keyword">if</span> (firstRegistration) &#123;<br>            firstRegistration = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">// We are now registered to the EventLoop. It&#x27;s time to call the callbacks for the ChannelHandlers,</span><br>            <span class="hljs-comment">// that were added before the registration was done.</span><br>            call<span class="hljs-constructor">HandlerAddedForAllHandlers()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">自动删除<br>ChannelInitializer类中方法<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">handlerAdded</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (ctx.channel().isRegistered()) &#123;<br>            initChannel(ctx);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">if</span> (initMap.putIfAbsent(ctx, Boolean.TRUE) == <span class="hljs-keyword">null</span>) &#123; <span class="hljs-comment">// Guard against re-entrance.</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                initChannel((C) ctx.channel());<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable cause) &#123;<br>                <span class="hljs-comment">// Explicitly call exceptionCaught(...) as we removed the handler before calling initChannel(...).</span><br>                <span class="hljs-comment">// We do so to prevent multiple calls to initChannel(...).</span><br>                exceptionCaught(ctx, cause);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                remove(ctx);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>ServerBootStrap 中init 里的<br>p.addLast(<span class="hljs-keyword">new</span> ChannelInitializer&lt;Channel&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Channel ch)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-keyword">final</span> ChannelPipeline pipeline = ch.pipeline();<br>                ChannelHandler <span class="hljs-keyword">handler</span> = config.<span class="hljs-keyword">handler</span>();<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">handler</span> != <span class="hljs-keyword">null</span>) &#123;<br>                    pipeline.addLast(<span class="hljs-keyword">handler</span>);<br>                &#125;<br><br>                ch.eventLoop().execute(<span class="hljs-keyword">new</span> Runnable() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                        pipeline.addLast(<span class="hljs-keyword">new</span> ServerBootstrapAcceptor(<br>                                ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));<br>                    &#125;<br>                &#125;);<br>            &#125;<br>        &#125;);<br><br>ServerSocketChannel的pipeline里的<span class="hljs-keyword">handler</span><br>Head-&gt;ServerBootstrapAcceptor-&gt;Tail<br></code></pre></td></tr></table></figure><p>2 创建NioServerSocketChannel</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">通过反射调用NioServerSocketChannel构造方法<br>public T <span class="hljs-keyword">new</span><span class="hljs-constructor">Channel()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        return clazz.get<span class="hljs-constructor">Constructor()</span>.<span class="hljs-keyword">new</span><span class="hljs-constructor">Instance()</span>;<br>    &#125; catch (Throwable t) &#123;<br>        throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">ChannelException(<span class="hljs-string">&quot;Unable to create Channel from class &quot;</span> + <span class="hljs-params">clazz</span>, <span class="hljs-params">t</span>)</span>;<br>    &#125;<br>&#125;<br>最终和Nio创建 ServerSocketChannel ssc = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ServerSocketChannel</span>.</span></span><span class="hljs-keyword">open</span><span class="hljs-literal">()</span>;<br>调用的同一个类SelectorProviderImpl里的方法<br>public ServerSocketChannel <span class="hljs-keyword">open</span><span class="hljs-constructor">ServerSocketChannel()</span> throws IOException &#123;<br>    return <span class="hljs-keyword">new</span> <span class="hljs-constructor">ServerSocketChannelImpl(<span class="hljs-params">this</span>)</span>;<br>&#125;<br><br>为channel构建一个包含head 和 tail 的 pipeline<br>protected <span class="hljs-constructor">AbstractChannel(Channel <span class="hljs-params">parent</span>)</span> &#123;<br>        this.parent = parent;<br>        id = <span class="hljs-keyword">new</span><span class="hljs-constructor">Id()</span>;<br>        unsafe = <span class="hljs-keyword">new</span><span class="hljs-constructor">Unsafe()</span>;<br>        pipeline = <span class="hljs-keyword">new</span><span class="hljs-constructor">ChannelPipeline()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.bind什么时候调用？</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">异步调用，<br>  final ChannelFuture regFuture = init<span class="hljs-constructor">AndRegister()</span>;<br>  regFuture.add<span class="hljs-constructor">Listener(<span class="hljs-params">new</span> ChannelFutureListener()</span> &#123;<br>                @Override<br>                public void operation<span class="hljs-constructor">Complete(ChannelFuture <span class="hljs-params">future</span>)</span> throws Exception &#123;<br>                    Throwable cause = future.cause<span class="hljs-literal">()</span>;<br>                    <span class="hljs-keyword">if</span> (cause != null) &#123;<br>                        promise.set<span class="hljs-constructor">Failure(<span class="hljs-params">cause</span>)</span>;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        promise.registered<span class="hljs-literal">()</span>;<br>                        <span class="hljs-keyword">do</span><span class="hljs-constructor">Bind0(<span class="hljs-params">regFuture</span>, <span class="hljs-params">channel</span>, <span class="hljs-params">localAddress</span>, <span class="hljs-params">promise</span>)</span>;<br>                    &#125;<br>                &#125;<br>            &#125;);<br>  abstractChannel类里的register0方法<br>  safe<span class="hljs-constructor">SetSuccess(<span class="hljs-params">promise</span>)</span>;<br></code></pre></td></tr></table></figure><p>4.哪里设置了OP_ACCEPT事件</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">AbstractNioChannel类<br> @Override<br>    <span class="hljs-keyword">protected</span> <span class="hljs-built_in">void</span> doBeginRead() throws Exception &#123;<br>        <span class="hljs-comment">// Channel.read() or ChannelHandlerContext.read() was called</span><br>        <span class="hljs-keyword">final</span> SelectionKey selectionKey = <span class="hljs-keyword">this</span>.selectionKey;<br>        <span class="hljs-keyword">if</span> (!selectionKey.isValid()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        readPending = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> <span class="hljs-built_in">int</span>erestOps = selectionKey.<span class="hljs-built_in">int</span>erestOps();<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">int</span>erestOps &amp; readInterestOp) == <span class="hljs-number">0</span>) &#123;<br>            selectionKey.<span class="hljs-built_in">int</span>erestOps(<span class="hljs-built_in">int</span>erestOps | readInterestOp);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NIO</title>
    <link href="/2021/12/13/nio/"/>
    <url>/2021/12/13/nio/</url>
    
    <content type="html"><![CDATA[<h2 id="NIO简介"><a href="#NIO简介" class="headerlink" title="NIO简介"></a>NIO简介</h2><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>Channel 双向数据通道，可以向通道中读写</p><ul><li>FileChannel  -&gt; 文件传输</li><li>DatagramChannel -&gt; UDP</li><li>ServerSocketChannel -&gt;TCP 只用于服务器</li><li>SocketChannel -&gt;TCP   服务器客户端都用到</li></ul><h3 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h3><p>Buffer 数据暂存缓冲区<br>怎么知道是读模式还是写模式呢?<br>无论哪种模式position=limit 进行读写会异常，所有读之前必须flip() ,读完再写入必须clear()</p><ul><li>Capacity </li><li>Position </li><li>Limit </li><li>Mark </li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>Flip() limit=position position=0<br>Clear() limit=capacity position=0<br>Compact() position = 剩余未读的数据 limit=capacity 未读字节从0开始，原来位置上的数据保持不动</p><ul><li>1 2 3 4</li><li>1 2 已读 </li><li>3 4 3 4 position=2  从第二个3开始写</li></ul><h4 id="读方法-rewind-mark-and-reset"><a href="#读方法-rewind-mark-and-reset" class="headerlink" title="读方法 rewind()     mark() and reset()"></a>读方法 rewind()     mark() and reset()</h4><p>Rewind()  position=0<br>Mark() mark =position标记当前位置<br>Reset() position=mark 从mark开始读</p><h4 id="字符串和ByteBuffer转换-三种方式"><a href="#字符串和ByteBuffer转换-三种方式" class="headerlink" title="字符串和ByteBuffer转换 三种方式"></a>字符串和ByteBuffer转换 三种方式</h4><ul><li>直接放入byte数组   </li><li>StandardCharsets.encode()   -&gt;自动调用flip()切换到读模式</li><li>ByteBuffer.Wrap()                -&gt;自动调用flip()切换到读模式<div class="code-wrapper"><pre><code class="hljs">  ByteBuffer byteBuffer1 = ByteBuffer.allocate(16);  byte[] bytes = &quot;hello&quot;.getBytes();  byteBuffer1.put(bytes);  byteBuffer1.flip();  System.out.println(new String(byteBuffer1.array(), byteBuffer1.position(), byteBuffer1.limit(), &quot;utf-8&quot;));  ByteBuffer byteBuffer2 = StandardCharsets.UTF_8.encode(&quot;hello&quot;);  System.out.println(StandardCharsets.UTF_8.decode(byteBuffer2).toString());  ByteBuffer byteBuffer3 = ByteBuffer.wrap(&quot;hello&quot;.getBytes());  System.out.println(StandardCharsets.UTF_8.decode(byteBuffer3).toString());</code></pre></div></li></ul><h3 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h3><h4 id="单线程模式"><a href="#单线程模式" class="headerlink" title="单线程模式"></a>单线程模式</h4><ul><li>阻塞模式下阻塞方法之间相互影响，不能正常处理多个连接</li><li>非阻塞模式下cpu占用高空轮询</li></ul><h4 id="多线程版本的通讯"><a href="#多线程版本的通讯" class="headerlink" title="多线程版本的通讯"></a>多线程版本的通讯</h4><p>每个socket有单独的线程提供服务</p><ul><li>内存占用高，一个线程默认占用1m内存</li><li>线程上下文切换(线程不为你服务时需要暂存信息，到你了恢复信息)</li><li>只适用于连接数据较少的情况</li></ul><h4 id="线程池版本"><a href="#线程池版本" class="headerlink" title="线程池版本"></a>线程池版本</h4><ul><li>阻塞模式下，一个线程仅仅只是处理一个连接</li><li>仅仅适合短连接场景</li></ul><h4 id="Selector-版本-多路复用模式"><a href="#Selector-版本-多路复用模式" class="headerlink" title="Selector 版本(多路复用模式)"></a>Selector 版本(多路复用模式)</h4><p>Selector 配合一个线程管理多个channel 过去channel上的事件，这些channel工作在非阻塞模式下，不会一直占用<br>线程</p><p>Accept -服务端有连接请求时触发<br>Connect - 客户端连接建立后触发的<br>Read -可读<br>Write-可写</p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>零拷贝指的是数据无需拷贝到 JVM 内存（用户缓冲区如byte[] ByteBuffer）中，同时具有以下三个优点</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算</li><li>零拷贝适合小文件传输</li></ul><p>1.Java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 Java 程序的用户态切换至内核态，去调用操作系统（Kernel）的读能力，将数据读入内核缓冲区。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 CPU</p><p>2.从内核态切换回用户态，将数据从内核缓冲区读入用户缓冲区（即 byte[] buf），这期间 CPU 会参与拷贝，无法利用 DMA</p><p>3.调用 write 方法，这时将数据从用户缓冲区（byte[] buf）写入 socket 缓冲区，CPU 会参与拷贝</p><p>4.接下来要向网卡写数据，这项能力 Java 又不具备，因此又得从用户态切换至内核态，调用操作系统的写能力，使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 CPU</p><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><p>用户态与内核态的切换发生了 3 次，这个操作比较重量级<br>数据拷贝了共 4 次</p><h4 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h4><p>通过 DirectByteBuf<br>减少了一次数据拷贝，用户态与内核态的切换次数没有减少<br>进一步优化1<br>以下两种方式都是零拷贝，即无需将数据拷贝到用户缓冲区中（JVM内存中）</p><p>底层采用了 linux 2.1 后提供的 sendFile 方法，Java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据</p><p>Java 调用 transferTo 方法后，要从 Java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不会使用 CPU</p><p>数据从内核缓冲区传输到 socket 缓冲区，CPU 会参与拷贝</p><p>最后使用 DMA 将 socket 缓冲区的数据写入网卡，不会使用 CPU</p><p>这种方法下只发生了1次用户态与内核态的切换<br>数据拷贝了 3 次</p><h4 id="进一步优化2"><a href="#进一步优化2" class="headerlink" title="进一步优化2"></a>进一步优化2</h4><p>linux 2.4 对上述方法再次进行了优化</p><p>Java 调用 transferTo 方法后，要从 Java 程序的用户态切换至内核态，使用 DMA将数据读入内核缓冲区，不会使用 CPU</p><p>只会将一些 offset 和 length 信息拷入 socket 缓冲区，几乎无消耗</p><p>使用 DMA 将 内核缓冲区的数据写入网卡，不会使用 CPU</p><p>整个过程仅只发生了1次用户态与内核态的切换，数据拷贝了 2 次</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建教程</title>
    <link href="/2021/10/28/hexo/"/>
    <url>/2021/10/28/hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是搭建博客的框架</p><ol><li><p>安装Git</p></li><li><p>安装nodejs</p></li><li><p>安装hexo</p><p> 前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹hexo(随意命名)，在这个文件夹下直接shift+右键打开powershell</p><p> 输入命令</p>  <figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>-g hexo-cli<br>hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span>hexo s <br></code></pre></td></tr></table></figure><p> hexo s 也就是hexo server 代表打开了本地服务在浏览器输入localhost:4000就可以看到你生成的博客了  </p> <img src="/2021/10/28/hexo/zkx.png" class="">  </li><li><p>GitHub创建个人仓库</p><p> 例如用户名是zhangsan 仓库名就是 zhangsan.github.io</p></li><li><p>部署到github  </p><ul><li><p>生成token后续使用(使用用户名密码方式已经被官方删除了，现在只能使用token)<br>  a. 找到自己的repo<br>  b. 找到Settings<br>  c. 找到Developer settings<br>  d. 找到Personal access tokens  新建生成</p></li><li><p>打开hexo目录下的_config.yml<br>deploy:<br>  type: git    注意每个冒号后面都有空格<br>  repo: https: <a href="mailto:&#116;&#x6f;&#x6b;&#x65;&#110;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;">&#116;&#x6f;&#x6b;&#x65;&#110;&#x40;&#x67;&#105;&#116;&#x68;&#117;&#x62;&#x2e;&#99;&#111;&#109;</a>/用户名/用户名.github.io.git<br>  branch: master  </p></li><li><p>安装部署工具 hexo-deploy-git    </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>可以写文章了,新建一篇文章 helloworld</p><div class="code-wrapper"><pre><code class="hljs">  hexo new helloworld  </code></pre></div></li></ul><p> 默认会在_posts下生成helloworld.md，然后就可以编辑自己的文章了</p><ul><li><p>写好可以先本地查看  </p><div class="code-wrapper"><pre><code class="hljs">  hexo clean  hexo s</code></pre></div></li><li><p>没啥问题就推送到github</p><div class="code-wrapper"><pre><code class="hljs">  hexo clean  hexo g -d  //g generate缩写生产静态文章 d deploy 缩写 部署到github</code></pre></div></li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>diary</title>
    <link href="/2021/10/27/diary/"/>
    <url>/2021/10/27/diary/</url>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-GitHub-Pages"><a href="#Welcome-to-GitHub-Pages" class="headerlink" title="Welcome to GitHub Pages"></a>Welcome to GitHub Pages</h2><p>You can use the <a href="https://github.com/kexiazhou/kexiazhou.github.io/edit/main/README.md">editor on GitHub</a> to maintain and preview the content for your website in Markdown files.</p><p>Whenever you commit to this repository, GitHub Pages will run <a href="https://jekyllrb.com/">Jekyll</a> to rebuild the pages in your site, from the content in your Markdown files.</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for</p><figure class="highlight markdown"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs markdown">Syntax highlighted code block<br><br><span class="hljs-section"># Header 1</span><br><span class="hljs-section">## Header 2</span><br><span class="hljs-section">### Header 3</span><br><br><span class="hljs-bullet">-</span> Bulleted<br><span class="hljs-bullet">-</span> List<br><br><span class="hljs-bullet">1.</span> Numbered<br><span class="hljs-bullet">2.</span> List<br><br><span class="hljs-strong">**Bold**</span> and <span class="hljs-emphasis">_Italic_</span> and <span class="hljs-code">`Code`</span> text<br><br>[<span class="hljs-string">Link</span>](<span class="hljs-link">url</span>) and ![<span class="hljs-string">Image</span>](<span class="hljs-link">src</span>)<br></code></pre></td></tr></table></figure><p>1.sssss<br>2.ggggg<br>3.hhhhh<br>-rrrrrr<br>-yyyyyy<br>-uuuuuu<br>For more details see <a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown</a>.</p><h3 id="Jekyll-Themes"><a href="#Jekyll-Themes" class="headerlink" title="Jekyll Themes"></a>Jekyll Themes</h3><p>Your Pages site will use the layout and styles from the Jekyll theme you have selected in your <a href="https://github.com/kexiazhou/kexiazhou.github.io/settings/pages">repository settings</a>. The name of this theme is saved in the Jekyll <code>_config.yml</code> configuration file.</p><h3 id="Support-or-Contact"><a href="#Support-or-Contact" class="headerlink" title="Support or Contact"></a>Support or Contact</h3><p>Having trouble with Pages? Check out our <a href="https://docs.github.com/categories/github-pages-basics/">documentation</a> or <a href="https://support.github.com/contact">contact support</a> and we’ll help you sort it out.<br>创建脚注格式类似这样 [^RUNOOB]。</p><p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>netty</title>
    <link href="/2021/10/27/netty/"/>
    <url>/2021/10/27/netty/</url>
    
    <content type="html"><![CDATA[<h2 id="netty简介"><a href="#netty简介" class="headerlink" title="netty简介"></a>netty简介</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/10/27/hello-world/"/>
    <url>/2021/10/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
